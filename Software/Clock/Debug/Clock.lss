
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000212  00800060  00001a10  00001aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800272  00800272  00001cb6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00002410  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023bf  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  0000490f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107f  00000000  00000000  000050f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00006174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d9  00000000  00000000  00006844  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025f4  00000000  00000000  0000701d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00009611  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	8a c0       	rjmp	.+276    	; 0x118 <__bad_interrupt>
       4:	89 c0       	rjmp	.+274    	; 0x118 <__bad_interrupt>
       6:	88 c0       	rjmp	.+272    	; 0x118 <__bad_interrupt>
       8:	87 c0       	rjmp	.+270    	; 0x118 <__bad_interrupt>
       a:	86 c0       	rjmp	.+268    	; 0x118 <__bad_interrupt>
       c:	85 c0       	rjmp	.+266    	; 0x118 <__bad_interrupt>
       e:	84 c0       	rjmp	.+264    	; 0x118 <__bad_interrupt>
      10:	83 c0       	rjmp	.+262    	; 0x118 <__bad_interrupt>
      12:	82 c0       	rjmp	.+260    	; 0x118 <__bad_interrupt>
      14:	81 c0       	rjmp	.+258    	; 0x118 <__bad_interrupt>
      16:	80 c0       	rjmp	.+256    	; 0x118 <__bad_interrupt>
      18:	7f c0       	rjmp	.+254    	; 0x118 <__bad_interrupt>
      1a:	7e c0       	rjmp	.+252    	; 0x118 <__bad_interrupt>
      1c:	7d c0       	rjmp	.+250    	; 0x118 <__bad_interrupt>
      1e:	7c c0       	rjmp	.+248    	; 0x118 <__bad_interrupt>
      20:	7b c0       	rjmp	.+246    	; 0x118 <__bad_interrupt>
      22:	7a c0       	rjmp	.+244    	; 0x118 <__bad_interrupt>
      24:	79 c0       	rjmp	.+242    	; 0x118 <__bad_interrupt>
      26:	9d c0       	rjmp	.+314    	; 0x162 <LCD_DisplayBigNum+0x16>
      28:	b4 c0       	rjmp	.+360    	; 0x192 <LCD_DisplayBigNum+0x46>
      2a:	cb c0       	rjmp	.+406    	; 0x1c2 <LCD_DisplayBigNum+0x76>
      2c:	e2 c0       	rjmp	.+452    	; 0x1f2 <LCD_DisplayBigNum+0xa6>
      2e:	f9 c0       	rjmp	.+498    	; 0x222 <LCD_DisplayBigNum+0xd6>
      30:	10 c1       	rjmp	.+544    	; 0x252 <LCD_DisplayBigNum+0x106>
      32:	27 c1       	rjmp	.+590    	; 0x282 <LCD_DisplayBigNum+0x136>
      34:	3e c1       	rjmp	.+636    	; 0x2b2 <LCD_DisplayBigNum+0x166>
      36:	55 c1       	rjmp	.+682    	; 0x2e2 <LCD_DisplayBigNum+0x196>
      38:	6c c1       	rjmp	.+728    	; 0x312 <LCD_DisplayBigNum+0x1c6>
      3a:	1b cc       	rjmp	.-1994   	; 0xfffff872 <__eeprom_end+0xff7ef872>
      3c:	1f cc       	rjmp	.-1986   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      3e:	1e cc       	rjmp	.-1988   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      40:	1d cc       	rjmp	.-1990   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      42:	1c cc       	rjmp	.-1992   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      44:	1b cc       	rjmp	.-1994   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      46:	1a cc       	rjmp	.-1996   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      48:	19 cc       	rjmp	.-1998   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      4a:	18 cc       	rjmp	.-2000   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      4c:	17 cc       	rjmp	.-2002   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      4e:	16 cc       	rjmp	.-2004   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      50:	15 cc       	rjmp	.-2006   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      52:	14 cc       	rjmp	.-2008   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      54:	13 cc       	rjmp	.-2010   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      56:	12 cc       	rjmp	.-2012   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      58:	11 cc       	rjmp	.-2014   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      5a:	10 cc       	rjmp	.-2016   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      5c:	0f cc       	rjmp	.-2018   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      5e:	0e cc       	rjmp	.-2020   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      60:	0d cc       	rjmp	.-2022   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      62:	0c cc       	rjmp	.-2024   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      64:	0b cc       	rjmp	.-2026   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      66:	0a cc       	rjmp	.-2028   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      68:	09 cc       	rjmp	.-2030   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      6a:	08 cc       	rjmp	.-2032   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      6c:	07 cc       	rjmp	.-2034   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      6e:	06 cc       	rjmp	.-2036   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      70:	05 cc       	rjmp	.-2038   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      72:	04 cc       	rjmp	.-2040   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      74:	dd cb       	rjmp	.-2118   	; 0xfffff830 <__eeprom_end+0xff7ef830>
      76:	4b cb       	rjmp	.-2410   	; 0xfffff70e <__eeprom_end+0xff7ef70e>
      78:	6c cb       	rjmp	.-2344   	; 0xfffff752 <__eeprom_end+0xff7ef752>
      7a:	00 cc       	rjmp	.-2048   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      7c:	ec cb       	rjmp	.-2088   	; 0xfffff856 <__eeprom_end+0xff7ef856>
      7e:	fe cb       	rjmp	.-2052   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      80:	fd cb       	rjmp	.-2054   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      82:	fc cb       	rjmp	.-2056   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      84:	fb cb       	rjmp	.-2058   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      86:	fa cb       	rjmp	.-2060   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      88:	f9 cb       	rjmp	.-2062   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      8a:	f8 cb       	rjmp	.-2064   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      8c:	f7 cb       	rjmp	.-2066   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      8e:	f6 cb       	rjmp	.-2068   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      90:	f5 cb       	rjmp	.-2070   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      92:	f4 cb       	rjmp	.-2072   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      94:	f3 cb       	rjmp	.-2074   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      96:	e4 cb       	rjmp	.-2104   	; 0xfffff860 <__eeprom_end+0xff7ef860>
      98:	f1 cb       	rjmp	.-2078   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      9a:	89 cb       	rjmp	.-2286   	; 0xfffff7ae <__eeprom_end+0xff7ef7ae>
      9c:	ef cb       	rjmp	.-2082   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      9e:	ee cb       	rjmp	.-2084   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      a0:	a5 cb       	rjmp	.-2230   	; 0xfffff7ec <__eeprom_end+0xff7ef7ec>
      a2:	ec cb       	rjmp	.-2088   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      a4:	eb cb       	rjmp	.-2090   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      a6:	ea cb       	rjmp	.-2092   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      a8:	e9 cb       	rjmp	.-2094   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      aa:	e8 cb       	rjmp	.-2096   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ac:	e7 cb       	rjmp	.-2098   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ae:	e6 cb       	rjmp	.-2100   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      b0:	e5 cb       	rjmp	.-2102   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      b2:	e4 cb       	rjmp	.-2104   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      b4:	aa cb       	rjmp	.-2220   	; 0xfffff80a <__eeprom_end+0xff7ef80a>
      b6:	2b cb       	rjmp	.-2474   	; 0xfffff70e <__eeprom_end+0xff7ef70e>
      b8:	32 cb       	rjmp	.-2460   	; 0xfffff71e <__eeprom_end+0xff7ef71e>
      ba:	e0 cb       	rjmp	.-2112   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      bc:	cc cb       	rjmp	.-2152   	; 0xfffff856 <__eeprom_end+0xff7ef856>
      be:	de cb       	rjmp	.-2116   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      c0:	dd cb       	rjmp	.-2118   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      c2:	dc cb       	rjmp	.-2120   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      c4:	db cb       	rjmp	.-2122   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      c6:	da cb       	rjmp	.-2124   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      c8:	d9 cb       	rjmp	.-2126   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ca:	d8 cb       	rjmp	.-2128   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      cc:	d7 cb       	rjmp	.-2130   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      ce:	d6 cb       	rjmp	.-2132   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      d0:	d5 cb       	rjmp	.-2134   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      d2:	d4 cb       	rjmp	.-2136   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      d4:	d3 cb       	rjmp	.-2138   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      d6:	c4 cb       	rjmp	.-2168   	; 0xfffff860 <__eeprom_end+0xff7ef860>
      d8:	d1 cb       	rjmp	.-2142   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      da:	59 cb       	rjmp	.-2382   	; 0xfffff78e <__eeprom_end+0xff7ef78e>
      dc:	cf cb       	rjmp	.-2146   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      de:	ce cb       	rjmp	.-2148   	; 0xfffff87c <__eeprom_end+0xff7ef87c>
      e0:	75 cb       	rjmp	.-2326   	; 0xfffff7cc <__eeprom_end+0xff7ef7cc>

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf e5       	ldi	r28, 0x5F	; 95
      e8:	d4 e0       	ldi	r29, 0x04	; 4
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	12 e0       	ldi	r17, 0x02	; 2
      f0:	a0 e6       	ldi	r26, 0x60	; 96
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	e0 e1       	ldi	r30, 0x10	; 16
      f6:	fa e1       	ldi	r31, 0x1A	; 26
      f8:	02 c0       	rjmp	.+4      	; 0xfe <__do_copy_data+0x10>
      fa:	05 90       	lpm	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	a2 37       	cpi	r26, 0x72	; 114
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <__do_copy_data+0xc>

00000104 <__do_clear_bss>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a2 e7       	ldi	r26, 0x72	; 114
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	ab 37       	cpi	r26, 0x7B	; 123
     110:	b1 07       	cpc	r27, r17
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
     114:	63 d7       	rcall	.+3782   	; 0xfdc <main>
     116:	7a cc       	rjmp	.-1804   	; 0xfffffa0c <__eeprom_end+0xff7efa0c>

00000118 <__bad_interrupt>:
     118:	73 cf       	rjmp	.-282    	; 0x0 <__vectors>

0000011a <LCD_CreateCC>:

}

//Stores the segment pattern in LCD RAM
void LCD_CreateCC(uint8_t *pattern, uint8_t pos)
{
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	08 2f       	mov	r16, r24
     124:	19 2f       	mov	r17, r25
	uint8_t cnt =0;
	LCD_CmdWrite(0x40+(pos*8));
     126:	86 2f       	mov	r24, r22
     128:	88 0f       	add	r24, r24
     12a:	88 0f       	add	r24, r24
     12c:	88 0f       	add	r24, r24
     12e:	80 5c       	subi	r24, 0xC0	; 192
     130:	61 d8       	rcall	.-3902   	; 0xfffff1f4 <__eeprom_end+0xff7ef1f4>
     132:	c0 2f       	mov	r28, r16
     134:	d1 2f       	mov	r29, r17
     136:	18 e0       	ldi	r17, 0x08	; 8
		for(cnt=0; cnt<8; cnt++)
		{
			lcd_DataWrite(*(pattern+cnt));
     138:	89 91       	ld	r24, Y+
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 d9       	rcall	.-3580   	; 0xfffff342 <__eeprom_end+0xff7ef342>
     13e:	11 50       	subi	r17, 0x01	; 1
//Stores the segment pattern in LCD RAM
void LCD_CreateCC(uint8_t *pattern, uint8_t pos)
{
	uint8_t cnt =0;
	LCD_CmdWrite(0x40+(pos*8));
		for(cnt=0; cnt<8; cnt++)
     140:	d9 f7       	brne	.-10     	; 0x138 <LCD_CreateCC+0x1e>
		{
			lcd_DataWrite(*(pattern+cnt));
		}
}
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <LCD_DisplayBigNum>:

void LCD_DisplayBigNum(uint8_t num, uint8_t pos)
{
     14c:	cf 93       	push	r28
     14e:	c6 2f       	mov	r28, r22
	switch(num)
     150:	e8 2f       	mov	r30, r24
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	ea 30       	cpi	r30, 0x0A	; 10
     156:	f1 05       	cpc	r31, r1
     158:	08 f0       	brcs	.+2      	; 0x15c <LCD_DisplayBigNum+0x10>
     15a:	f2 c0       	rjmp	.+484    	; 0x340 <LCD_DisplayBigNum+0x1f4>
     15c:	ed 5e       	subi	r30, 0xED	; 237
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	09 94       	ijmp
	{	
		case 0:
		LCD_SetCursor(1,pos);
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	5d d8       	rcall	.-3910   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(0);
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	eb d8       	rcall	.-3626   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(1);
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	e8 d8       	rcall	.-3632   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(2);;
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	e5 d8       	rcall	.-3638   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	6c 2f       	mov	r22, r28
     17c:	51 d8       	rcall	.-3934   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(3);
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	df d8       	rcall	.-3650   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(4);
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	dc d8       	rcall	.-3656   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(5);
     18a:	85 e0       	ldi	r24, 0x05	; 5
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	d9 d8       	rcall	.-3662   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     190:	d7 c0       	rjmp	.+430    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 1:
		LCD_SetCursor(1,pos);
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	45 d8       	rcall	.-3958   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(1);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	d3 d8       	rcall	.-3674   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(2);
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	d0 d8       	rcall	.-3680   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(' ');
     1a2:	80 e2       	ldi	r24, 0x20	; 32
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	cd d8       	rcall	.-3686   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	6c 2f       	mov	r22, r28
     1ac:	39 d8       	rcall	.-3982   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(' ');
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	c7 d8       	rcall	.-3698   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(255);
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	c4 d8       	rcall	.-3704   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(' ');
     1ba:	80 e2       	ldi	r24, 0x20	; 32
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	c1 d8       	rcall	.-3710   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     1c0:	bf c0       	rjmp	.+382    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 2:
		LCD_SetCursor(1,pos);
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	2d d8       	rcall	.-4006   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(6);
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	bb d8       	rcall	.-3722   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(6);
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	b8 d8       	rcall	.-3728   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(2);;
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	b5 d8       	rcall	.-3734   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	6c 2f       	mov	r22, r28
     1dc:	21 d8       	rcall	.-4030   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(3);
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	af d8       	rcall	.-3746   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(7);
     1e4:	87 e0       	ldi	r24, 0x07	; 7
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	ac d8       	rcall	.-3752   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(7);
     1ea:	87 e0       	ldi	r24, 0x07	; 7
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	a9 d8       	rcall	.-3758   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     1f0:	a7 c0       	rjmp	.+334    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 3:
		LCD_SetCursor(1,pos);
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	15 d8       	rcall	.-4054   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(6);
     1f6:	86 e0       	ldi	r24, 0x06	; 6
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	a3 d8       	rcall	.-3770   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(6);
     1fc:	86 e0       	ldi	r24, 0x06	; 6
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	a0 d8       	rcall	.-3776   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(2);;
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	9d d8       	rcall	.-3782   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	6c 2f       	mov	r22, r28
     20c:	09 d8       	rcall	.-4078   	; 0xfffff220 <__eeprom_end+0xff7ef220>
		lcd_DataWrite(7);
     20e:	87 e0       	ldi	r24, 0x07	; 7
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	97 d8       	rcall	.-3794   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(7);
     214:	87 e0       	ldi	r24, 0x07	; 7
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	94 d8       	rcall	.-3800   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(5);
     21a:	85 e0       	ldi	r24, 0x05	; 5
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	91 d8       	rcall	.-3806   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     220:	8f c0       	rjmp	.+286    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 4:
		LCD_SetCursor(1,pos);
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	fd d7       	rcall	.+4090   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(3);
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	8b d8       	rcall	.-3818   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(4);
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	88 d8       	rcall	.-3824   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(2);;
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	85 d8       	rcall	.-3830   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	6c 2f       	mov	r22, r28
     23c:	f1 d7       	rcall	.+4066   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(' ');
     23e:	80 e2       	ldi	r24, 0x20	; 32
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	7f d8       	rcall	.-3842   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(' ');
     244:	80 e2       	ldi	r24, 0x20	; 32
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	7c d8       	rcall	.-3848   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(255);
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	79 d8       	rcall	.-3854   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     250:	77 c0       	rjmp	.+238    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 5:
		LCD_SetCursor(1,pos);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	e5 d7       	rcall	.+4042   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(255);
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	73 d8       	rcall	.-3866   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(6);
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	70 d8       	rcall	.-3872   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(6);;
     262:	86 e0       	ldi	r24, 0x06	; 6
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	6d d8       	rcall	.-3878   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	6c 2f       	mov	r22, r28
     26c:	d9 d7       	rcall	.+4018   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(7);
     26e:	87 e0       	ldi	r24, 0x07	; 7
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	67 d8       	rcall	.-3890   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(7);
     274:	87 e0       	ldi	r24, 0x07	; 7
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	64 d8       	rcall	.-3896   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(5);
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	61 d8       	rcall	.-3902   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     280:	5f c0       	rjmp	.+190    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 6:
		LCD_SetCursor(1,pos);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	cd d7       	rcall	.+3994   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(8);
     286:	88 e0       	ldi	r24, 0x08	; 8
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	5b d8       	rcall	.-3914   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(6);
     28c:	86 e0       	ldi	r24, 0x06	; 6
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	58 d8       	rcall	.-3920   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(6);;
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	55 d8       	rcall	.-3926   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	6c 2f       	mov	r22, r28
     29c:	c1 d7       	rcall	.+3970   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(3);
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	4f d8       	rcall	.-3938   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(7);
     2a4:	87 e0       	ldi	r24, 0x07	; 7
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	4c d8       	rcall	.-3944   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(5);
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	49 d8       	rcall	.-3950   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     2b0:	47 c0       	rjmp	.+142    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 7:
		LCD_SetCursor(1,pos);
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	b5 d7       	rcall	.+3946   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(1);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	43 d8       	rcall	.-3962   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(1);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	40 d8       	rcall	.-3968   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(2);;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	3d d8       	rcall	.-3974   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		LCD_SetCursor(2,pos);
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	6c 2f       	mov	r22, r28
     2cc:	a9 d7       	rcall	.+3922   	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(' ');
     2ce:	80 e2       	ldi	r24, 0x20	; 32
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	37 d8       	rcall	.-3986   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(8);
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	34 d8       	rcall	.-3992   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		lcd_DataWrite(' ');
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	31 d8       	rcall	.-3998   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		break;
     2e0:	2f c0       	rjmp	.+94     	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 8:
		  LCD_SetCursor(1,pos); 
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	9d d7       	rcall	.+3898   	; 0x1220 <LCD_SetCursor>
		  lcd_DataWrite(0);  
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	2b d8       	rcall	.-4010   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(6); 
     2ec:	86 e0       	ldi	r24, 0x06	; 6
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	28 d8       	rcall	.-4016   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(2);;
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	25 d8       	rcall	.-4022   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  LCD_SetCursor(2,pos);
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	6c 2f       	mov	r22, r28
     2fc:	91 d7       	rcall	.+3874   	; 0x1220 <LCD_SetCursor>
		  lcd_DataWrite(3);  
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	1f d8       	rcall	.-4034   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(7);  
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	1c d8       	rcall	.-4040   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(5);
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	19 d8       	rcall	.-4046   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  break; 	  
     310:	17 c0       	rjmp	.+46     	; 0x340 <LCD_DisplayBigNum+0x1f4>
		  case 9:
		  LCD_SetCursor(1,pos);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	85 d7       	rcall	.+3850   	; 0x1220 <LCD_SetCursor>
		  lcd_DataWrite(8);
     316:	88 e0       	ldi	r24, 0x08	; 8
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	13 d8       	rcall	.-4058   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(6);
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	10 d8       	rcall	.-4064   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(2);
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0d d8       	rcall	.-4070   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  LCD_SetCursor(2,pos);
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	6c 2f       	mov	r22, r28
     32c:	79 d7       	rcall	.+3826   	; 0x1220 <LCD_SetCursor>
		  lcd_DataWrite(' ');
     32e:	80 e2       	ldi	r24, 0x20	; 32
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	07 d8       	rcall	.-4082   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(' ');
     334:	80 e2       	ldi	r24, 0x20	; 32
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	04 d8       	rcall	.-4088   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  lcd_DataWrite(255);	
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	01 d8       	rcall	.-4094   	; 0xfffff342 <__eeprom_end+0xff7ef342>
		  break;
		default:break; 		
	}	
}
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <LCD_DisplayMenu>:
		LCD_Printf("    %2d/%2d/%2d",digit0,digit1,digit2);
	}
}

uint8_t LCD_DisplayMenu()
{ 
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
	int8_t keycount=0;
	LCD_Clear();
     358:	9d d7       	rcall	.+3898   	; 0x1294 <LCD_Clear>
	LCD_GoToLine(1);
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	8c d7       	rcall	.+3864   	; 0x1276 <LCD_GoToLine>
	LCD_DisplayString("    Settings    ");
     35e:	80 e6       	ldi	r24, 0x60	; 96
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	77 d9       	rcall	.-3346   	; 0xfffff652 <__eeprom_end+0xff7ef652>
	}
}

uint8_t LCD_DisplayMenu()
{ 
	int8_t keycount=0;
     364:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(100);
		}
	
		if((keycount>=menusize)||(keycount <= -menusize))
		{
			keycount=0;
     366:	d0 e0       	ldi	r29, 0x00	; 0
			//option shows the last option on the menu
			keycount += menusize;   
		}			
		
		LCD_GoToLine(2);
		LCD_DisplayString("                "); //clear second line
     368:	0f 2e       	mov	r0, r31
     36a:	f1 e7       	ldi	r31, 0x71	; 113
     36c:	cf 2e       	mov	r12, r31
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	df 2e       	mov	r13, r31
     372:	f0 2d       	mov	r31, r0
		//set cursor at the center of of line 2 depending on string size. 
		LCD_SetCursor(2,(14-strlen(settings[keycount]))/2); 
     374:	0f 2e       	mov	r0, r31
     376:	fe e0       	ldi	r31, 0x0E	; 14
     378:	ef 2e       	mov	r14, r31
     37a:	ff 24       	eor	r15, r15
     37c:	f0 2d       	mov	r31, r0
		LCD_Printf("<%s>", settings[keycount]);
     37e:	0f 2e       	mov	r0, r31
     380:	f2 e8       	ldi	r31, 0x82	; 130
     382:	af 2e       	mov	r10, r31
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	bf 2e       	mov	r11, r31
     388:	f0 2d       	mov	r31, r0
	LCD_Clear();
	LCD_GoToLine(1);
	LCD_DisplayString("    Settings    ");
	do
	{       
		if (util_IsBitCleared(Button, cancel))
     38a:	82 9b       	sbis	0x10, 2	; 16
     38c:	63 c0       	rjmp	.+198    	; 0x454 <LCD_DisplayMenu+0x110>
		{
		   return (-1); 
		}
		
		if(util_IsBitCleared(Button, up))
     38e:	85 99       	sbic	0x10, 5	; 16
     390:	0a c0       	rjmp	.+20     	; 0x3a6 <LCD_DisplayMenu+0x62>
		{
			keycount++;
     392:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	90 e7       	ldi	r25, 0x70	; 112
     398:	a2 e0       	ldi	r26, 0x02	; 2
     39a:	81 50       	subi	r24, 0x01	; 1
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	a0 40       	sbci	r26, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <LCD_DisplayMenu+0x56>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_DisplayMenu+0x60>
     3a4:	00 00       	nop
			_delay_ms(100);
		}
		
		if(util_IsBitCleared(Button, down))
     3a6:	84 99       	sbic	0x10, 4	; 16
     3a8:	0a c0       	rjmp	.+20     	; 0x3be <LCD_DisplayMenu+0x7a>
		{
			keycount--;
     3aa:	c1 50       	subi	r28, 0x01	; 1
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	90 e7       	ldi	r25, 0x70	; 112
     3b0:	a2 e0       	ldi	r26, 0x02	; 2
     3b2:	81 50       	subi	r24, 0x01	; 1
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	a0 40       	sbci	r26, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <LCD_DisplayMenu+0x6e>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_DisplayMenu+0x78>
     3bc:	00 00       	nop
			_delay_ms(100);
		}
	
		if((keycount>=menusize)||(keycount <= -menusize))
     3be:	8c 2f       	mov	r24, r28
     3c0:	8c 5f       	subi	r24, 0xFC	; 252
     3c2:	89 30       	cpi	r24, 0x09	; 9
     3c4:	20 f4       	brcc	.+8      	; 0x3ce <LCD_DisplayMenu+0x8a>
		{
			keycount=0;
		}
		
		if(keycount<0)
     3c6:	cc 23       	and	r28, r28
     3c8:	1c f4       	brge	.+6      	; 0x3d0 <LCD_DisplayMenu+0x8c>
		{
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			keycount += menusize;   
     3ca:	cb 5f       	subi	r28, 0xFB	; 251
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <LCD_DisplayMenu+0x8c>
			_delay_ms(100);
		}
	
		if((keycount>=menusize)||(keycount <= -menusize))
		{
			keycount=0;
     3ce:	cd 2f       	mov	r28, r29
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			keycount += menusize;   
		}			
		
		LCD_GoToLine(2);
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	51 d7       	rcall	.+3746   	; 0x1276 <LCD_GoToLine>
		LCD_DisplayString("                "); //clear second line
     3d4:	c6 01       	movw	r24, r12
     3d6:	3d d9       	rcall	.-3462   	; 0xfffff652 <__eeprom_end+0xff7ef652>
		//set cursor at the center of of line 2 depending on string size. 
		LCD_SetCursor(2,(14-strlen(settings[keycount]))/2); 
     3d8:	0c 2f       	mov	r16, r28
     3da:	11 27       	eor	r17, r17
     3dc:	07 fd       	sbrc	r16, 7
     3de:	10 95       	com	r17
     3e0:	02 95       	swap	r16
     3e2:	12 95       	swap	r17
     3e4:	10 7f       	andi	r17, 0xF0	; 240
     3e6:	10 27       	eor	r17, r16
     3e8:	00 7f       	andi	r16, 0xF0	; 240
     3ea:	10 27       	eor	r17, r16
     3ec:	04 52       	subi	r16, 0x24	; 36
     3ee:	1e 4f       	sbci	r17, 0xFE	; 254
     3f0:	a0 2f       	mov	r26, r16
     3f2:	b1 2f       	mov	r27, r17
     3f4:	fd 01       	movw	r30, r26
     3f6:	01 90       	ld	r0, Z+
     3f8:	00 20       	and	r0, r0
     3fa:	e9 f7       	brne	.-6      	; 0x3f6 <LCD_DisplayMenu+0xb2>
     3fc:	31 97       	sbiw	r30, 0x01	; 1
     3fe:	ea 1b       	sub	r30, r26
     400:	fb 0b       	sbc	r31, r27
     402:	b7 01       	movw	r22, r14
     404:	6e 1b       	sub	r22, r30
     406:	7f 0b       	sbc	r23, r31
     408:	76 95       	lsr	r23
     40a:	67 95       	ror	r22
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	08 d7       	rcall	.+3600   	; 0x1220 <LCD_SetCursor>
		LCD_Printf("<%s>", settings[keycount]);
     410:	00 d0       	rcall	.+0      	; 0x412 <LCD_DisplayMenu+0xce>
     412:	00 d0       	rcall	.+0      	; 0x414 <LCD_DisplayMenu+0xd0>
     414:	ad b7       	in	r26, 0x3d	; 61
     416:	be b7       	in	r27, 0x3e	; 62
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	bc 92       	st	X, r11
     41c:	ae 92       	st	-X, r10
     41e:	11 97       	sbiw	r26, 0x01	; 1
     420:	14 96       	adiw	r26, 0x04	; 4
     422:	1c 93       	st	X, r17
     424:	0e 93       	st	-X, r16
     426:	13 97       	sbiw	r26, 0x03	; 3
     428:	22 d9       	rcall	.-3516   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	90 e7       	ldi	r25, 0x70	; 112
     42e:	a2 e0       	ldi	r26, 0x02	; 2
     430:	81 50       	subi	r24, 0x01	; 1
     432:	90 40       	sbci	r25, 0x00	; 0
     434:	a0 40       	sbci	r26, 0x00	; 0
     436:	e1 f7       	brne	.-8      	; 0x430 <LCD_DisplayMenu+0xec>
     438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_DisplayMenu+0xf6>
     43a:	00 00       	nop
		_delay_ms(100);  //make menu visible or else will overwrite at fast speed
					 
      }while(util_IsBitSet(Button,select));
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	83 99       	sbic	0x10, 3	; 16
     446:	a1 cf       	rjmp	.-190    	; 0x38a <LCD_DisplayMenu+0x46>
	  
	 do 
	{
		if (util_IsBitCleared(Button, cancel))
     448:	82 9b       	sbis	0x10, 2	; 16
     44a:	06 c0       	rjmp	.+12     	; 0x458 <LCD_DisplayMenu+0x114>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     44c:	83 99       	sbic	0x10, 3	; 16
     44e:	fc cf       	rjmp	.-8      	; 0x448 <LCD_DisplayMenu+0x104>
	
	return (keycount); 
     450:	8c 2f       	mov	r24, r28
     452:	03 c0       	rjmp	.+6      	; 0x45a <LCD_DisplayMenu+0x116>
	LCD_DisplayString("    Settings    ");
	do
	{       
		if (util_IsBitCleared(Button, cancel))
		{
		   return (-1); 
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	01 c0       	rjmp	.+2      	; 0x45a <LCD_DisplayMenu+0x116>
	  
	 do 
	{
		if (util_IsBitCleared(Button, cancel))
		{
		   return (-1); ; 
     458:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}while(util_IsBitSet(Button, select));
	
	return (keycount); 
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	af 90       	pop	r10
     46e:	08 95       	ret

00000470 <checkAlarm>:
	_delay_ms(2000);
   
}

void checkAlarm()
{
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	00 d0       	rcall	.+0      	; 0x47a <checkAlarm+0xa>
     47a:	0f 92       	push	r0
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
	uint8_t b_hour, b_min, b_sec;

	RTC_GetTime(&b_hour,&b_min,&b_sec);
     480:	ce 01       	movw	r24, r28
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	be 01       	movw	r22, r28
     486:	6e 5f       	subi	r22, 0xFE	; 254
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	ae 01       	movw	r20, r28
     48c:	4d 5f       	subi	r20, 0xFD	; 253
     48e:	5f 4f       	sbci	r21, 0xFF	; 255
     490:	45 da       	rcall	.-2934   	; 0xfffff91c <__eeprom_end+0xff7ef91c>
	
	if ( (alarm_hour == b_hour) & ( alarm_min == b_min) & ( alarm_sec == b_sec) ) 
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	90 91 73 02 	lds	r25, 0x0273
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	98 13       	cpse	r25, r24
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	30 91 75 02 	lds	r19, 0x0275
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	39 13       	cpse	r19, r25
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	28 23       	and	r18, r24
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	50 91 72 02 	lds	r21, 0x0272
     4b6:	4b 81       	ldd	r20, Y+3	; 0x03
     4b8:	54 17       	cp	r21, r20
     4ba:	11 f0       	breq	.+4      	; 0x4c0 <checkAlarm+0x50>
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	82 23       	and	r24, r18
     4c2:	93 23       	and	r25, r19
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	89 f0       	breq	.+34     	; 0x4ea <checkAlarm+0x7a>
	{
		LCD_Clear();
     4c8:	e5 d6       	rcall	.+3530   	; 0x1294 <LCD_Clear>
		do
		{		
			LCD_GoToLine(1);
			LCD_Printf("Press Cancel to Stop Alarm");
     4ca:	07 e8       	ldi	r16, 0x87	; 135
     4cc:	10 e0       	ldi	r17, 0x00	; 0
	if ( (alarm_hour == b_hour) & ( alarm_min == b_min) & ( alarm_sec == b_sec) ) 
	{
		LCD_Clear();
		do
		{		
			LCD_GoToLine(1);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	d2 d6       	rcall	.+3492   	; 0x1276 <LCD_GoToLine>
			LCD_Printf("Press Cancel to Stop Alarm");
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <checkAlarm+0x64>
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	12 83       	std	Z+2, r17	; 0x02
     4da:	01 83       	std	Z+1, r16	; 0x01
     4dc:	c8 d8       	rcall	.-3696   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
		}while(util_IsBitSet(Button, cancel));
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	82 99       	sbic	0x10, 2	; 16
     4e4:	f4 cf       	rjmp	.-24     	; 0x4ce <checkAlarm+0x5e>
		
		util_BitClear(buzzer_port,buzzer_pin);
     4e6:	c3 98       	cbi	0x18, 3	; 24
		LCD_Clear();
     4e8:	d5 d6       	rcall	.+3498   	; 0x1294 <LCD_Clear>
	}				
}
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <setDisplayStyle>:


void setDisplayStyle()
{	
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
	LCD_Clear();
     502:	c8 d6       	rcall	.+3472   	; 0x1294 <LCD_Clear>
	LCD_GoToLine(1);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	b7 d6       	rcall	.+3438   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("  Display-Style ");
     508:	00 d0       	rcall	.+0      	; 0x50a <setDisplayStyle+0x10>
     50a:	82 ea       	ldi	r24, 0xA2	; 162
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	ad b7       	in	r26, 0x3d	; 61
     510:	be b7       	in	r27, 0x3e	; 62
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	9c 93       	st	X, r25
     516:	8e 93       	st	-X, r24
     518:	11 97       	sbiw	r26, 0x01	; 1
     51a:	a9 d8       	rcall	.-3758   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
		{
			LCD_Printf("  <Time + Date>  ");
		}
		else
		{
			LCD_Printf("   <Only Time>  ");
     520:	c5 ec       	ldi	r28, 0xC5	; 197
     522:	d0 e0       	ldi	r29, 0x00	; 0
			Display_Style += 2;   
		}	

		if(Display_Style == 1)
		{
			LCD_Printf("  <Time + Date>  ");
     524:	03 eb       	ldi	r16, 0xB3	; 179
     526:	10 e0       	ldi	r17, 0x00	; 0
	LCD_GoToLine(1);
	LCD_Printf("  Display-Style ");
	
	do 
	{
		LCD_GoToLine(2);
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	a5 d6       	rcall	.+3402   	; 0x1276 <LCD_GoToLine>
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	90 e7       	ldi	r25, 0x70	; 112
     530:	a2 e0       	ldi	r26, 0x02	; 2
     532:	81 50       	subi	r24, 0x01	; 1
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	a0 40       	sbci	r26, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <setDisplayStyle+0x38>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <setDisplayStyle+0x42>
     53c:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     53e:	82 9b       	sbis	0x10, 2	; 16
     540:	59 c0       	rjmp	.+178    	; 0x5f4 <setDisplayStyle+0xfa>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     542:	85 99       	sbic	0x10, 5	; 16
     544:	0e c0       	rjmp	.+28     	; 0x562 <setDisplayStyle+0x68>
		{
			Display_Style++;
     546:	80 91 74 02 	lds	r24, 0x0274
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 93 74 02 	sts	0x0274, r24
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	91 ee       	ldi	r25, 0xE1	; 225
     554:	a4 e0       	ldi	r26, 0x04	; 4
     556:	81 50       	subi	r24, 0x01	; 1
     558:	90 40       	sbci	r25, 0x00	; 0
     55a:	a0 40       	sbci	r26, 0x00	; 0
     55c:	e1 f7       	brne	.-8      	; 0x556 <setDisplayStyle+0x5c>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <setDisplayStyle+0x66>
     560:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     562:	84 99       	sbic	0x10, 4	; 16
     564:	0e c0       	rjmp	.+28     	; 0x582 <setDisplayStyle+0x88>
		{
			Display_Style--;
     566:	80 91 74 02 	lds	r24, 0x0274
     56a:	81 50       	subi	r24, 0x01	; 1
     56c:	80 93 74 02 	sts	0x0274, r24
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	91 ee       	ldi	r25, 0xE1	; 225
     574:	a4 e0       	ldi	r26, 0x04	; 4
     576:	81 50       	subi	r24, 0x01	; 1
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	a0 40       	sbci	r26, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <setDisplayStyle+0x7c>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <setDisplayStyle+0x86>
     580:	00 00       	nop
			_delay_ms(200);
		}
			
		if((Display_Style >= 2)||(Display_Style <= -2))
     582:	80 91 74 02 	lds	r24, 0x0274
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	18 f0       	brcs	.+6      	; 0x590 <setDisplayStyle+0x96>
		{
			Display_Style = 0;
     58a:	10 92 74 02 	sts	0x0274, r1
     58e:	0d c0       	rjmp	.+26     	; 0x5aa <setDisplayStyle+0xb0>
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			Display_Style += 2;   
		}	

		if(Display_Style == 1)
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	59 f4       	brne	.+22     	; 0x5aa <setDisplayStyle+0xb0>
		{
			LCD_Printf("  <Time + Date>  ");
     594:	00 d0       	rcall	.+0      	; 0x596 <setDisplayStyle+0x9c>
     596:	ad b7       	in	r26, 0x3d	; 61
     598:	be b7       	in	r27, 0x3e	; 62
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	1c 93       	st	X, r17
     59e:	0e 93       	st	-X, r16
     5a0:	11 97       	sbiw	r26, 0x01	; 1
     5a2:	65 d8       	rcall	.-3894   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <setDisplayStyle+0xc0>
		}
		else
		{
			LCD_Printf("   <Only Time>  ");
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <setDisplayStyle+0xb2>
     5ac:	ed b7       	in	r30, 0x3d	; 61
     5ae:	fe b7       	in	r31, 0x3e	; 62
     5b0:	d2 83       	std	Z+2, r29	; 0x02
     5b2:	c1 83       	std	Z+1, r28	; 0x01
     5b4:	5c d8       	rcall	.-3912   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
		}		
	} while (util_IsBitSet(Button, select));
     5ba:	83 99       	sbic	0x10, 3	; 16
     5bc:	b5 cf       	rjmp	.-150    	; 0x528 <setDisplayStyle+0x2e>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     5be:	82 9b       	sbis	0x10, 2	; 16
     5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <setDisplayStyle+0xfa>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));	
     5c2:	83 99       	sbic	0x10, 3	; 16
     5c4:	fc cf       	rjmp	.-8      	; 0x5be <setDisplayStyle+0xc4>
	
	LCD_GoToLine(1);
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	56 d6       	rcall	.+3244   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("  Display-Style \n    Updated  ");
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <setDisplayStyle+0xd2>
     5cc:	86 ed       	ldi	r24, 0xD6	; 214
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	ad b7       	in	r26, 0x3d	; 61
     5d2:	be b7       	in	r27, 0x3e	; 62
     5d4:	12 96       	adiw	r26, 0x02	; 2
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
     5da:	11 97       	sbiw	r26, 0x01	; 1
     5dc:	48 d8       	rcall	.-3952   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	93 ed       	ldi	r25, 0xD3	; 211
     5e2:	a0 e3       	ldi	r26, 0x30	; 48
     5e4:	81 50       	subi	r24, 0x01	; 1
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	a0 40       	sbci	r26, 0x00	; 0
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <setDisplayStyle+0xea>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <setDisplayStyle+0xf4>
     5ee:	00 00       	nop
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
	_delay_ms(2000);
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	08 95       	ret

000005fe <setTimeFormat>:


void setTimeFormat()
{
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
	LCD_Clear();
     606:	46 d6       	rcall	.+3212   	; 0x1294 <LCD_Clear>
	LCD_GoToLine(1);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	35 d6       	rcall	.+3178   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("  Time Format   ");
     60c:	00 d0       	rcall	.+0      	; 0x60e <setTimeFormat+0x10>
     60e:	85 ef       	ldi	r24, 0xF5	; 245
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	ad b7       	in	r26, 0x3d	; 61
     614:	be b7       	in	r27, 0x3e	; 62
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	9c 93       	st	X, r25
     61a:	8e 93       	st	-X, r24
     61c:	11 97       	sbiw	r26, 0x01	; 1
     61e:	27 d8       	rcall	.-4018   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
		{
			LCD_Printf("   <12 Hours>   ");
		}
		else
		{
			LCD_Printf("   <24 Hours>   ");
     624:	c7 e1       	ldi	r28, 0x17	; 23
     626:	d1 e0       	ldi	r29, 0x01	; 1
			Time_Format += 2;   
		}		

		if( Time_Format == 1 )
		{
			LCD_Printf("   <12 Hours>   ");
     628:	06 e0       	ldi	r16, 0x06	; 6
     62a:	11 e0       	ldi	r17, 0x01	; 1
	LCD_Clear();
	LCD_GoToLine(1);
	LCD_Printf("  Time Format   ");
	do 
	{
		LCD_GoToLine(2);
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	23 d6       	rcall	.+3142   	; 0x1276 <LCD_GoToLine>
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	90 e7       	ldi	r25, 0x70	; 112
     634:	a2 e0       	ldi	r26, 0x02	; 2
     636:	81 50       	subi	r24, 0x01	; 1
     638:	90 40       	sbci	r25, 0x00	; 0
     63a:	a0 40       	sbci	r26, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <setTimeFormat+0x38>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <setTimeFormat+0x42>
     640:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     642:	82 9b       	sbis	0x10, 2	; 16
     644:	59 c0       	rjmp	.+178    	; 0x6f8 <setTimeFormat+0xfa>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     646:	85 99       	sbic	0x10, 5	; 16
     648:	0e c0       	rjmp	.+28     	; 0x666 <setTimeFormat+0x68>
		{
			Time_Format++;		
     64a:	80 91 db 01 	lds	r24, 0x01DB
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	80 93 db 01 	sts	0x01DB, r24
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	91 ee       	ldi	r25, 0xE1	; 225
     658:	a4 e0       	ldi	r26, 0x04	; 4
     65a:	81 50       	subi	r24, 0x01	; 1
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	a0 40       	sbci	r26, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <setTimeFormat+0x5c>
     662:	00 c0       	rjmp	.+0      	; 0x664 <setTimeFormat+0x66>
     664:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     666:	84 99       	sbic	0x10, 4	; 16
     668:	0e c0       	rjmp	.+28     	; 0x686 <setTimeFormat+0x88>
		{
			Time_Format--;
     66a:	80 91 db 01 	lds	r24, 0x01DB
     66e:	81 50       	subi	r24, 0x01	; 1
     670:	80 93 db 01 	sts	0x01DB, r24
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	91 ee       	ldi	r25, 0xE1	; 225
     678:	a4 e0       	ldi	r26, 0x04	; 4
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	a0 40       	sbci	r26, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <setTimeFormat+0x7c>
     682:	00 c0       	rjmp	.+0      	; 0x684 <setTimeFormat+0x86>
     684:	00 00       	nop
			_delay_ms(200);
		}
			
		if((Time_Format >= 2)||(Time_Format <= -2))
     686:	80 91 db 01 	lds	r24, 0x01DB
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	18 f0       	brcs	.+6      	; 0x694 <setTimeFormat+0x96>
		{
			Time_Format = 0;
     68e:	10 92 db 01 	sts	0x01DB, r1
     692:	0d c0       	rjmp	.+26     	; 0x6ae <setTimeFormat+0xb0>
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			Time_Format += 2;   
		}		

		if( Time_Format == 1 )
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	59 f4       	brne	.+22     	; 0x6ae <setTimeFormat+0xb0>
		{
			LCD_Printf("   <12 Hours>   ");
     698:	00 d0       	rcall	.+0      	; 0x69a <setTimeFormat+0x9c>
     69a:	ad b7       	in	r26, 0x3d	; 61
     69c:	be b7       	in	r27, 0x3e	; 62
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	1c 93       	st	X, r17
     6a2:	0e 93       	st	-X, r16
     6a4:	11 97       	sbiw	r26, 0x01	; 1
     6a6:	e3 d7       	rcall	.+4038   	; 0x166e <LCD_Printf>
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <setTimeFormat+0xc0>
		}
		else
		{
			LCD_Printf("   <24 Hours>   ");
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <setTimeFormat+0xb2>
     6b0:	ed b7       	in	r30, 0x3d	; 61
     6b2:	fe b7       	in	r31, 0x3e	; 62
     6b4:	d2 83       	std	Z+2, r29	; 0x02
     6b6:	c1 83       	std	Z+1, r28	; 0x01
     6b8:	da d7       	rcall	.+4020   	; 0x166e <LCD_Printf>
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
		}		
	} while (util_IsBitSet(Button, select));
     6be:	83 99       	sbic	0x10, 3	; 16
     6c0:	b5 cf       	rjmp	.-150    	; 0x62c <setTimeFormat+0x2e>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     6c2:	82 9b       	sbis	0x10, 2	; 16
     6c4:	19 c0       	rjmp	.+50     	; 0x6f8 <setTimeFormat+0xfa>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     6c6:	83 99       	sbic	0x10, 3	; 16
     6c8:	fc cf       	rjmp	.-8      	; 0x6c2 <setTimeFormat+0xc4>
	
	LCD_GoToLine(1);
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	d4 d5       	rcall	.+2984   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("  Time Format   \n    Updated   ");
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <setTimeFormat+0xd2>
     6d0:	88 e2       	ldi	r24, 0x28	; 40
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	ad b7       	in	r26, 0x3d	; 61
     6d6:	be b7       	in	r27, 0x3e	; 62
     6d8:	12 96       	adiw	r26, 0x02	; 2
     6da:	9c 93       	st	X, r25
     6dc:	8e 93       	st	-X, r24
     6de:	11 97       	sbiw	r26, 0x01	; 1
     6e0:	c6 d7       	rcall	.+3980   	; 0x166e <LCD_Printf>
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	93 ed       	ldi	r25, 0xD3	; 211
     6e6:	a0 e3       	ldi	r26, 0x30	; 48
     6e8:	81 50       	subi	r24, 0x01	; 1
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	a0 40       	sbci	r26, 0x00	; 0
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <setTimeFormat+0xea>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <setTimeFormat+0xf4>
     6f2:	00 00       	nop
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
	_delay_ms(2000);
	
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	08 95       	ret

00000702 <dec2bcd>:

// Convert Decimal to Binary Coded Decimal (BCD)
uint8_t dec2bcd(uint8_t num)
{
	return ((num/10 * 16) + (num % 10));
     702:	6a e0       	ldi	r22, 0x0A	; 10
     704:	55 d9       	rcall	.-3414   	; 0xfffff9b0 <__eeprom_end+0xff7ef9b0>
     706:	82 95       	swap	r24
     708:	80 7f       	andi	r24, 0xF0	; 240
}
     70a:	89 0f       	add	r24, r25
     70c:	08 95       	ret

0000070e <bcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
uint8_t bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
     70e:	98 2f       	mov	r25, r24
     710:	92 95       	swap	r25
     712:	9f 70       	andi	r25, 0x0F	; 15
     714:	99 0f       	add	r25, r25
     716:	29 2f       	mov	r18, r25
     718:	22 0f       	add	r18, r18
     71a:	22 0f       	add	r18, r18
     71c:	92 0f       	add	r25, r18
     71e:	8f 70       	andi	r24, 0x0F	; 15
     720:	89 0f       	add	r24, r25
     722:	08 95       	ret

00000724 <setAlarm>:
   _delay_ms(2000);
	  
}

void setAlarm()
{
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
 
	uint8_t d_hour, d_min, d_sec;
	
	d_hour = bcd2dec(alarm_hour);
     730:	80 91 73 02 	lds	r24, 0x0273
     734:	ec df       	rcall	.-40     	; 0x70e <bcd2dec>
     736:	c8 2f       	mov	r28, r24
	d_min = bcd2dec(alarm_min);
     738:	80 91 75 02 	lds	r24, 0x0275
     73c:	e8 df       	rcall	.-48     	; 0x70e <bcd2dec>
     73e:	d8 2f       	mov	r29, r24
	d_sec = bcd2dec(alarm_sec);
     740:	80 91 72 02 	lds	r24, 0x0272
     744:	e4 df       	rcall	.-56     	; 0x70e <bcd2dec>
     746:	f8 2e       	mov	r15, r24
	LCD_Clear();
     748:	a5 d5       	rcall	.+2890   	; 0x1294 <LCD_Clear>
	LCD_GoToLine(1);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	94 d5       	rcall	.+2856   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("Hour  Min  Sec");
     74e:	00 d0       	rcall	.+0      	; 0x750 <setAlarm+0x2c>
     750:	88 e4       	ldi	r24, 0x48	; 72
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	ad b7       	in	r26, 0x3d	; 61
     756:	be b7       	in	r27, 0x3e	; 62
     758:	12 96       	adiw	r26, 0x02	; 2
     75a:	9c 93       	st	X, r25
     75c:	8e 93       	st	-X, r24
     75e:	11 97       	sbiw	r26, 0x01	; 1
     760:	86 d7       	rcall	.+3852   	; 0x166e <LCD_Printf>
	LCD_GoToLine(2);
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	86 d5       	rcall	.+2828   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);
     76a:	ed b7       	in	r30, 0x3d	; 61
     76c:	fe b7       	in	r31, 0x3e	; 62
     76e:	38 97       	sbiw	r30, 0x08	; 8
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	fe bf       	out	0x3e, r31	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	ed bf       	out	0x3d, r30	; 61
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	87 e5       	ldi	r24, 0x57	; 87
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	ad b7       	in	r26, 0x3d	; 61
     782:	be b7       	in	r27, 0x3e	; 62
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	11 97       	sbiw	r26, 0x01	; 1
     78c:	c2 83       	std	Z+2, r28	; 0x02
     78e:	13 82       	std	Z+3, r1	; 0x03
     790:	d4 83       	std	Z+4, r29	; 0x04
     792:	15 82       	std	Z+5, r1	; 0x05
     794:	f6 82       	std	Z+6, r15	; 0x06
     796:	17 82       	std	Z+7, r1	; 0x07
     798:	6a d7       	rcall	.+3796   	; 0x166e <LCD_Printf>
     79a:	ed b7       	in	r30, 0x3d	; 61
     79c:	fe b7       	in	r31, 0x3e	; 62
     79e:	38 96       	adiw	r30, 0x08	; 8
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	fe bf       	out	0x3e, r31	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	ed bf       	out	0x3d, r30	; 61
			_delay_ms(200);
		}
		
		if(d_hour>=24)
		{
			d_hour=0;
     7aa:	ee 24       	eor	r14, r14
		}
		
		LCD_Printf("%2d",d_hour);
     7ac:	0a e6       	ldi	r16, 0x6A	; 106
     7ae:	11 e0       	ldi	r17, 0x01	; 1
	LCD_GoToLine(2);
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);

	do 
	{	
		LCD_SetCursor(2,1);
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	35 d5       	rcall	.+2666   	; 0x1220 <LCD_SetCursor>
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	90 e7       	ldi	r25, 0x70	; 112
     7ba:	a2 e0       	ldi	r26, 0x02	; 2
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	90 40       	sbci	r25, 0x00	; 0
     7c0:	a0 40       	sbci	r26, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <setAlarm+0x98>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <setAlarm+0xa2>
     7c6:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     7c8:	82 9b       	sbis	0x10, 2	; 16
     7ca:	d5 c0       	rjmp	.+426    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     7cc:	85 99       	sbic	0x10, 5	; 16
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <setAlarm+0xc0>
		{
			d_hour++;
     7d0:	cf 5f       	subi	r28, 0xFF	; 255
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	91 ee       	ldi	r25, 0xE1	; 225
     7d6:	a4 e0       	ldi	r26, 0x04	; 4
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	90 40       	sbci	r25, 0x00	; 0
     7dc:	a0 40       	sbci	r26, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <setAlarm+0xb4>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <setAlarm+0xbe>
     7e2:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     7e4:	84 99       	sbic	0x10, 4	; 16
     7e6:	0a c0       	rjmp	.+20     	; 0x7fc <setAlarm+0xd8>
		{
			d_hour--;
     7e8:	c1 50       	subi	r28, 0x01	; 1
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	91 ee       	ldi	r25, 0xE1	; 225
     7ee:	a4 e0       	ldi	r26, 0x04	; 4
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	a0 40       	sbci	r26, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <setAlarm+0xcc>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <setAlarm+0xd6>
     7fa:	00 00       	nop
			_delay_ms(200);
		}
		
		if(d_hour>=24)
     7fc:	c8 31       	cpi	r28, 0x18	; 24
     7fe:	08 f0       	brcs	.+2      	; 0x802 <setAlarm+0xde>
		{
			d_hour=0;
     800:	ce 2d       	mov	r28, r14
		}
		
		LCD_Printf("%2d",d_hour);
     802:	00 d0       	rcall	.+0      	; 0x804 <setAlarm+0xe0>
     804:	00 d0       	rcall	.+0      	; 0x806 <setAlarm+0xe2>
     806:	ed b7       	in	r30, 0x3d	; 61
     808:	fe b7       	in	r31, 0x3e	; 62
     80a:	31 96       	adiw	r30, 0x01	; 1
     80c:	ad b7       	in	r26, 0x3d	; 61
     80e:	be b7       	in	r27, 0x3e	; 62
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	1c 93       	st	X, r17
     814:	0e 93       	st	-X, r16
     816:	11 97       	sbiw	r26, 0x01	; 1
     818:	c2 83       	std	Z+2, r28	; 0x02
     81a:	13 82       	std	Z+3, r1	; 0x03
     81c:	28 d7       	rcall	.+3664   	; 0x166e <LCD_Printf>
			
	} while (util_IsBitSet(Button, select));
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	83 99       	sbic	0x10, 3	; 16
     828:	c3 cf       	rjmp	.-122    	; 0x7b0 <setAlarm+0x8c>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     82a:	82 9b       	sbis	0x10, 2	; 16
     82c:	a4 c0       	rjmp	.+328    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     82e:	83 99       	sbic	0x10, 3	; 16
     830:	fc cf       	rjmp	.-8      	; 0x82a <setAlarm+0x106>
			_delay_ms(200);
		}
			
		if(d_min>=60)
		{
			d_min=0;
     832:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_min);
     834:	0a e6       	ldi	r16, 0x6A	; 106
     836:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
	
	//update min  	
	do 
	{
		LCD_SetCursor(2,7);
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	f1 d4       	rcall	.+2530   	; 0x1220 <LCD_SetCursor>
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	90 e7       	ldi	r25, 0x70	; 112
     842:	a2 e0       	ldi	r26, 0x02	; 2
     844:	81 50       	subi	r24, 0x01	; 1
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	a0 40       	sbci	r26, 0x00	; 0
     84a:	e1 f7       	brne	.-8      	; 0x844 <setAlarm+0x120>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <setAlarm+0x12a>
     84e:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     850:	82 9b       	sbis	0x10, 2	; 16
     852:	91 c0       	rjmp	.+290    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     854:	85 99       	sbic	0x10, 5	; 16
     856:	0a c0       	rjmp	.+20     	; 0x86c <setAlarm+0x148>
		{
			d_min++;
     858:	df 5f       	subi	r29, 0xFF	; 255
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	91 ee       	ldi	r25, 0xE1	; 225
     85e:	a4 e0       	ldi	r26, 0x04	; 4
     860:	81 50       	subi	r24, 0x01	; 1
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	a0 40       	sbci	r26, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <setAlarm+0x13c>
     868:	00 c0       	rjmp	.+0      	; 0x86a <setAlarm+0x146>
     86a:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     86c:	84 99       	sbic	0x10, 4	; 16
     86e:	0a c0       	rjmp	.+20     	; 0x884 <setAlarm+0x160>
		{
			d_min--;
     870:	d1 50       	subi	r29, 0x01	; 1
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	91 ee       	ldi	r25, 0xE1	; 225
     876:	a4 e0       	ldi	r26, 0x04	; 4
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	a0 40       	sbci	r26, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <setAlarm+0x154>
     880:	00 c0       	rjmp	.+0      	; 0x882 <setAlarm+0x15e>
     882:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_min>=60)
     884:	dc 33       	cpi	r29, 0x3C	; 60
     886:	08 f0       	brcs	.+2      	; 0x88a <setAlarm+0x166>
		{
			d_min=0;
     888:	de 2d       	mov	r29, r14
		}
			
		LCD_Printf("%2d",d_min);
     88a:	00 d0       	rcall	.+0      	; 0x88c <setAlarm+0x168>
     88c:	00 d0       	rcall	.+0      	; 0x88e <setAlarm+0x16a>
     88e:	ed b7       	in	r30, 0x3d	; 61
     890:	fe b7       	in	r31, 0x3e	; 62
     892:	31 96       	adiw	r30, 0x01	; 1
     894:	ad b7       	in	r26, 0x3d	; 61
     896:	be b7       	in	r27, 0x3e	; 62
     898:	12 96       	adiw	r26, 0x02	; 2
     89a:	1c 93       	st	X, r17
     89c:	0e 93       	st	-X, r16
     89e:	11 97       	sbiw	r26, 0x01	; 1
     8a0:	d2 83       	std	Z+2, r29	; 0x02
     8a2:	13 82       	std	Z+3, r1	; 0x03
     8a4:	e4 d6       	rcall	.+3528   	; 0x166e <LCD_Printf>
						
	} while (util_IsBitSet(Button, select));
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	83 99       	sbic	0x10, 3	; 16
     8b0:	c3 cf       	rjmp	.-122    	; 0x838 <setAlarm+0x114>
		
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     8b2:	82 9b       	sbis	0x10, 2	; 16
     8b4:	60 c0       	rjmp	.+192    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     8b6:	83 99       	sbic	0x10, 3	; 16
     8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <setAlarm+0x18e>
			_delay_ms(200);
		}
			
		if(d_sec>=60)
		{
			d_sec=0;
     8ba:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_sec);
     8bc:	0a e6       	ldi	r16, 0x6A	; 106
     8be:	11 e0       	ldi	r17, 0x01	; 1
		}
	}while(util_IsBitSet(Button, select));
					
	do 
	{
		LCD_SetCursor(2,12);
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	6c e0       	ldi	r22, 0x0C	; 12
     8c4:	ad d4       	rcall	.+2394   	; 0x1220 <LCD_SetCursor>
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	90 e7       	ldi	r25, 0x70	; 112
     8ca:	a2 e0       	ldi	r26, 0x02	; 2
     8cc:	81 50       	subi	r24, 0x01	; 1
     8ce:	90 40       	sbci	r25, 0x00	; 0
     8d0:	a0 40       	sbci	r26, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <setAlarm+0x1a8>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <setAlarm+0x1b2>
     8d6:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     8d8:	82 9b       	sbis	0x10, 2	; 16
     8da:	4d c0       	rjmp	.+154    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     8dc:	85 99       	sbic	0x10, 5	; 16
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <setAlarm+0x1d0>
		{
			d_sec++;
     8e0:	f3 94       	inc	r15
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	91 ee       	ldi	r25, 0xE1	; 225
     8e6:	a4 e0       	ldi	r26, 0x04	; 4
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	a0 40       	sbci	r26, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <setAlarm+0x1c4>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <setAlarm+0x1ce>
     8f2:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     8f4:	84 99       	sbic	0x10, 4	; 16
     8f6:	0a c0       	rjmp	.+20     	; 0x90c <setAlarm+0x1e8>
		{
			d_sec--;
     8f8:	fa 94       	dec	r15
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	91 ee       	ldi	r25, 0xE1	; 225
     8fe:	a4 e0       	ldi	r26, 0x04	; 4
     900:	81 50       	subi	r24, 0x01	; 1
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	a0 40       	sbci	r26, 0x00	; 0
     906:	e1 f7       	brne	.-8      	; 0x900 <setAlarm+0x1dc>
     908:	00 c0       	rjmp	.+0      	; 0x90a <setAlarm+0x1e6>
     90a:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_sec>=60)
     90c:	9b e3       	ldi	r25, 0x3B	; 59
     90e:	9f 15       	cp	r25, r15
     910:	08 f4       	brcc	.+2      	; 0x914 <setAlarm+0x1f0>
		{
			d_sec=0;
     912:	fe 2c       	mov	r15, r14
		}
			
		LCD_Printf("%2d",d_sec);
     914:	00 d0       	rcall	.+0      	; 0x916 <setAlarm+0x1f2>
     916:	00 d0       	rcall	.+0      	; 0x918 <setAlarm+0x1f4>
     918:	ed b7       	in	r30, 0x3d	; 61
     91a:	fe b7       	in	r31, 0x3e	; 62
     91c:	31 96       	adiw	r30, 0x01	; 1
     91e:	ad b7       	in	r26, 0x3d	; 61
     920:	be b7       	in	r27, 0x3e	; 62
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	1c 93       	st	X, r17
     926:	0e 93       	st	-X, r16
     928:	11 97       	sbiw	r26, 0x01	; 1
     92a:	f2 82       	std	Z+2, r15	; 0x02
     92c:	13 82       	std	Z+3, r1	; 0x03
     92e:	9f d6       	rcall	.+3390   	; 0x166e <LCD_Printf>
						
	} while (util_IsBitSet(Button, select));
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	83 99       	sbic	0x10, 3	; 16
     93a:	c2 cf       	rjmp	.-124    	; 0x8c0 <setAlarm+0x19c>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     93c:	82 9b       	sbis	0x10, 2	; 16
     93e:	1b c0       	rjmp	.+54     	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));	
     940:	83 99       	sbic	0x10, 3	; 16
     942:	fc cf       	rjmp	.-8      	; 0x93c <setAlarm+0x218>
		
	alarm_hour = dec2bcd(d_hour);
     944:	8c 2f       	mov	r24, r28
     946:	dd de       	rcall	.-582    	; 0x702 <dec2bcd>
     948:	80 93 73 02 	sts	0x0273, r24
	alarm_min = dec2bcd(d_min);
     94c:	8d 2f       	mov	r24, r29
     94e:	d9 de       	rcall	.-590    	; 0x702 <dec2bcd>
     950:	80 93 75 02 	sts	0x0275, r24
	alarm_sec = dec2bcd(d_sec);
     954:	8f 2d       	mov	r24, r15
     956:	d5 de       	rcall	.-598    	; 0x702 <dec2bcd>
     958:	80 93 72 02 	sts	0x0272, r24
	LCD_Clear();
     95c:	9b d4       	rcall	.+2358   	; 0x1294 <LCD_Clear>
	LCD_DisplayString("Alarm Set");
     95e:	8e e6       	ldi	r24, 0x6E	; 110
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	77 d6       	rcall	.+3310   	; 0x1652 <LCD_DisplayString>
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	93 ed       	ldi	r25, 0xD3	; 211
     968:	a0 e3       	ldi	r26, 0x30	; 48
     96a:	81 50       	subi	r24, 0x01	; 1
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	a0 40       	sbci	r26, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <setAlarm+0x246>
     972:	00 c0       	rjmp	.+0      	; 0x974 <setAlarm+0x250>
     974:	00 00       	nop
	_delay_ms(2000);
   
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	08 95       	ret

00000984 <setDate>:
	_delay_ms(2000);
	  
}

void setDate(uint8_t day, uint8_t month, uint8_t year)
{  
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	d6 2f       	mov	r29, r22
     992:	04 2f       	mov	r16, r20
	uint8_t d_day, d_month, d_year;
	
	d_day = bcd2dec(day);
     994:	bc de       	rcall	.-648    	; 0x70e <bcd2dec>
     996:	c8 2f       	mov	r28, r24
	d_month = bcd2dec(month);
     998:	8d 2f       	mov	r24, r29
     99a:	b9 de       	rcall	.-654    	; 0x70e <bcd2dec>
     99c:	d8 2f       	mov	r29, r24
	d_year= bcd2dec(year);
     99e:	80 2f       	mov	r24, r16
     9a0:	b6 de       	rcall	.-660    	; 0x70e <bcd2dec>
     9a2:	f8 2e       	mov	r15, r24
	LCD_Clear();
     9a4:	77 d4       	rcall	.+2286   	; 0x1294 <LCD_Clear>
	LCD_GoToLine(1);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	66 d4       	rcall	.+2252   	; 0x1276 <LCD_GoToLine>
	LCD_Printf(" DD    MM   YY");
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <setDate+0x28>
     9ac:	88 e7       	ldi	r24, 0x78	; 120
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	ad b7       	in	r26, 0x3d	; 61
     9b2:	be b7       	in	r27, 0x3e	; 62
     9b4:	12 96       	adiw	r26, 0x02	; 2
     9b6:	9c 93       	st	X, r25
     9b8:	8e 93       	st	-X, r24
     9ba:	11 97       	sbiw	r26, 0x01	; 1
     9bc:	58 d6       	rcall	.+3248   	; 0x166e <LCD_Printf>
	LCD_GoToLine(2);
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	58 d4       	rcall	.+2224   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_day, d_month, d_year);
     9c6:	ed b7       	in	r30, 0x3d	; 61
     9c8:	fe b7       	in	r31, 0x3e	; 62
     9ca:	38 97       	sbiw	r30, 0x08	; 8
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	fe bf       	out	0x3e, r31	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	ed bf       	out	0x3d, r30	; 61
     9d6:	31 96       	adiw	r30, 0x01	; 1
     9d8:	87 e5       	ldi	r24, 0x57	; 87
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	ad b7       	in	r26, 0x3d	; 61
     9de:	be b7       	in	r27, 0x3e	; 62
     9e0:	12 96       	adiw	r26, 0x02	; 2
     9e2:	9c 93       	st	X, r25
     9e4:	8e 93       	st	-X, r24
     9e6:	11 97       	sbiw	r26, 0x01	; 1
     9e8:	c2 83       	std	Z+2, r28	; 0x02
     9ea:	13 82       	std	Z+3, r1	; 0x03
     9ec:	d4 83       	std	Z+4, r29	; 0x04
     9ee:	15 82       	std	Z+5, r1	; 0x05
     9f0:	f6 82       	std	Z+6, r15	; 0x06
     9f2:	17 82       	std	Z+7, r1	; 0x07
     9f4:	3c d6       	rcall	.+3192   	; 0x166e <LCD_Printf>
     9f6:	ed b7       	in	r30, 0x3d	; 61
     9f8:	fe b7       	in	r31, 0x3e	; 62
     9fa:	38 96       	adiw	r30, 0x08	; 8
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	fe bf       	out	0x3e, r31	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	ed bf       	out	0x3d, r30	; 61
			_delay_ms(200);
		}
		
		if(d_day>31)
		{
			d_day=0;
     a06:	ee 24       	eor	r14, r14
		}
		
		LCD_Printf("%2d",d_day);
     a08:	0a e6       	ldi	r16, 0x6A	; 106
     a0a:	11 e0       	ldi	r17, 0x01	; 1
	LCD_GoToLine(2);
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_day, d_month, d_year);

	do 
	{	
		LCD_SetCursor(2,1);
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	07 d4       	rcall	.+2062   	; 0x1220 <LCD_SetCursor>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	90 e7       	ldi	r25, 0x70	; 112
     a16:	a2 e0       	ldi	r26, 0x02	; 2
     a18:	81 50       	subi	r24, 0x01	; 1
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	a0 40       	sbci	r26, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <setDate+0x94>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <setDate+0x9e>
     a22:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     a24:	82 9b       	sbis	0x10, 2	; 16
     a26:	d5 c0       	rjmp	.+426    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     a28:	85 99       	sbic	0x10, 5	; 16
     a2a:	0a c0       	rjmp	.+20     	; 0xa40 <setDate+0xbc>
		{
			d_day++;
     a2c:	cf 5f       	subi	r28, 0xFF	; 255
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	91 ee       	ldi	r25, 0xE1	; 225
     a32:	a4 e0       	ldi	r26, 0x04	; 4
     a34:	81 50       	subi	r24, 0x01	; 1
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	a0 40       	sbci	r26, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <setDate+0xb0>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <setDate+0xba>
     a3e:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     a40:	84 99       	sbic	0x10, 4	; 16
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <setDate+0xd4>
		{
			d_day--;
     a44:	c1 50       	subi	r28, 0x01	; 1
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	91 ee       	ldi	r25, 0xE1	; 225
     a4a:	a4 e0       	ldi	r26, 0x04	; 4
     a4c:	81 50       	subi	r24, 0x01	; 1
     a4e:	90 40       	sbci	r25, 0x00	; 0
     a50:	a0 40       	sbci	r26, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <setDate+0xc8>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <setDate+0xd2>
     a56:	00 00       	nop
			_delay_ms(200);
		}
		
		if(d_day>31)
     a58:	c0 32       	cpi	r28, 0x20	; 32
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <setDate+0xda>
		{
			d_day=0;
     a5c:	ce 2d       	mov	r28, r14
		}
		
		LCD_Printf("%2d",d_day);
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <setDate+0xdc>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <setDate+0xde>
     a62:	ed b7       	in	r30, 0x3d	; 61
     a64:	fe b7       	in	r31, 0x3e	; 62
     a66:	31 96       	adiw	r30, 0x01	; 1
     a68:	ad b7       	in	r26, 0x3d	; 61
     a6a:	be b7       	in	r27, 0x3e	; 62
     a6c:	12 96       	adiw	r26, 0x02	; 2
     a6e:	1c 93       	st	X, r17
     a70:	0e 93       	st	-X, r16
     a72:	11 97       	sbiw	r26, 0x01	; 1
     a74:	c2 83       	std	Z+2, r28	; 0x02
     a76:	13 82       	std	Z+3, r1	; 0x03
     a78:	fa d5       	rcall	.+3060   	; 0x166e <LCD_Printf>
			
	} while (util_IsBitSet(Button, select));
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	83 99       	sbic	0x10, 3	; 16
     a84:	c3 cf       	rjmp	.-122    	; 0xa0c <setDate+0x88>
		  
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     a86:	82 9b       	sbis	0x10, 2	; 16
     a88:	a4 c0       	rjmp	.+328    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     a8a:	83 99       	sbic	0x10, 3	; 16
     a8c:	fc cf       	rjmp	.-8      	; 0xa86 <setDate+0x102>
			_delay_ms(200);
		}
			
		if(d_month>12)
		{
			d_month=0;
     a8e:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_month);			
     a90:	0a e6       	ldi	r16, 0x6A	; 106
     a92:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
	  
	//update month
	do 
	{
		LCD_SetCursor(2,7);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	67 e0       	ldi	r22, 0x07	; 7
     a98:	c3 d3       	rcall	.+1926   	; 0x1220 <LCD_SetCursor>
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	90 e7       	ldi	r25, 0x70	; 112
     a9e:	a2 e0       	ldi	r26, 0x02	; 2
     aa0:	81 50       	subi	r24, 0x01	; 1
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	a0 40       	sbci	r26, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <setDate+0x11c>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <setDate+0x126>
     aaa:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     aac:	82 9b       	sbis	0x10, 2	; 16
     aae:	91 c0       	rjmp	.+290    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     ab0:	85 99       	sbic	0x10, 5	; 16
     ab2:	0a c0       	rjmp	.+20     	; 0xac8 <setDate+0x144>
		{
			d_month++;
     ab4:	df 5f       	subi	r29, 0xFF	; 255
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	91 ee       	ldi	r25, 0xE1	; 225
     aba:	a4 e0       	ldi	r26, 0x04	; 4
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	90 40       	sbci	r25, 0x00	; 0
     ac0:	a0 40       	sbci	r26, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <setDate+0x138>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <setDate+0x142>
     ac6:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     ac8:	84 99       	sbic	0x10, 4	; 16
     aca:	0a c0       	rjmp	.+20     	; 0xae0 <setDate+0x15c>
		{
			d_month--;
     acc:	d1 50       	subi	r29, 0x01	; 1
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	91 ee       	ldi	r25, 0xE1	; 225
     ad2:	a4 e0       	ldi	r26, 0x04	; 4
     ad4:	81 50       	subi	r24, 0x01	; 1
     ad6:	90 40       	sbci	r25, 0x00	; 0
     ad8:	a0 40       	sbci	r26, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <setDate+0x150>
     adc:	00 c0       	rjmp	.+0      	; 0xade <setDate+0x15a>
     ade:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_month>12)
     ae0:	dd 30       	cpi	r29, 0x0D	; 13
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <setDate+0x162>
		{
			d_month=0;
     ae4:	de 2d       	mov	r29, r14
		}
			
		LCD_Printf("%2d",d_month);			
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <setDate+0x164>
     ae8:	00 d0       	rcall	.+0      	; 0xaea <setDate+0x166>
     aea:	ed b7       	in	r30, 0x3d	; 61
     aec:	fe b7       	in	r31, 0x3e	; 62
     aee:	31 96       	adiw	r30, 0x01	; 1
     af0:	ad b7       	in	r26, 0x3d	; 61
     af2:	be b7       	in	r27, 0x3e	; 62
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	1c 93       	st	X, r17
     af8:	0e 93       	st	-X, r16
     afa:	11 97       	sbiw	r26, 0x01	; 1
     afc:	d2 83       	std	Z+2, r29	; 0x02
     afe:	13 82       	std	Z+3, r1	; 0x03
     b00:	b6 d5       	rcall	.+2924   	; 0x166e <LCD_Printf>
	} while (util_IsBitSet(Button, select));
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	83 99       	sbic	0x10, 3	; 16
     b0c:	c3 cf       	rjmp	.-122    	; 0xa94 <setDate+0x110>
		
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     b0e:	82 9b       	sbis	0x10, 2	; 16
     b10:	60 c0       	rjmp	.+192    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     b12:	83 99       	sbic	0x10, 3	; 16
     b14:	fc cf       	rjmp	.-8      	; 0xb0e <setDate+0x18a>
			_delay_ms(200);
		}
			
		if(d_year>=99)
		{
			d_year=0;
     b16:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_year);
     b18:	0a e6       	ldi	r16, 0x6A	; 106
     b1a:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
		
	//set year	
	do 
	{
		LCD_SetCursor(2,12);
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	6c e0       	ldi	r22, 0x0C	; 12
     b20:	7f d3       	rcall	.+1790   	; 0x1220 <LCD_SetCursor>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	90 e7       	ldi	r25, 0x70	; 112
     b26:	a2 e0       	ldi	r26, 0x02	; 2
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	90 40       	sbci	r25, 0x00	; 0
     b2c:	a0 40       	sbci	r26, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <setDate+0x1a4>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <setDate+0x1ae>
     b32:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     b34:	82 9b       	sbis	0x10, 2	; 16
     b36:	4d c0       	rjmp	.+154    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     b38:	85 99       	sbic	0x10, 5	; 16
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <setDate+0x1cc>
		{
			d_year++;
     b3c:	f3 94       	inc	r15
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	91 ee       	ldi	r25, 0xE1	; 225
     b42:	a4 e0       	ldi	r26, 0x04	; 4
     b44:	81 50       	subi	r24, 0x01	; 1
     b46:	90 40       	sbci	r25, 0x00	; 0
     b48:	a0 40       	sbci	r26, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <setDate+0x1c0>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <setDate+0x1ca>
     b4e:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     b50:	84 99       	sbic	0x10, 4	; 16
     b52:	0a c0       	rjmp	.+20     	; 0xb68 <setDate+0x1e4>
		{
			d_year--;
     b54:	fa 94       	dec	r15
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	91 ee       	ldi	r25, 0xE1	; 225
     b5a:	a4 e0       	ldi	r26, 0x04	; 4
     b5c:	81 50       	subi	r24, 0x01	; 1
     b5e:	90 40       	sbci	r25, 0x00	; 0
     b60:	a0 40       	sbci	r26, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <setDate+0x1d8>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <setDate+0x1e2>
     b66:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_year>=99)
     b68:	92 e6       	ldi	r25, 0x62	; 98
     b6a:	9f 15       	cp	r25, r15
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <setDate+0x1ec>
		{
			d_year=0;
     b6e:	fe 2c       	mov	r15, r14
		}
			
		LCD_Printf("%2d",d_year);
     b70:	00 d0       	rcall	.+0      	; 0xb72 <setDate+0x1ee>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <setDate+0x1f0>
     b74:	ed b7       	in	r30, 0x3d	; 61
     b76:	fe b7       	in	r31, 0x3e	; 62
     b78:	31 96       	adiw	r30, 0x01	; 1
     b7a:	ad b7       	in	r26, 0x3d	; 61
     b7c:	be b7       	in	r27, 0x3e	; 62
     b7e:	12 96       	adiw	r26, 0x02	; 2
     b80:	1c 93       	st	X, r17
     b82:	0e 93       	st	-X, r16
     b84:	11 97       	sbiw	r26, 0x01	; 1
     b86:	f2 82       	std	Z+2, r15	; 0x02
     b88:	13 82       	std	Z+3, r1	; 0x03
     b8a:	71 d5       	rcall	.+2786   	; 0x166e <LCD_Printf>
					
	} while (util_IsBitSet(Button, select));
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	83 99       	sbic	0x10, 3	; 16
     b96:	c2 cf       	rjmp	.-124    	; 0xb1c <setDate+0x198>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     b98:	82 9b       	sbis	0x10, 2	; 16
     b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     b9c:	83 99       	sbic	0x10, 3	; 16
     b9e:	fc cf       	rjmp	.-8      	; 0xb98 <setDate+0x214>
	
   day = dec2bcd(d_day);
     ba0:	8c 2f       	mov	r24, r28
     ba2:	af dd       	rcall	.-1186   	; 0x702 <dec2bcd>
     ba4:	08 2f       	mov	r16, r24
   month = dec2bcd(d_month);
     ba6:	8d 2f       	mov	r24, r29
     ba8:	ac dd       	rcall	.-1192   	; 0x702 <dec2bcd>
     baa:	c8 2f       	mov	r28, r24
   year = dec2bcd(d_year);
     bac:	8f 2d       	mov	r24, r15
     bae:	a9 dd       	rcall	.-1198   	; 0x702 <dec2bcd>
     bb0:	48 2f       	mov	r20, r24
   RTC_SetDate(day, month, year); 
     bb2:	80 2f       	mov	r24, r16
     bb4:	6c 2f       	mov	r22, r28
     bb6:	9c d6       	rcall	.+3384   	; 0x18f0 <RTC_SetDate>
   LCD_Clear();
     bb8:	6d d3       	rcall	.+1754   	; 0x1294 <LCD_Clear>
   LCD_DisplayString("Date Updated");
     bba:	87 e8       	ldi	r24, 0x87	; 135
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	49 d5       	rcall	.+2706   	; 0x1652 <LCD_DisplayString>
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	93 ed       	ldi	r25, 0xD3	; 211
     bc4:	a0 e3       	ldi	r26, 0x30	; 48
     bc6:	81 50       	subi	r24, 0x01	; 1
     bc8:	90 40       	sbci	r25, 0x00	; 0
     bca:	a0 40       	sbci	r26, 0x00	; 0
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <setDate+0x242>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <setDate+0x24c>
     bd0:	00 00       	nop
   _delay_ms(2000);
	  
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <setTime>:
	
	return (keycount); 
}

void setTime(uint8_t hour, uint8_t min, uint8_t sec)
{  
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	d6 2f       	mov	r29, r22
     bee:	04 2f       	mov	r16, r20
	uint8_t d_hour, d_min, d_sec;
	
	d_hour = bcd2dec(hour);
     bf0:	8e dd       	rcall	.-1252   	; 0x70e <bcd2dec>
     bf2:	c8 2f       	mov	r28, r24
	d_min = bcd2dec(min);
     bf4:	8d 2f       	mov	r24, r29
     bf6:	8b dd       	rcall	.-1258   	; 0x70e <bcd2dec>
     bf8:	d8 2f       	mov	r29, r24
	d_sec = bcd2dec(sec);
     bfa:	80 2f       	mov	r24, r16
     bfc:	88 dd       	rcall	.-1264   	; 0x70e <bcd2dec>
     bfe:	f8 2e       	mov	r15, r24
	LCD_Clear();
     c00:	49 d3       	rcall	.+1682   	; 0x1294 <LCD_Clear>
	LCD_GoToLine(1);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	38 d3       	rcall	.+1648   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("Hour  Min  Sec");
     c06:	00 d0       	rcall	.+0      	; 0xc08 <setTime+0x28>
     c08:	88 e4       	ldi	r24, 0x48	; 72
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	ad b7       	in	r26, 0x3d	; 61
     c0e:	be b7       	in	r27, 0x3e	; 62
     c10:	12 96       	adiw	r26, 0x02	; 2
     c12:	9c 93       	st	X, r25
     c14:	8e 93       	st	-X, r24
     c16:	11 97       	sbiw	r26, 0x01	; 1
     c18:	2a d5       	rcall	.+2644   	; 0x166e <LCD_Printf>
	LCD_GoToLine(2);
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	2a d3       	rcall	.+1620   	; 0x1276 <LCD_GoToLine>
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);
     c22:	ed b7       	in	r30, 0x3d	; 61
     c24:	fe b7       	in	r31, 0x3e	; 62
     c26:	38 97       	sbiw	r30, 0x08	; 8
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	fe bf       	out	0x3e, r31	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	ed bf       	out	0x3d, r30	; 61
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e5       	ldi	r24, 0x57	; 87
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	ad b7       	in	r26, 0x3d	; 61
     c3a:	be b7       	in	r27, 0x3e	; 62
     c3c:	12 96       	adiw	r26, 0x02	; 2
     c3e:	9c 93       	st	X, r25
     c40:	8e 93       	st	-X, r24
     c42:	11 97       	sbiw	r26, 0x01	; 1
     c44:	c2 83       	std	Z+2, r28	; 0x02
     c46:	13 82       	std	Z+3, r1	; 0x03
     c48:	d4 83       	std	Z+4, r29	; 0x04
     c4a:	15 82       	std	Z+5, r1	; 0x05
     c4c:	f6 82       	std	Z+6, r15	; 0x06
     c4e:	17 82       	std	Z+7, r1	; 0x07
     c50:	0e d5       	rcall	.+2588   	; 0x166e <LCD_Printf>
     c52:	ed b7       	in	r30, 0x3d	; 61
     c54:	fe b7       	in	r31, 0x3e	; 62
     c56:	38 96       	adiw	r30, 0x08	; 8
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	fe bf       	out	0x3e, r31	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	ed bf       	out	0x3d, r30	; 61
			}
		}
		
		if(d_hour>=24)
		{
			d_hour=0;
     c62:	ee 24       	eor	r14, r14
		}
		
		LCD_Printf("%2d",d_hour);
     c64:	0a e6       	ldi	r16, 0x6A	; 106
     c66:	11 e0       	ldi	r17, 0x01	; 1
	LCD_GoToLine(2);
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);

	do 
	{	
		LCD_SetCursor(2,1);
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	d9 d2       	rcall	.+1458   	; 0x1220 <LCD_SetCursor>
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	90 e7       	ldi	r25, 0x70	; 112
     c72:	a2 e0       	ldi	r26, 0x02	; 2
     c74:	81 50       	subi	r24, 0x01	; 1
     c76:	90 40       	sbci	r25, 0x00	; 0
     c78:	a0 40       	sbci	r26, 0x00	; 0
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <setTime+0x94>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <setTime+0x9e>
     c7e:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     c80:	82 9b       	sbis	0x10, 2	; 16
     c82:	d5 c0       	rjmp	.+426    	; 0xe2e <setTime+0x24e>
			{
				return (-1);  
			}
		}

		if(util_IsBitCleared(Button, up))
     c84:	85 99       	sbic	0x10, 5	; 16
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <setTime+0xbc>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, up))
			{
				d_hour++;
     c88:	cf 5f       	subi	r28, 0xFF	; 255
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	91 ee       	ldi	r25, 0xE1	; 225
     c8e:	a4 e0       	ldi	r26, 0x04	; 4
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	90 40       	sbci	r25, 0x00	; 0
     c94:	a0 40       	sbci	r26, 0x00	; 0
     c96:	e1 f7       	brne	.-8      	; 0xc90 <setTime+0xb0>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <setTime+0xba>
     c9a:	00 00       	nop
				_delay_ms(200);
			}
		}
		if(util_IsBitCleared(Button, down))
     c9c:	84 99       	sbic	0x10, 4	; 16
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <setTime+0xd4>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, down))
			{
				d_hour--;
     ca0:	c1 50       	subi	r28, 0x01	; 1
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	91 ee       	ldi	r25, 0xE1	; 225
     ca6:	a4 e0       	ldi	r26, 0x04	; 4
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	a0 40       	sbci	r26, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <setTime+0xc8>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <setTime+0xd2>
     cb2:	00 00       	nop
				_delay_ms(200);
			}
		}
		
		if(d_hour>=24)
     cb4:	c8 31       	cpi	r28, 0x18	; 24
     cb6:	08 f0       	brcs	.+2      	; 0xcba <setTime+0xda>
		{
			d_hour=0;
     cb8:	ce 2d       	mov	r28, r14
		}
		
		LCD_Printf("%2d",d_hour);
     cba:	00 d0       	rcall	.+0      	; 0xcbc <setTime+0xdc>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <setTime+0xde>
     cbe:	ed b7       	in	r30, 0x3d	; 61
     cc0:	fe b7       	in	r31, 0x3e	; 62
     cc2:	31 96       	adiw	r30, 0x01	; 1
     cc4:	ad b7       	in	r26, 0x3d	; 61
     cc6:	be b7       	in	r27, 0x3e	; 62
     cc8:	12 96       	adiw	r26, 0x02	; 2
     cca:	1c 93       	st	X, r17
     ccc:	0e 93       	st	-X, r16
     cce:	11 97       	sbiw	r26, 0x01	; 1
     cd0:	c2 83       	std	Z+2, r28	; 0x02
     cd2:	13 82       	std	Z+3, r1	; 0x03
     cd4:	cc d4       	rcall	.+2456   	; 0x166e <LCD_Printf>
			
	} while (util_IsBitSet(Button, select));
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	83 99       	sbic	0x10, 3	; 16
     ce0:	c3 cf       	rjmp	.-122    	; 0xc68 <setTime+0x88>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     ce2:	82 9b       	sbis	0x10, 2	; 16
     ce4:	a4 c0       	rjmp	.+328    	; 0xe2e <setTime+0x24e>
//			if (util_IsBitSet(Button, cancel))
			{
				return (-1); 
			}
		}
	}while(util_IsBitSet(Button, select));
     ce6:	83 99       	sbic	0x10, 3	; 16
     ce8:	fc cf       	rjmp	.-8      	; 0xce2 <setTime+0x102>
			}
		}
			
		if(d_min>=60)
		{
			d_min=0;
     cea:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_min);
     cec:	0a e6       	ldi	r16, 0x6A	; 106
     cee:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
		  
		//update min  
	do 
	{
		LCD_SetCursor(2,7);
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	67 e0       	ldi	r22, 0x07	; 7
     cf4:	95 d2       	rcall	.+1322   	; 0x1220 <LCD_SetCursor>
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	90 e7       	ldi	r25, 0x70	; 112
     cfa:	a2 e0       	ldi	r26, 0x02	; 2
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	90 40       	sbci	r25, 0x00	; 0
     d00:	a0 40       	sbci	r26, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <setTime+0x11c>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <setTime+0x126>
     d06:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     d08:	82 9b       	sbis	0x10, 2	; 16
     d0a:	91 c0       	rjmp	.+290    	; 0xe2e <setTime+0x24e>
			{
				return (-1);  
			}
		}

		if(util_IsBitCleared(Button, up))
     d0c:	85 99       	sbic	0x10, 5	; 16
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <setTime+0x144>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, up))
			{
				d_min++;
     d10:	df 5f       	subi	r29, 0xFF	; 255
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	91 ee       	ldi	r25, 0xE1	; 225
     d16:	a4 e0       	ldi	r26, 0x04	; 4
     d18:	81 50       	subi	r24, 0x01	; 1
     d1a:	90 40       	sbci	r25, 0x00	; 0
     d1c:	a0 40       	sbci	r26, 0x00	; 0
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <setTime+0x138>
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <setTime+0x142>
     d22:	00 00       	nop
				_delay_ms(200);
			}
		}
		if(util_IsBitCleared(Button, down))
     d24:	84 99       	sbic	0x10, 4	; 16
     d26:	0a c0       	rjmp	.+20     	; 0xd3c <setTime+0x15c>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, down))
			{
				d_min--;
     d28:	d1 50       	subi	r29, 0x01	; 1
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	91 ee       	ldi	r25, 0xE1	; 225
     d2e:	a4 e0       	ldi	r26, 0x04	; 4
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	a0 40       	sbci	r26, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <setTime+0x150>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <setTime+0x15a>
     d3a:	00 00       	nop
				_delay_ms(200);
			}
		}
			
		if(d_min>=60)
     d3c:	dc 33       	cpi	r29, 0x3C	; 60
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <setTime+0x162>
		{
			d_min=0;
     d40:	de 2d       	mov	r29, r14
		}
			
		LCD_Printf("%2d",d_min);
     d42:	00 d0       	rcall	.+0      	; 0xd44 <setTime+0x164>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <setTime+0x166>
     d46:	ed b7       	in	r30, 0x3d	; 61
     d48:	fe b7       	in	r31, 0x3e	; 62
     d4a:	31 96       	adiw	r30, 0x01	; 1
     d4c:	ad b7       	in	r26, 0x3d	; 61
     d4e:	be b7       	in	r27, 0x3e	; 62
     d50:	12 96       	adiw	r26, 0x02	; 2
     d52:	1c 93       	st	X, r17
     d54:	0e 93       	st	-X, r16
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	d2 83       	std	Z+2, r29	; 0x02
     d5a:	13 82       	std	Z+3, r1	; 0x03
     d5c:	88 d4       	rcall	.+2320   	; 0x166e <LCD_Printf>
			
			
	} while (util_IsBitSet(Button, select));
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	83 99       	sbic	0x10, 3	; 16
     d68:	c3 cf       	rjmp	.-122    	; 0xcf0 <setTime+0x110>
		
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     d6a:	82 9b       	sbis	0x10, 2	; 16
     d6c:	60 c0       	rjmp	.+192    	; 0xe2e <setTime+0x24e>
//			if (util_IsBitSet(Button, cancel))
			{
				return (-1); 
			}
		}
	}while(util_IsBitSet(Button, select));
     d6e:	83 99       	sbic	0x10, 3	; 16
     d70:	fc cf       	rjmp	.-8      	; 0xd6a <setTime+0x18a>
			_delay_ms(200);
		}
			
		if(d_sec>=60)
		{
			d_sec=0;
     d72:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_sec);
     d74:	0a e6       	ldi	r16, 0x6A	; 106
     d76:	11 e0       	ldi	r17, 0x01	; 1
		}
	}while(util_IsBitSet(Button, select));
				
	do 
	{
		LCD_SetCursor(2,12);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	6c e0       	ldi	r22, 0x0C	; 12
     d7c:	51 d2       	rcall	.+1186   	; 0x1220 <LCD_SetCursor>
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	90 e7       	ldi	r25, 0x70	; 112
     d82:	a2 e0       	ldi	r26, 0x02	; 2
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	90 40       	sbci	r25, 0x00	; 0
     d88:	a0 40       	sbci	r26, 0x00	; 0
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <setTime+0x1a4>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <setTime+0x1ae>
     d8e:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     d90:	82 9b       	sbis	0x10, 2	; 16
     d92:	4d c0       	rjmp	.+154    	; 0xe2e <setTime+0x24e>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     d94:	85 99       	sbic	0x10, 5	; 16
     d96:	0a c0       	rjmp	.+20     	; 0xdac <setTime+0x1cc>
		{
			d_sec++;
     d98:	f3 94       	inc	r15
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	91 ee       	ldi	r25, 0xE1	; 225
     d9e:	a4 e0       	ldi	r26, 0x04	; 4
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	90 40       	sbci	r25, 0x00	; 0
     da4:	a0 40       	sbci	r26, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <setTime+0x1c0>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <setTime+0x1ca>
     daa:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     dac:	84 99       	sbic	0x10, 4	; 16
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <setTime+0x1e4>
		{
			d_sec--;
     db0:	fa 94       	dec	r15
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	91 ee       	ldi	r25, 0xE1	; 225
     db6:	a4 e0       	ldi	r26, 0x04	; 4
     db8:	81 50       	subi	r24, 0x01	; 1
     dba:	90 40       	sbci	r25, 0x00	; 0
     dbc:	a0 40       	sbci	r26, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <setTime+0x1d8>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <setTime+0x1e2>
     dc2:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_sec>=60)
     dc4:	9b e3       	ldi	r25, 0x3B	; 59
     dc6:	9f 15       	cp	r25, r15
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <setTime+0x1ec>
		{
			d_sec=0;
     dca:	fe 2c       	mov	r15, r14
		}
			
		LCD_Printf("%2d",d_sec);
     dcc:	00 d0       	rcall	.+0      	; 0xdce <setTime+0x1ee>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <setTime+0x1f0>
     dd0:	ed b7       	in	r30, 0x3d	; 61
     dd2:	fe b7       	in	r31, 0x3e	; 62
     dd4:	31 96       	adiw	r30, 0x01	; 1
     dd6:	ad b7       	in	r26, 0x3d	; 61
     dd8:	be b7       	in	r27, 0x3e	; 62
     dda:	12 96       	adiw	r26, 0x02	; 2
     ddc:	1c 93       	st	X, r17
     dde:	0e 93       	st	-X, r16
     de0:	11 97       	sbiw	r26, 0x01	; 1
     de2:	f2 82       	std	Z+2, r15	; 0x02
     de4:	13 82       	std	Z+3, r1	; 0x03
     de6:	43 d4       	rcall	.+2182   	; 0x166e <LCD_Printf>
						
	} while (util_IsBitSet(Button, select));
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	83 99       	sbic	0x10, 3	; 16
     df2:	c2 cf       	rjmp	.-124    	; 0xd78 <setTime+0x198>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     df4:	82 9b       	sbis	0x10, 2	; 16
     df6:	1b c0       	rjmp	.+54     	; 0xe2e <setTime+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     df8:	83 99       	sbic	0x10, 3	; 16
     dfa:	fc cf       	rjmp	.-8      	; 0xdf4 <setTime+0x214>
		
	hour = dec2bcd(d_hour);
     dfc:	8c 2f       	mov	r24, r28
     dfe:	81 dc       	rcall	.-1790   	; 0x702 <dec2bcd>
     e00:	08 2f       	mov	r16, r24
	min = dec2bcd(d_min);
     e02:	8d 2f       	mov	r24, r29
     e04:	7e dc       	rcall	.-1796   	; 0x702 <dec2bcd>
     e06:	c8 2f       	mov	r28, r24
	sec = dec2bcd(d_sec);
     e08:	8f 2d       	mov	r24, r15
     e0a:	7b dc       	rcall	.-1802   	; 0x702 <dec2bcd>
     e0c:	48 2f       	mov	r20, r24
	RTC_SetTime(hour, min, sec); 
     e0e:	80 2f       	mov	r24, r16
     e10:	6c 2f       	mov	r22, r28
     e12:	58 d5       	rcall	.+2736   	; 0x18c4 <RTC_SetTime>
	LCD_Clear();
     e14:	3f d2       	rcall	.+1150   	; 0x1294 <LCD_Clear>
	LCD_DisplayString("Time Updated");
     e16:	84 e9       	ldi	r24, 0x94	; 148
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	1b d4       	rcall	.+2102   	; 0x1652 <LCD_DisplayString>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	93 ed       	ldi	r25, 0xD3	; 211
     e20:	a0 e3       	ldi	r26, 0x30	; 48
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	a0 40       	sbci	r26, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <setTime+0x242>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <setTime+0x24c>
     e2c:	00 00       	nop
	_delay_ms(2000);
	  
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	08 95       	ret

00000e3c <LCD_DisplayDate>:
		LCD_Printf("%2x",sec);	
	}	
}

void LCD_DisplayDate(uint8_t day, uint8_t month, uint8_t year)
{
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	d8 2f       	mov	r29, r24
     e44:	c6 2f       	mov	r28, r22
     e46:	14 2f       	mov	r17, r20
	unsigned char digit0=0, digit1=0, digit2=0;
		
	if ( Display_Style == 1)
     e48:	80 91 74 02 	lds	r24, 0x0274
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	71 f5       	brne	.+92     	; 0xeac <LCD_DisplayDate+0x70>
	{
		LCD_GoToLine(2);
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	11 d2       	rcall	.+1058   	; 0x1276 <LCD_GoToLine>
		digit0 = bcd2dec(day);
     e54:	8d 2f       	mov	r24, r29
     e56:	5b dc       	rcall	.-1866   	; 0x70e <bcd2dec>
     e58:	d8 2f       	mov	r29, r24
		digit1 = bcd2dec(month);
     e5a:	8c 2f       	mov	r24, r28
     e5c:	58 dc       	rcall	.-1872   	; 0x70e <bcd2dec>
     e5e:	c8 2f       	mov	r28, r24
		digit2 = bcd2dec(year);
     e60:	81 2f       	mov	r24, r17
     e62:	55 dc       	rcall	.-1878   	; 0x70e <bcd2dec>
		LCD_Printf("    %2d/%2d/%2d",digit0,digit1,digit2);
     e64:	2d b7       	in	r18, 0x3d	; 61
     e66:	3e b7       	in	r19, 0x3e	; 62
     e68:	28 50       	subi	r18, 0x08	; 8
     e6a:	30 40       	sbci	r19, 0x00	; 0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	3e bf       	out	0x3e, r19	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	2d bf       	out	0x3d, r18	; 61
     e76:	ed b7       	in	r30, 0x3d	; 61
     e78:	fe b7       	in	r31, 0x3e	; 62
     e7a:	31 96       	adiw	r30, 0x01	; 1
     e7c:	21 ea       	ldi	r18, 0xA1	; 161
     e7e:	31 e0       	ldi	r19, 0x01	; 1
     e80:	ad b7       	in	r26, 0x3d	; 61
     e82:	be b7       	in	r27, 0x3e	; 62
     e84:	12 96       	adiw	r26, 0x02	; 2
     e86:	3c 93       	st	X, r19
     e88:	2e 93       	st	-X, r18
     e8a:	11 97       	sbiw	r26, 0x01	; 1
     e8c:	d2 83       	std	Z+2, r29	; 0x02
     e8e:	13 82       	std	Z+3, r1	; 0x03
     e90:	c4 83       	std	Z+4, r28	; 0x04
     e92:	15 82       	std	Z+5, r1	; 0x05
     e94:	86 83       	std	Z+6, r24	; 0x06
     e96:	17 82       	std	Z+7, r1	; 0x07
     e98:	ea d3       	rcall	.+2004   	; 0x166e <LCD_Printf>
     e9a:	2d b7       	in	r18, 0x3d	; 61
     e9c:	3e b7       	in	r19, 0x3e	; 62
     e9e:	28 5f       	subi	r18, 0xF8	; 248
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	3e bf       	out	0x3e, r19	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	2d bf       	out	0x3d, r18	; 61
	}
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	08 95       	ret

00000eb4 <LCD_DisplayTime>:
		default:break; 		
	}	
}

void LCD_DisplayTime(unsigned char hr,unsigned char min, unsigned char sec)
{
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	16 2f       	mov	r17, r22
     ebe:	d4 2f       	mov	r29, r20
	uint8_t d_hour, d_min, d_sec;
	uint8_t digit0=0, digit1=0, digit2=0;
	
	d_hour = bcd2dec(hr);
     ec0:	26 dc       	rcall	.-1972   	; 0x70e <bcd2dec>
     ec2:	c8 2f       	mov	r28, r24
	d_min = bcd2dec(min);
     ec4:	81 2f       	mov	r24, r17
     ec6:	23 dc       	rcall	.-1978   	; 0x70e <bcd2dec>
     ec8:	08 2f       	mov	r16, r24
	d_sec = bcd2dec(sec);
     eca:	8d 2f       	mov	r24, r29
     ecc:	20 dc       	rcall	.-1984   	; 0x70e <bcd2dec>
     ece:	18 2f       	mov	r17, r24
	
	if ( Time_Format == 1 )		// 12 hour format
     ed0:	80 91 db 01 	lds	r24, 0x01DB
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	f9 f4       	brne	.+62     	; 0xf16 <LCD_DisplayTime+0x62>
	{
		LCD_SetCursor(1,14);
     ed8:	6e e0       	ldi	r22, 0x0E	; 14
     eda:	a2 d1       	rcall	.+836    	; 0x1220 <LCD_SetCursor>
		
		if (d_hour >12)
     edc:	cd 30       	cpi	r28, 0x0D	; 13
     ede:	70 f0       	brcs	.+28     	; 0xefc <LCD_DisplayTime+0x48>
		{
			d_hour -= 12;
     ee0:	cc 50       	subi	r28, 0x0C	; 12
			LCD_Printf("PM");	
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <LCD_DisplayTime+0x30>
     ee4:	81 eb       	ldi	r24, 0xB1	; 177
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	ad b7       	in	r26, 0x3d	; 61
     eea:	be b7       	in	r27, 0x3e	; 62
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	9c 93       	st	X, r25
     ef0:	8e 93       	st	-X, r24
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	bc d3       	rcall	.+1912   	; 0x166e <LCD_Printf>
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0d c0       	rjmp	.+26     	; 0xf16 <LCD_DisplayTime+0x62>
		}
		else
		{
			if ( d_hour == 0)	// time is 12 AM
     efc:	cc 23       	and	r28, r28
     efe:	09 f4       	brne	.+2      	; 0xf02 <LCD_DisplayTime+0x4e>
			{
				d_hour = 12;
     f00:	cc e0       	ldi	r28, 0x0C	; 12
			}
			LCD_Printf("AM");
     f02:	00 d0       	rcall	.+0      	; 0xf04 <LCD_DisplayTime+0x50>
     f04:	84 eb       	ldi	r24, 0xB4	; 180
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	ed b7       	in	r30, 0x3d	; 61
     f0a:	fe b7       	in	r31, 0x3e	; 62
     f0c:	92 83       	std	Z+2, r25	; 0x02
     f0e:	81 83       	std	Z+1, r24	; 0x01
     f10:	ae d3       	rcall	.+1884   	; 0x166e <LCD_Printf>
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
		}		
	}	
		
	if ( Display_Style == 1)	// both date and time are displayed in this style
     f16:	80 91 74 02 	lds	r24, 0x0274
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	21 f5       	brne	.+72     	; 0xf66 <LCD_DisplayTime+0xb2>
	{		
		LCD_GoToLine(1);
     f1e:	ab d1       	rcall	.+854    	; 0x1276 <LCD_GoToLine>
		LCD_Printf("    %2d:%2d:%2d",d_hour,d_min,d_sec);		
     f20:	8d b7       	in	r24, 0x3d	; 61
     f22:	9e b7       	in	r25, 0x3e	; 62
     f24:	08 97       	sbiw	r24, 0x08	; 8
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	9e bf       	out	0x3e, r25	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	8d bf       	out	0x3d, r24	; 61
     f30:	ed b7       	in	r30, 0x3d	; 61
     f32:	fe b7       	in	r31, 0x3e	; 62
     f34:	31 96       	adiw	r30, 0x01	; 1
     f36:	87 eb       	ldi	r24, 0xB7	; 183
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	ad b7       	in	r26, 0x3d	; 61
     f3c:	be b7       	in	r27, 0x3e	; 62
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	9c 93       	st	X, r25
     f42:	8e 93       	st	-X, r24
     f44:	11 97       	sbiw	r26, 0x01	; 1
     f46:	c2 83       	std	Z+2, r28	; 0x02
     f48:	13 82       	std	Z+3, r1	; 0x03
     f4a:	04 83       	std	Z+4, r16	; 0x04
     f4c:	15 82       	std	Z+5, r1	; 0x05
     f4e:	16 83       	std	Z+6, r17	; 0x06
     f50:	17 82       	std	Z+7, r1	; 0x07
     f52:	8d d3       	rcall	.+1818   	; 0x166e <LCD_Printf>
     f54:	ed b7       	in	r30, 0x3d	; 61
     f56:	fe b7       	in	r31, 0x3e	; 62
     f58:	38 96       	adiw	r30, 0x08	; 8
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	fe bf       	out	0x3e, r31	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	ed bf       	out	0x3d, r30	; 61
     f64:	36 c0       	rjmp	.+108    	; 0xfd2 <LCD_DisplayTime+0x11e>
	}	
	else		// only date is displayed, so display big numbers
	{
		digit1 = d_hour/10;
     f66:	1a e0       	ldi	r17, 0x0A	; 10
     f68:	8c 2f       	mov	r24, r28
     f6a:	61 2f       	mov	r22, r17
     f6c:	21 d5       	rcall	.+2626   	; 0x19b0 <__udivmodqi4>
     f6e:	c9 2f       	mov	r28, r25
		digit0= d_hour%10;
		LCD_DisplayBigNum(digit1,0);  //display hour
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	ec d8       	rcall	.-3624   	; 0x14c <LCD_DisplayBigNum>
		LCD_DisplayBigNum(digit0,3);
     f74:	8c 2f       	mov	r24, r28
     f76:	63 e0       	ldi	r22, 0x03	; 3
     f78:	e9 d8       	rcall	.-3630   	; 0x14c <LCD_DisplayBigNum>
		
		// set colon
		LCD_SetCursor(1,6);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	50 d1       	rcall	.+672    	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(0xA5);
     f80:	85 ea       	ldi	r24, 0xA5	; 165
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	de d1       	rcall	.+956    	; 0x1342 <lcd_DataWrite>
		LCD_SetCursor(2,6);
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	66 e0       	ldi	r22, 0x06	; 6
     f8a:	4a d1       	rcall	.+660    	; 0x1220 <LCD_SetCursor>
		lcd_DataWrite(0xA5);
     f8c:	85 ea       	ldi	r24, 0xA5	; 165
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	d8 d1       	rcall	.+944    	; 0x1342 <lcd_DataWrite>
		  
		//display min  
		digit1 = d_min/10;
     f92:	80 2f       	mov	r24, r16
     f94:	61 2f       	mov	r22, r17
     f96:	0c d5       	rcall	.+2584   	; 0x19b0 <__udivmodqi4>
     f98:	c9 2f       	mov	r28, r25
		digit0= d_min%10;
		LCD_DisplayBigNum(digit1,7);  
     f9a:	67 e0       	ldi	r22, 0x07	; 7
     f9c:	d7 d8       	rcall	.-3666   	; 0x14c <LCD_DisplayBigNum>
		LCD_DisplayBigNum(digit0,10);
     f9e:	8c 2f       	mov	r24, r28
     fa0:	6a e0       	ldi	r22, 0x0A	; 10
     fa2:	d4 d8       	rcall	.-3672   	; 0x14c <LCD_DisplayBigNum>
		
		//display sec
		LCD_SetCursor(2,14);
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	6e e0       	ldi	r22, 0x0E	; 14
     fa8:	3b d1       	rcall	.+630    	; 0x1220 <LCD_SetCursor>
		LCD_Printf("%2x",sec);	
     faa:	00 d0       	rcall	.+0      	; 0xfac <LCD_DisplayTime+0xf8>
     fac:	00 d0       	rcall	.+0      	; 0xfae <LCD_DisplayTime+0xfa>
     fae:	ed b7       	in	r30, 0x3d	; 61
     fb0:	fe b7       	in	r31, 0x3e	; 62
     fb2:	31 96       	adiw	r30, 0x01	; 1
     fb4:	87 ec       	ldi	r24, 0xC7	; 199
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	ad b7       	in	r26, 0x3d	; 61
     fba:	be b7       	in	r27, 0x3e	; 62
     fbc:	12 96       	adiw	r26, 0x02	; 2
     fbe:	9c 93       	st	X, r25
     fc0:	8e 93       	st	-X, r24
     fc2:	11 97       	sbiw	r26, 0x01	; 1
     fc4:	d2 83       	std	Z+2, r29	; 0x02
     fc6:	13 82       	std	Z+3, r1	; 0x03
     fc8:	52 d3       	rcall	.+1700   	; 0x166e <LCD_Printf>
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
	}	
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <main>:
unsigned char alarm_sec;
unsigned char alarm_min;
unsigned char alarm_hour; 

void main()
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <main+0x6>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <main+0x8>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <main+0xa>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
    #define up 5
    #define down 4
	#define select 3
	#define cancel 2
	
	DDRD = 0XF0; //Switches as input, lcd dataline as output
     fea:	80 ef       	ldi	r24, 0xF0	; 240
     fec:	81 bb       	out	0x11, r24	; 17
	PORTD = 0XFF; //Internal pull up enabled for switches
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	82 bb       	out	0x12, r24	; 18
	DDRB  |= (1<<buzzer_pin); // buzzer as output
     ff2:	bb 9a       	sbi	0x17, 3	; 23

	LCD_Init(4,2,16);
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	62 e0       	ldi	r22, 0x02	; 2
     ff8:	40 e1       	ldi	r20, 0x10	; 16
     ffa:	51 d1       	rcall	.+674    	; 0x129e <LCD_Init>
	LCD_Printf(" Explore Time !");
     ffc:	00 d0       	rcall	.+0      	; 0xffe <main+0x22>
     ffe:	8b ec       	ldi	r24, 0xCB	; 203
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	ad b7       	in	r26, 0x3d	; 61
    1004:	be b7       	in	r27, 0x3e	; 62
    1006:	12 96       	adiw	r26, 0x02	; 2
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
    100c:	11 97       	sbiw	r26, 0x01	; 1
    100e:	2f d3       	rcall	.+1630   	; 0x166e <LCD_Printf>
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	93 ed       	ldi	r25, 0xD3	; 211
    1014:	a0 e3       	ldi	r26, 0x30	; 48
    1016:	81 50       	subi	r24, 0x01	; 1
    1018:	90 40       	sbci	r25, 0x00	; 0
    101a:	a0 40       	sbci	r26, 0x00	; 0
    101c:	e1 f7       	brne	.-8      	; 0x1016 <main+0x3a>
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <main+0x44>
    1020:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	36 d1       	rcall	.+620    	; 0x1294 <LCD_Clear>
	
    RTC_Init();
    1028:	43 d4       	rcall	.+2182   	; 0x18b0 <RTC_Init>
	
	//segments for creating large font stored in RAM.
	
	LCD_CreateCC(LT,0);
    102a:	84 e6       	ldi	r24, 0x64	; 100
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	74 d8       	rcall	.-3864   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(UB,1);
    1032:	8c e5       	ldi	r24, 0x5C	; 92
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	70 d8       	rcall	.-3872   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(RT,2);
    103a:	84 e5       	ldi	r24, 0x54	; 84
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	6c d8       	rcall	.-3880   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LL,3);
    1042:	8c e4       	ldi	r24, 0x4C	; 76
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	63 e0       	ldi	r22, 0x03	; 3
    1048:	68 d8       	rcall	.-3888   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LB,4);
    104a:	84 e4       	ldi	r24, 0x44	; 68
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	64 e0       	ldi	r22, 0x04	; 4
    1050:	64 d8       	rcall	.-3896   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LR,5);
    1052:	8c e3       	ldi	r24, 0x3C	; 60
    1054:	92 e0       	ldi	r25, 0x02	; 2
    1056:	65 e0       	ldi	r22, 0x05	; 5
    1058:	60 d8       	rcall	.-3904   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(UMB,6);
    105a:	84 e3       	ldi	r24, 0x34	; 52
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	66 e0       	ldi	r22, 0x06	; 6
    1060:	5c d8       	rcall	.-3912   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LMB,7);
    1062:	8c e2       	ldi	r24, 0x2C	; 44
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	67 e0       	ldi	r22, 0x07	; 7
    1068:	58 d8       	rcall	.-3920   	; 0x11a <LCD_CreateCC>

	/*Set the time and Date only once */
	RTC_SetTime(0x23,0x40,0x20);  //  11:40:20 pm
    106a:	83 e2       	ldi	r24, 0x23	; 35
    106c:	60 e4       	ldi	r22, 0x40	; 64
    106e:	40 e2       	ldi	r20, 0x20	; 32
    1070:	29 d4       	rcall	.+2130   	; 0x18c4 <RTC_SetTime>
	RTC_SetDate(0x14,0x11,0x12);  //  14th Nov 2012
    1072:	84 e1       	ldi	r24, 0x14	; 20
    1074:	61 e1       	ldi	r22, 0x11	; 17
    1076:	42 e1       	ldi	r20, 0x12	; 18
    1078:	3b d4       	rcall	.+2166   	; 0x18f0 <RTC_SetDate>
	
	while(1)
	{		       
		if(util_IsBitCleared(Button,select))
    107a:	83 99       	sbic	0x10, 3	; 16
    107c:	23 c0       	rjmp	.+70     	; 0x10c4 <main+0xe8>
		 {   
			while(util_IsBitCleared(Button,select));
    107e:	83 9b       	sbis	0x10, 3	; 16
    1080:	fe cf       	rjmp	.-4      	; 0x107e <main+0xa2>
			 
			do
			{
				option = LCD_DisplayMenu();
    1082:	60 d9       	rcall	.-3392   	; 0x344 <LCD_DisplayMenu>
				switch(option)
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	b1 f0       	breq	.+44     	; 0x10b4 <main+0xd8>
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	28 f4       	brcc	.+10     	; 0x1096 <main+0xba>
    108c:	88 23       	and	r24, r24
    108e:	41 f0       	breq	.+16     	; 0x10a0 <main+0xc4>
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	a9 f4       	brne	.+42     	; 0x10be <main+0xe2>
    1094:	0a c0       	rjmp	.+20     	; 0x10aa <main+0xce>
    1096:	83 30       	cpi	r24, 0x03	; 3
    1098:	79 f0       	breq	.+30     	; 0x10b8 <main+0xdc>
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	81 f4       	brne	.+32     	; 0x10be <main+0xe2>
    109e:	0e c0       	rjmp	.+28     	; 0x10bc <main+0xe0>
				{
				 case 0: setTime(hour,min,sec);break;
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	6a 81       	ldd	r22, Y+2	; 0x02
    10a4:	49 81       	ldd	r20, Y+1	; 0x01
    10a6:	9c dd       	rcall	.-1224   	; 0xbe0 <setTime>
    10a8:	0a c0       	rjmp	.+20     	; 0x10be <main+0xe2>
				 case 1: setDate(day,month,year);break;
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	6d 81       	ldd	r22, Y+5	; 0x05
    10ae:	4e 81       	ldd	r20, Y+6	; 0x06
    10b0:	69 dc       	rcall	.-1838   	; 0x984 <setDate>
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <main+0xe2>
				 case 2: setAlarm(); break;
    10b4:	37 db       	rcall	.-2450   	; 0x724 <setAlarm>
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <main+0xe2>
				 case 3: setDisplayStyle(); break;
    10b8:	20 da       	rcall	.-3008   	; 0x4fa <setDisplayStyle>
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <main+0xe2>
				 case 4: setTimeFormat(); break;
    10bc:	a0 da       	rcall	.-2752   	; 0x5fe <setTimeFormat>
				 default: break;
				}
			} while(util_IsBitSet(Button,cancel));
    10be:	82 99       	sbic	0x10, 2	; 16
    10c0:	e0 cf       	rjmp	.-64     	; 0x1082 <main+0xa6>
			
			LCD_Clear(); 	 
    10c2:	e8 d0       	rcall	.+464    	; 0x1294 <LCD_Clear>
		 }
	
		RTC_GetTime(&hour,&min,&sec);      
    10c4:	ce 01       	movw	r24, r28
    10c6:	03 96       	adiw	r24, 0x03	; 3
    10c8:	be 01       	movw	r22, r28
    10ca:	6e 5f       	subi	r22, 0xFE	; 254
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	ae 01       	movw	r20, r28
    10d0:	4f 5f       	subi	r20, 0xFF	; 255
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	23 d4       	rcall	.+2118   	; 0x191c <RTC_GetTime>
		RTC_GetDate(&day, &month, &year);
    10d6:	ce 01       	movw	r24, r28
    10d8:	04 96       	adiw	r24, 0x04	; 4
    10da:	be 01       	movw	r22, r28
    10dc:	6b 5f       	subi	r22, 0xFB	; 251
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	ae 01       	movw	r20, r28
    10e2:	4a 5f       	subi	r20, 0xFA	; 250
    10e4:	5f 4f       	sbci	r21, 0xFF	; 255
    10e6:	3f d4       	rcall	.+2174   	; 0x1966 <RTC_GetDate>
		LCD_DisplayTime(hour, min, sec);
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	6a 81       	ldd	r22, Y+2	; 0x02
    10ec:	49 81       	ldd	r20, Y+1	; 0x01
    10ee:	e2 de       	rcall	.-572    	; 0xeb4 <LCD_DisplayTime>
		LCD_DisplayDate(day, month, year);
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	6d 81       	ldd	r22, Y+5	; 0x05
    10f4:	4e 81       	ldd	r20, Y+6	; 0x06
    10f6:	a2 de       	rcall	.-700    	; 0xe3c <LCD_DisplayDate>
		
		checkAlarm();
    10f8:	bb d9       	rcall	.-3210   	; 0x470 <checkAlarm>
				
	}
    10fa:	bf cf       	rjmp	.-130    	; 0x107a <main+0x9e>

000010fc <DELAY_sec>:
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	59 f0       	breq	.+22     	; 0x1116 <DELAY_sec+0x1a>
    1100:	2f ef       	ldi	r18, 0xFF	; 255
    1102:	39 e6       	ldi	r19, 0x69	; 105
    1104:	48 e1       	ldi	r20, 0x18	; 24
    1106:	21 50       	subi	r18, 0x01	; 1
    1108:	30 40       	sbci	r19, 0x00	; 0
    110a:	40 40       	sbci	r20, 0x00	; 0
    110c:	e1 f7       	brne	.-8      	; 0x1106 <DELAY_sec+0xa>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <DELAY_sec+0x14>
    1110:	00 00       	nop
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	a9 f7       	brne	.-22     	; 0x1100 <DELAY_sec+0x4>
    1116:	08 95       	ret

00001118 <I2C_Init>:
    1118:	11 b8       	out	0x01, r1	; 1
    111a:	80 e5       	ldi	r24, 0x50	; 80
    111c:	80 b9       	out	0x00, r24	; 0
    111e:	84 e0       	ldi	r24, 0x04	; 4
    1120:	86 bf       	out	0x36, r24	; 54
    1122:	08 95       	ret

00001124 <I2C_Start>:
    1124:	84 ea       	ldi	r24, 0xA4	; 164
    1126:	86 bf       	out	0x36, r24	; 54
    1128:	06 b6       	in	r0, 0x36	; 54
    112a:	07 fe       	sbrs	r0, 7
    112c:	fd cf       	rjmp	.-6      	; 0x1128 <I2C_Start+0x4>
    112e:	08 95       	ret

00001130 <I2C_Stop>:
    1130:	84 e9       	ldi	r24, 0x94	; 148
    1132:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1134:	8a e1       	ldi	r24, 0x1A	; 26
    1136:	8a 95       	dec	r24
    1138:	f1 f7       	brne	.-4      	; 0x1136 <I2C_Stop+0x6>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <I2C_Stop+0xc>
    113c:	08 95       	ret

0000113e <I2C_Write>:
    113e:	83 b9       	out	0x03, r24	; 3
    1140:	84 e8       	ldi	r24, 0x84	; 132
    1142:	86 bf       	out	0x36, r24	; 54
    1144:	06 b6       	in	r0, 0x36	; 54
    1146:	07 fe       	sbrs	r0, 7
    1148:	fd cf       	rjmp	.-6      	; 0x1144 <I2C_Write+0x6>
    114a:	08 95       	ret

0000114c <I2C_Read>:
    114c:	82 95       	swap	r24
    114e:	88 0f       	add	r24, r24
    1150:	88 0f       	add	r24, r24
    1152:	80 7c       	andi	r24, 0xC0	; 192
    1154:	84 68       	ori	r24, 0x84	; 132
    1156:	86 bf       	out	0x36, r24	; 54
    1158:	06 b6       	in	r0, 0x36	; 54
    115a:	07 fe       	sbrs	r0, 7
    115c:	fd cf       	rjmp	.-6      	; 0x1158 <I2C_Read+0xc>
    115e:	83 b1       	in	r24, 0x03	; 3
    1160:	08 95       	ret

00001162 <lcd_SendNibble>:
    1162:	98 2f       	mov	r25, r24
    1164:	84 ff       	sbrs	r24, 4
    1166:	02 c0       	rjmp	.+4      	; 0x116c <lcd_SendNibble+0xa>
    1168:	c4 9a       	sbi	0x18, 4	; 24
    116a:	01 c0       	rjmp	.+2      	; 0x116e <lcd_SendNibble+0xc>
    116c:	c4 98       	cbi	0x18, 4	; 24
    116e:	95 ff       	sbrs	r25, 5
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <lcd_SendNibble+0x14>
    1172:	c5 9a       	sbi	0x18, 5	; 24
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <lcd_SendNibble+0x16>
    1176:	c5 98       	cbi	0x18, 5	; 24
    1178:	96 ff       	sbrs	r25, 6
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <lcd_SendNibble+0x1e>
    117c:	c6 9a       	sbi	0x18, 6	; 24
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <lcd_SendNibble+0x20>
    1180:	c6 98       	cbi	0x18, 6	; 24
    1182:	88 23       	and	r24, r24
    1184:	14 f4       	brge	.+4      	; 0x118a <lcd_SendNibble+0x28>
    1186:	c7 9a       	sbi	0x18, 7	; 24
    1188:	08 95       	ret
    118a:	c7 98       	cbi	0x18, 7	; 24
    118c:	08 95       	ret

0000118e <lcd_BusyCheck>:
    118e:	bf 98       	cbi	0x17, 7	; 23
    1190:	c0 98       	cbi	0x18, 0	; 24
    1192:	c1 9a       	sbi	0x18, 1	; 24
    1194:	ea e7       	ldi	r30, 0x7A	; 122
    1196:	f2 e0       	ldi	r31, 0x02	; 2
    1198:	c2 98       	cbi	0x18, 2	; 24
    119a:	8a e1       	ldi	r24, 0x1A	; 26
    119c:	8a 95       	dec	r24
    119e:	f1 f7       	brne	.-4      	; 0x119c <lcd_BusyCheck+0xe>
    11a0:	00 c0       	rjmp	.+0      	; 0x11a2 <lcd_BusyCheck+0x14>
    11a2:	c2 9a       	sbi	0x18, 2	; 24
    11a4:	9a e1       	ldi	r25, 0x1A	; 26
    11a6:	9a 95       	dec	r25
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <lcd_BusyCheck+0x18>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <lcd_BusyCheck+0x1e>
    11ac:	86 b3       	in	r24, 0x16	; 22
    11ae:	90 81       	ld	r25, Z
    11b0:	94 30       	cpi	r25, 0x04	; 4
    11b2:	51 f4       	brne	.+20     	; 0x11c8 <lcd_BusyCheck+0x3a>
    11b4:	c2 98       	cbi	0x18, 2	; 24
    11b6:	9a e1       	ldi	r25, 0x1A	; 26
    11b8:	9a 95       	dec	r25
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <lcd_BusyCheck+0x2a>
    11bc:	00 c0       	rjmp	.+0      	; 0x11be <lcd_BusyCheck+0x30>
    11be:	c2 9a       	sbi	0x18, 2	; 24
    11c0:	9a e1       	ldi	r25, 0x1A	; 26
    11c2:	9a 95       	dec	r25
    11c4:	f1 f7       	brne	.-4      	; 0x11c2 <lcd_BusyCheck+0x34>
    11c6:	00 c0       	rjmp	.+0      	; 0x11c8 <lcd_BusyCheck+0x3a>
    11c8:	88 23       	and	r24, r24
    11ca:	34 f3       	brlt	.-52     	; 0x1198 <lcd_BusyCheck+0xa>
    11cc:	bf 9a       	sbi	0x17, 7	; 23
    11ce:	08 95       	ret

000011d0 <lcd_SendCmdSignals>:
    11d0:	c0 98       	cbi	0x18, 0	; 24
    11d2:	c1 98       	cbi	0x18, 1	; 24
    11d4:	c2 9a       	sbi	0x18, 2	; 24
    11d6:	8a e1       	ldi	r24, 0x1A	; 26
    11d8:	8a 95       	dec	r24
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <lcd_SendCmdSignals+0x8>
    11dc:	00 c0       	rjmp	.+0      	; 0x11de <lcd_SendCmdSignals+0xe>
    11de:	c2 98       	cbi	0x18, 2	; 24
    11e0:	08 95       	ret

000011e2 <lcd_SendDataSignals>:
    11e2:	c0 9a       	sbi	0x18, 0	; 24
    11e4:	c1 98       	cbi	0x18, 1	; 24
    11e6:	c2 9a       	sbi	0x18, 2	; 24
    11e8:	8a e1       	ldi	r24, 0x1A	; 26
    11ea:	8a 95       	dec	r24
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <lcd_SendDataSignals+0x8>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <lcd_SendDataSignals+0xe>
    11f0:	c2 98       	cbi	0x18, 2	; 24
    11f2:	08 95       	ret

000011f4 <LCD_CmdWrite>:
    11f4:	cf 93       	push	r28
    11f6:	c8 2f       	mov	r28, r24
    11f8:	ca df       	rcall	.-108    	; 0x118e <lcd_BusyCheck>
    11fa:	80 91 7a 02 	lds	r24, 0x027A
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	19 f4       	brne	.+6      	; 0x1208 <LCD_CmdWrite+0x14>
    1202:	c8 bb       	out	0x18, r28	; 24
    1204:	e5 df       	rcall	.-54     	; 0x11d0 <lcd_SendCmdSignals>
    1206:	0a c0       	rjmp	.+20     	; 0x121c <LCD_CmdWrite+0x28>
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	41 f4       	brne	.+16     	; 0x121c <LCD_CmdWrite+0x28>
    120c:	8c 2f       	mov	r24, r28
    120e:	a9 df       	rcall	.-174    	; 0x1162 <lcd_SendNibble>
    1210:	df df       	rcall	.-66     	; 0x11d0 <lcd_SendCmdSignals>
    1212:	8c 2f       	mov	r24, r28
    1214:	82 95       	swap	r24
    1216:	80 7f       	andi	r24, 0xF0	; 240
    1218:	a4 df       	rcall	.-184    	; 0x1162 <lcd_SendNibble>
    121a:	da df       	rcall	.-76     	; 0x11d0 <lcd_SendCmdSignals>
    121c:	cf 91       	pop	r28
    121e:	08 95       	ret

00001220 <LCD_SetCursor>:
    1220:	90 91 78 02 	lds	r25, 0x0278
    1224:	98 17       	cp	r25, r24
    1226:	78 f0       	brcs	.+30     	; 0x1246 <LCD_SetCursor+0x26>
    1228:	90 91 79 02 	lds	r25, 0x0279
    122c:	69 17       	cp	r22, r25
    122e:	58 f4       	brcc	.+22     	; 0x1246 <LCD_SetCursor+0x26>
    1230:	60 93 76 02 	sts	0x0276, r22
    1234:	80 93 77 02 	sts	0x0277, r24
    1238:	ec e6       	ldi	r30, 0x6C	; 108
    123a:	f2 e0       	ldi	r31, 0x02	; 2
    123c:	e8 0f       	add	r30, r24
    123e:	f1 1d       	adc	r31, r1
    1240:	80 81       	ld	r24, Z
    1242:	86 0f       	add	r24, r22
    1244:	d7 df       	rcall	.-82     	; 0x11f4 <LCD_CmdWrite>
    1246:	08 95       	ret

00001248 <LCD_GoToNextLine>:
    1248:	80 91 77 02 	lds	r24, 0x0277
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	80 93 77 02 	sts	0x0277, r24
    1252:	10 92 76 02 	sts	0x0276, r1
    1256:	90 91 78 02 	lds	r25, 0x0278
    125a:	98 17       	cp	r25, r24
    125c:	18 f4       	brcc	.+6      	; 0x1264 <LCD_GoToNextLine+0x1c>
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 77 02 	sts	0x0277, r24
    1264:	80 91 77 02 	lds	r24, 0x0277
    1268:	ec e6       	ldi	r30, 0x6C	; 108
    126a:	f2 e0       	ldi	r31, 0x02	; 2
    126c:	e8 0f       	add	r30, r24
    126e:	f1 1d       	adc	r31, r1
    1270:	80 81       	ld	r24, Z
    1272:	c0 df       	rcall	.-128    	; 0x11f4 <LCD_CmdWrite>
    1274:	08 95       	ret

00001276 <LCD_GoToLine>:
    1276:	90 91 78 02 	lds	r25, 0x0278
    127a:	98 17       	cp	r25, r24
    127c:	50 f0       	brcs	.+20     	; 0x1292 <LCD_GoToLine+0x1c>
    127e:	10 92 76 02 	sts	0x0276, r1
    1282:	80 93 77 02 	sts	0x0277, r24
    1286:	ec e6       	ldi	r30, 0x6C	; 108
    1288:	f2 e0       	ldi	r31, 0x02	; 2
    128a:	e8 0f       	add	r30, r24
    128c:	f1 1d       	adc	r31, r1
    128e:	80 81       	ld	r24, Z
    1290:	b1 df       	rcall	.-158    	; 0x11f4 <LCD_CmdWrite>
    1292:	08 95       	ret

00001294 <LCD_Clear>:
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	ae df       	rcall	.-164    	; 0x11f4 <LCD_CmdWrite>
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	ed df       	rcall	.-38     	; 0x1276 <LCD_GoToLine>
    129c:	08 95       	ret

0000129e <LCD_Init>:
    129e:	9f ef       	ldi	r25, 0xFF	; 255
    12a0:	97 bb       	out	0x17, r25	; 23
    12a2:	97 bb       	out	0x17, r25	; 23
    12a4:	80 93 7a 02 	sts	0x027A, r24
    12a8:	40 93 79 02 	sts	0x0279, r20
    12ac:	60 93 78 02 	sts	0x0278, r22
    12b0:	63 30       	cpi	r22, 0x03	; 3
    12b2:	40 f0       	brcs	.+16     	; 0x12c4 <LCD_Init+0x26>
    12b4:	4f 70       	andi	r20, 0x0F	; 15
    12b6:	84 2f       	mov	r24, r20
    12b8:	80 57       	subi	r24, 0x70	; 112
    12ba:	80 93 6f 02 	sts	0x026F, r24
    12be:	40 53       	subi	r20, 0x30	; 48
    12c0:	40 93 70 02 	sts	0x0270, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	90 e7       	ldi	r25, 0x70	; 112
    12c8:	a2 e0       	ldi	r26, 0x02	; 2
    12ca:	81 50       	subi	r24, 0x01	; 1
    12cc:	90 40       	sbci	r25, 0x00	; 0
    12ce:	a0 40       	sbci	r26, 0x00	; 0
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <LCD_Init+0x2c>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <LCD_Init+0x36>
    12d4:	00 00       	nop
    12d6:	80 91 7a 02 	lds	r24, 0x027A
    12da:	88 30       	cpi	r24, 0x08	; 8
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <LCD_Init+0x46>
    12de:	88 e3       	ldi	r24, 0x38	; 56
    12e0:	89 df       	rcall	.-238    	; 0x11f4 <LCD_CmdWrite>
    12e2:	2b c0       	rjmp	.+86     	; 0x133a <LCD_Init+0x9c>
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	49 f5       	brne	.+82     	; 0x133a <LCD_Init+0x9c>
    12e8:	80 e3       	ldi	r24, 0x30	; 48
    12ea:	3b df       	rcall	.-394    	; 0x1162 <lcd_SendNibble>
    12ec:	71 df       	rcall	.-286    	; 0x11d0 <lcd_SendCmdSignals>
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	90 e7       	ldi	r25, 0x70	; 112
    12f2:	a2 e0       	ldi	r26, 0x02	; 2
    12f4:	81 50       	subi	r24, 0x01	; 1
    12f6:	90 40       	sbci	r25, 0x00	; 0
    12f8:	a0 40       	sbci	r26, 0x00	; 0
    12fa:	e1 f7       	brne	.-8      	; 0x12f4 <LCD_Init+0x56>
    12fc:	00 c0       	rjmp	.+0      	; 0x12fe <LCD_Init+0x60>
    12fe:	00 00       	nop
    1300:	80 e3       	ldi	r24, 0x30	; 48
    1302:	2f df       	rcall	.-418    	; 0x1162 <lcd_SendNibble>
    1304:	65 df       	rcall	.-310    	; 0x11d0 <lcd_SendCmdSignals>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1306:	af e8       	ldi	r26, 0x8F	; 143
    1308:	b1 e0       	ldi	r27, 0x01	; 1
    130a:	11 97       	sbiw	r26, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <LCD_Init+0x6c>
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <LCD_Init+0x72>
    1310:	00 00       	nop
    1312:	80 e3       	ldi	r24, 0x30	; 48
    1314:	26 df       	rcall	.-436    	; 0x1162 <lcd_SendNibble>
    1316:	5c df       	rcall	.-328    	; 0x11d0 <lcd_SendCmdSignals>
    1318:	8f e8       	ldi	r24, 0x8F	; 143
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <LCD_Init+0x7e>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <LCD_Init+0x84>
    1322:	00 00       	nop
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	1d df       	rcall	.-454    	; 0x1162 <lcd_SendNibble>
    1328:	53 df       	rcall	.-346    	; 0x11d0 <lcd_SendCmdSignals>
    132a:	af e8       	ldi	r26, 0x8F	; 143
    132c:	b1 e0       	ldi	r27, 0x01	; 1
    132e:	11 97       	sbiw	r26, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_Init+0x90>
    1332:	00 c0       	rjmp	.+0      	; 0x1334 <LCD_Init+0x96>
    1334:	00 00       	nop
    1336:	88 e2       	ldi	r24, 0x28	; 40
    1338:	5d df       	rcall	.-326    	; 0x11f4 <LCD_CmdWrite>
    133a:	8f e0       	ldi	r24, 0x0F	; 15
    133c:	5b df       	rcall	.-330    	; 0x11f4 <LCD_CmdWrite>
    133e:	aa df       	rcall	.-172    	; 0x1294 <LCD_Clear>
    1340:	08 95       	ret

00001342 <lcd_DataWrite>:
    1342:	cf 93       	push	r28
    1344:	c8 2f       	mov	r28, r24
    1346:	23 df       	rcall	.-442    	; 0x118e <lcd_BusyCheck>
    1348:	80 91 7a 02 	lds	r24, 0x027A
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	19 f4       	brne	.+6      	; 0x1356 <lcd_DataWrite+0x14>
    1350:	c8 bb       	out	0x18, r28	; 24
    1352:	47 df       	rcall	.-370    	; 0x11e2 <lcd_SendDataSignals>
    1354:	0a c0       	rjmp	.+20     	; 0x136a <lcd_DataWrite+0x28>
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	41 f4       	brne	.+16     	; 0x136a <lcd_DataWrite+0x28>
    135a:	8c 2f       	mov	r24, r28
    135c:	02 df       	rcall	.-508    	; 0x1162 <lcd_SendNibble>
    135e:	41 df       	rcall	.-382    	; 0x11e2 <lcd_SendDataSignals>
    1360:	8c 2f       	mov	r24, r28
    1362:	82 95       	swap	r24
    1364:	80 7f       	andi	r24, 0xF0	; 240
    1366:	fd de       	rcall	.-518    	; 0x1162 <lcd_SendNibble>
    1368:	3c df       	rcall	.-392    	; 0x11e2 <lcd_SendDataSignals>
    136a:	cf 91       	pop	r28
    136c:	08 95       	ret

0000136e <LCD_DisplayChar>:
    136e:	cf 93       	push	r28
    1370:	c8 2f       	mov	r28, r24
    1372:	90 91 79 02 	lds	r25, 0x0279
    1376:	80 91 76 02 	lds	r24, 0x0276
    137a:	89 17       	cp	r24, r25
    137c:	18 f4       	brcc	.+6      	; 0x1384 <LCD_DisplayChar+0x16>
    137e:	ca 30       	cpi	r28, 0x0A	; 10
    1380:	21 f4       	brne	.+8      	; 0x138a <LCD_DisplayChar+0x1c>
    1382:	0b c0       	rjmp	.+22     	; 0x139a <LCD_DisplayChar+0x2c>
    1384:	61 df       	rcall	.-318    	; 0x1248 <LCD_GoToNextLine>
    1386:	ca 30       	cpi	r28, 0x0A	; 10
    1388:	49 f0       	breq	.+18     	; 0x139c <LCD_DisplayChar+0x2e>
    138a:	8c 2f       	mov	r24, r28
    138c:	da df       	rcall	.-76     	; 0x1342 <lcd_DataWrite>
    138e:	80 91 76 02 	lds	r24, 0x0276
    1392:	8f 5f       	subi	r24, 0xFF	; 255
    1394:	80 93 76 02 	sts	0x0276, r24
    1398:	01 c0       	rjmp	.+2      	; 0x139c <LCD_DisplayChar+0x2e>
    139a:	56 df       	rcall	.-340    	; 0x1248 <LCD_GoToNextLine>
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <LCD_DisplayBinaryNumber>:
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	6b 01       	movw	r12, r22
    13b4:	7c 01       	movw	r14, r24
    13b6:	c4 2f       	mov	r28, r20
    13b8:	44 23       	and	r20, r20
    13ba:	11 f1       	breq	.+68     	; 0x1400 <LCD_DisplayBinaryNumber+0x60>
    13bc:	01 e0       	ldi	r16, 0x01	; 1
    13be:	10 e0       	ldi	r17, 0x00	; 0
    13c0:	d1 e0       	ldi	r29, 0x01	; 1
    13c2:	bb 24       	eor	r11, r11
    13c4:	4c 2f       	mov	r20, r28
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	41 50       	subi	r20, 0x01	; 1
    13ca:	50 40       	sbci	r21, 0x00	; 0
    13cc:	c8 01       	movw	r24, r16
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <LCD_DisplayBinaryNumber+0x34>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	4a 95       	dec	r20
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <LCD_DisplayBinaryNumber+0x30>
    13d8:	ac 01       	movw	r20, r24
    13da:	66 27       	eor	r22, r22
    13dc:	57 fd       	sbrc	r21, 7
    13de:	60 95       	com	r22
    13e0:	76 2f       	mov	r23, r22
    13e2:	4c 21       	and	r20, r12
    13e4:	5d 21       	and	r21, r13
    13e6:	6e 21       	and	r22, r14
    13e8:	7f 21       	and	r23, r15
    13ea:	8d 2f       	mov	r24, r29
    13ec:	41 15       	cp	r20, r1
    13ee:	51 05       	cpc	r21, r1
    13f0:	61 05       	cpc	r22, r1
    13f2:	71 05       	cpc	r23, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <LCD_DisplayBinaryNumber+0x58>
    13f6:	8b 2d       	mov	r24, r11
    13f8:	80 5d       	subi	r24, 0xD0	; 208
    13fa:	b9 df       	rcall	.-142    	; 0x136e <LCD_DisplayChar>
    13fc:	c1 50       	subi	r28, 0x01	; 1
    13fe:	11 f7       	brne	.-60     	; 0x13c4 <LCD_DisplayBinaryNumber+0x24>
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	ff 90       	pop	r15
    140a:	ef 90       	pop	r14
    140c:	df 90       	pop	r13
    140e:	cf 90       	pop	r12
    1410:	bf 90       	pop	r11
    1412:	08 95       	ret

00001414 <LCD_DisplayHexNumber>:
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2a 97       	sbiw	r28, 0x0a	; 10
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	a1 05       	cpc	r26, r1
    1432:	b1 05       	cpc	r27, r1
    1434:	19 f0       	breq	.+6      	; 0x143c <LCD_DisplayHexNumber+0x28>
    1436:	44 23       	and	r20, r20
    1438:	69 f4       	brne	.+26     	; 0x1454 <LCD_DisplayHexNumber+0x40>
    143a:	35 c0       	rjmp	.+106    	; 0x14a6 <LCD_DisplayHexNumber+0x92>
    143c:	44 23       	and	r20, r20
    143e:	99 f1       	breq	.+102    	; 0x14a6 <LCD_DisplayHexNumber+0x92>
    1440:	fe 01       	movw	r30, r28
    1442:	31 96       	adiw	r30, 0x01	; 1
    1444:	10 e0       	ldi	r17, 0x00	; 0
    1446:	11 92       	st	Z+, r1
    1448:	1f 5f       	subi	r17, 0xFF	; 255
    144a:	14 17       	cp	r17, r20
    144c:	01 f1       	breq	.+64     	; 0x148e <LCD_DisplayHexNumber+0x7a>
    144e:	1a 30       	cpi	r17, 0x0A	; 10
    1450:	d1 f7       	brne	.-12     	; 0x1446 <LCD_DisplayHexNumber+0x32>
    1452:	1d c0       	rjmp	.+58     	; 0x148e <LCD_DisplayHexNumber+0x7a>
    1454:	fe 01       	movw	r30, r28
    1456:	31 96       	adiw	r30, 0x01	; 1
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	a1 05       	cpc	r26, r1
    145e:	b1 05       	cpc	r27, r1
    1460:	61 f0       	breq	.+24     	; 0x147a <LCD_DisplayHexNumber+0x66>
    1462:	28 2f       	mov	r18, r24
    1464:	2f 70       	andi	r18, 0x0F	; 15
    1466:	20 83       	st	Z, r18
    1468:	68 94       	set
    146a:	13 f8       	bld	r1, 3
    146c:	b6 95       	lsr	r27
    146e:	a7 95       	ror	r26
    1470:	97 95       	ror	r25
    1472:	87 95       	ror	r24
    1474:	16 94       	lsr	r1
    1476:	d1 f7       	brne	.-12     	; 0x146c <LCD_DisplayHexNumber+0x58>
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <LCD_DisplayHexNumber+0x6c>
    147a:	4b 30       	cpi	r20, 0x0B	; 11
    147c:	30 f4       	brcc	.+12     	; 0x148a <LCD_DisplayHexNumber+0x76>
    147e:	10 82       	st	Z, r1
    1480:	1f 5f       	subi	r17, 0xFF	; 255
    1482:	31 96       	adiw	r30, 0x01	; 1
    1484:	14 17       	cp	r17, r20
    1486:	49 f7       	brne	.-46     	; 0x145a <LCD_DisplayHexNumber+0x46>
    1488:	02 c0       	rjmp	.+4      	; 0x148e <LCD_DisplayHexNumber+0x7a>
    148a:	11 23       	and	r17, r17
    148c:	61 f0       	breq	.+24     	; 0x14a6 <LCD_DisplayHexNumber+0x92>
    148e:	fe 01       	movw	r30, r28
    1490:	e1 0f       	add	r30, r17
    1492:	f1 1d       	adc	r31, r1
    1494:	80 81       	ld	r24, Z
    1496:	8a 30       	cpi	r24, 0x0A	; 10
    1498:	10 f0       	brcs	.+4      	; 0x149e <LCD_DisplayHexNumber+0x8a>
    149a:	89 5c       	subi	r24, 0xC9	; 201
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <LCD_DisplayHexNumber+0x8c>
    149e:	80 5d       	subi	r24, 0xD0	; 208
    14a0:	66 df       	rcall	.-308    	; 0x136e <LCD_DisplayChar>
    14a2:	11 50       	subi	r17, 0x01	; 1
    14a4:	a1 f7       	brne	.-24     	; 0x148e <LCD_DisplayHexNumber+0x7a>
    14a6:	2a 96       	adiw	r28, 0x0a	; 10
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	08 95       	ret

000014ba <LCD_DisplayDecimalNumber>:
    14ba:	8f 92       	push	r8
    14bc:	9f 92       	push	r9
    14be:	af 92       	push	r10
    14c0:	bf 92       	push	r11
    14c2:	ef 92       	push	r14
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	2a 97       	sbiw	r28, 0x0a	; 10
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	04 2f       	mov	r16, r20
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	a1 05       	cpc	r26, r1
    14e8:	b1 05       	cpc	r27, r1
    14ea:	19 f0       	breq	.+6      	; 0x14f2 <LCD_DisplayDecimalNumber+0x38>
    14ec:	44 23       	and	r20, r20
    14ee:	71 f4       	brne	.+28     	; 0x150c <LCD_DisplayDecimalNumber+0x52>
    14f0:	41 c0       	rjmp	.+130    	; 0x1574 <LCD_DisplayDecimalNumber+0xba>
    14f2:	44 23       	and	r20, r20
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <LCD_DisplayDecimalNumber+0x3e>
    14f6:	3e c0       	rjmp	.+124    	; 0x1574 <LCD_DisplayDecimalNumber+0xba>
    14f8:	fe 01       	movw	r30, r28
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	10 e0       	ldi	r17, 0x00	; 0
    14fe:	11 92       	st	Z+, r1
    1500:	1f 5f       	subi	r17, 0xFF	; 255
    1502:	10 17       	cp	r17, r16
    1504:	79 f1       	breq	.+94     	; 0x1564 <LCD_DisplayDecimalNumber+0xaa>
    1506:	1a 30       	cpi	r17, 0x0A	; 10
    1508:	d1 f7       	brne	.-12     	; 0x14fe <LCD_DisplayDecimalNumber+0x44>
    150a:	2c c0       	rjmp	.+88     	; 0x1564 <LCD_DisplayDecimalNumber+0xaa>
    150c:	7e 01       	movw	r14, r28
    150e:	08 94       	sec
    1510:	e1 1c       	adc	r14, r1
    1512:	f1 1c       	adc	r15, r1
    1514:	10 e0       	ldi	r17, 0x00	; 0
    1516:	0f 2e       	mov	r0, r31
    1518:	fa e0       	ldi	r31, 0x0A	; 10
    151a:	8f 2e       	mov	r8, r31
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	9f 2e       	mov	r9, r31
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	af 2e       	mov	r10, r31
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	bf 2e       	mov	r11, r31
    1528:	f0 2d       	mov	r31, r0
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	a1 05       	cpc	r26, r1
    152e:	b1 05       	cpc	r27, r1
    1530:	61 f0       	breq	.+24     	; 0x154a <LCD_DisplayDecimalNumber+0x90>
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	a5 01       	movw	r20, r10
    1538:	94 01       	movw	r18, r8
    153a:	46 d2       	rcall	.+1164   	; 0x19c8 <__udivmodsi4>
    153c:	f7 01       	movw	r30, r14
    153e:	60 83       	st	Z, r22
    1540:	82 2f       	mov	r24, r18
    1542:	93 2f       	mov	r25, r19
    1544:	a4 2f       	mov	r26, r20
    1546:	b5 2f       	mov	r27, r21
    1548:	04 c0       	rjmp	.+8      	; 0x1552 <LCD_DisplayDecimalNumber+0x98>
    154a:	0b 30       	cpi	r16, 0x0B	; 11
    154c:	48 f4       	brcc	.+18     	; 0x1560 <LCD_DisplayDecimalNumber+0xa6>
    154e:	f7 01       	movw	r30, r14
    1550:	10 82       	st	Z, r1
    1552:	1f 5f       	subi	r17, 0xFF	; 255
    1554:	08 94       	sec
    1556:	e1 1c       	adc	r14, r1
    1558:	f1 1c       	adc	r15, r1
    155a:	10 17       	cp	r17, r16
    155c:	31 f7       	brne	.-52     	; 0x152a <LCD_DisplayDecimalNumber+0x70>
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <LCD_DisplayDecimalNumber+0xaa>
    1560:	11 23       	and	r17, r17
    1562:	41 f0       	breq	.+16     	; 0x1574 <LCD_DisplayDecimalNumber+0xba>
    1564:	fe 01       	movw	r30, r28
    1566:	e1 0f       	add	r30, r17
    1568:	f1 1d       	adc	r31, r1
    156a:	80 81       	ld	r24, Z
    156c:	80 5d       	subi	r24, 0xD0	; 208
    156e:	ff de       	rcall	.-514    	; 0x136e <LCD_DisplayChar>
    1570:	11 50       	subi	r17, 0x01	; 1
    1572:	c1 f7       	brne	.-16     	; 0x1564 <LCD_DisplayDecimalNumber+0xaa>
    1574:	2a 96       	adiw	r28, 0x0a	; 10
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	08 95       	ret

00001596 <LCD_ScrollMessage>:
    1596:	af 92       	push	r10
    1598:	bf 92       	push	r11
    159a:	cf 92       	push	r12
    159c:	df 92       	push	r13
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	b8 2e       	mov	r11, r24
    15ac:	6b 01       	movw	r12, r22
    15ae:	80 91 78 02 	lds	r24, 0x0278
    15b2:	8b 15       	cp	r24, r11
    15b4:	10 f4       	brcc	.+4      	; 0x15ba <LCD_ScrollMessage+0x24>
    15b6:	bb 24       	eor	r11, r11
    15b8:	b3 94       	inc	r11
    15ba:	8c e0       	ldi	r24, 0x0C	; 12
    15bc:	1b de       	rcall	.-970    	; 0x11f4 <LCD_CmdWrite>
    15be:	d6 01       	movw	r26, r12
    15c0:	8c 91       	ld	r24, X
    15c2:	88 23       	and	r24, r24
    15c4:	b9 f1       	breq	.+110    	; 0x1634 <LCD_ScrollMessage+0x9e>
    15c6:	d0 e0       	ldi	r29, 0x00	; 0
    15c8:	09 e7       	ldi	r16, 0x79	; 121
    15ca:	12 e0       	ldi	r17, 0x02	; 2
    15cc:	aa 24       	eor	r10, r10
    15ce:	8b 2d       	mov	r24, r11
    15d0:	52 de       	rcall	.-860    	; 0x1276 <LCD_GoToLine>
    15d2:	f8 01       	movw	r30, r16
    15d4:	80 81       	ld	r24, Z
    15d6:	88 23       	and	r24, r24
    15d8:	e9 f0       	breq	.+58     	; 0x1614 <LCD_ScrollMessage+0x7e>
    15da:	ed 2e       	mov	r14, r29
    15dc:	ff 24       	eor	r15, r15
    15de:	f6 01       	movw	r30, r12
    15e0:	ee 0d       	add	r30, r14
    15e2:	ff 1d       	adc	r31, r15
    15e4:	80 81       	ld	r24, Z
    15e6:	88 23       	and	r24, r24
    15e8:	91 f1       	breq	.+100    	; 0x164e <LCD_ScrollMessage+0xb8>
    15ea:	ca 2d       	mov	r28, r10
    15ec:	7f 01       	movw	r14, r30
    15ee:	bf de       	rcall	.-642    	; 0x136e <LCD_DisplayChar>
    15f0:	cf 5f       	subi	r28, 0xFF	; 255
    15f2:	d8 01       	movw	r26, r16
    15f4:	8c 91       	ld	r24, X
    15f6:	c8 17       	cp	r28, r24
    15f8:	68 f4       	brcc	.+26     	; 0x1614 <LCD_ScrollMessage+0x7e>
    15fa:	f7 01       	movw	r30, r14
    15fc:	ec 0f       	add	r30, r28
    15fe:	f1 1d       	adc	r31, r1
    1600:	80 81       	ld	r24, Z
    1602:	88 23       	and	r24, r24
    1604:	a1 f7       	brne	.-24     	; 0x15ee <LCD_ScrollMessage+0x58>
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	b2 de       	rcall	.-668    	; 0x136e <LCD_DisplayChar>
    160a:	cf 5f       	subi	r28, 0xFF	; 255
    160c:	f8 01       	movw	r30, r16
    160e:	80 81       	ld	r24, Z
    1610:	c8 17       	cp	r28, r24
    1612:	c8 f3       	brcs	.-14     	; 0x1606 <LCD_ScrollMessage+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1614:	8f e3       	ldi	r24, 0x3F	; 63
    1616:	9d e0       	ldi	r25, 0x0D	; 13
    1618:	a3 e0       	ldi	r26, 0x03	; 3
    161a:	81 50       	subi	r24, 0x01	; 1
    161c:	90 40       	sbci	r25, 0x00	; 0
    161e:	a0 40       	sbci	r26, 0x00	; 0
    1620:	e1 f7       	brne	.-8      	; 0x161a <LCD_ScrollMessage+0x84>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <LCD_ScrollMessage+0x8e>
    1624:	00 00       	nop
    1626:	df 5f       	subi	r29, 0xFF	; 255
    1628:	f6 01       	movw	r30, r12
    162a:	ed 0f       	add	r30, r29
    162c:	f1 1d       	adc	r31, r1
    162e:	80 81       	ld	r24, Z
    1630:	88 23       	and	r24, r24
    1632:	69 f6       	brne	.-102    	; 0x15ce <LCD_ScrollMessage+0x38>
    1634:	8e e0       	ldi	r24, 0x0E	; 14
    1636:	de dd       	rcall	.-1092   	; 0x11f4 <LCD_CmdWrite>
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	bf 90       	pop	r11
    164a:	af 90       	pop	r10
    164c:	08 95       	ret
    164e:	ca 2d       	mov	r28, r10
    1650:	da cf       	rjmp	.-76     	; 0x1606 <LCD_ScrollMessage+0x70>

00001652 <LCD_DisplayString>:
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	ec 01       	movw	r28, r24
    1658:	88 81       	ld	r24, Y
    165a:	88 23       	and	r24, r24
    165c:	29 f0       	breq	.+10     	; 0x1668 <LCD_DisplayString+0x16>
    165e:	21 96       	adiw	r28, 0x01	; 1
    1660:	86 de       	rcall	.-756    	; 0x136e <LCD_DisplayChar>
    1662:	89 91       	ld	r24, Y+
    1664:	88 23       	and	r24, r24
    1666:	e1 f7       	brne	.-8      	; 0x1660 <LCD_DisplayString+0xe>
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <LCD_Printf>:
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	0f 2e       	mov	r0, r31
    1692:	f2 e1       	ldi	r31, 0x12	; 18
    1694:	cf 2e       	mov	r12, r31
    1696:	dd 24       	eor	r13, r13
    1698:	f0 2d       	mov	r31, r0
    169a:	cc 0e       	add	r12, r28
    169c:	dd 1e       	adc	r13, r29
    169e:	d6 01       	movw	r26, r12
    16a0:	ed 91       	ld	r30, X+
    16a2:	fd 91       	ld	r31, X+
    16a4:	6d 01       	movw	r12, r26
    16a6:	80 81       	ld	r24, Z
    16a8:	88 23       	and	r24, r24
    16aa:	09 f4       	brne	.+2      	; 0x16ae <LCD_Printf+0x40>
    16ac:	f1 c0       	rjmp	.+482    	; 0x1890 <LCD_Printf+0x222>
    16ae:	8f 01       	movw	r16, r30
    16b0:	55 24       	eor	r5, r5
    16b2:	68 94       	set
    16b4:	54 f8       	bld	r5, 4
    16b6:	99 24       	eor	r9, r9
    16b8:	9a 94       	dec	r9
    16ba:	88 24       	eor	r8, r8
    16bc:	85 32       	cpi	r24, 0x25	; 37
    16be:	09 f0       	breq	.+2      	; 0x16c2 <LCD_Printf+0x54>
    16c0:	db c0       	rjmp	.+438    	; 0x1878 <LCD_Printf+0x20a>
    16c2:	58 01       	movw	r10, r16
    16c4:	08 94       	sec
    16c6:	a1 1c       	adc	r10, r1
    16c8:	b1 1c       	adc	r11, r1
    16ca:	f8 01       	movw	r30, r16
    16cc:	81 81       	ldd	r24, Z+1	; 0x01
    16ce:	98 2f       	mov	r25, r24
    16d0:	90 53       	subi	r25, 0x30	; 48
    16d2:	9a 30       	cpi	r25, 0x0A	; 10
    16d4:	80 f4       	brcc	.+32     	; 0x16f6 <LCD_Printf+0x88>
    16d6:	32 96       	adiw	r30, 0x02	; 2
    16d8:	18 2d       	mov	r17, r8
    16da:	11 0f       	add	r17, r17
    16dc:	91 2f       	mov	r25, r17
    16de:	99 0f       	add	r25, r25
    16e0:	99 0f       	add	r25, r25
    16e2:	19 0f       	add	r17, r25
    16e4:	80 53       	subi	r24, 0x30	; 48
    16e6:	18 0f       	add	r17, r24
    16e8:	5f 01       	movw	r10, r30
    16ea:	81 91       	ld	r24, Z+
    16ec:	98 2f       	mov	r25, r24
    16ee:	90 53       	subi	r25, 0x30	; 48
    16f0:	9a 30       	cpi	r25, 0x0A	; 10
    16f2:	98 f3       	brcs	.-26     	; 0x16da <LCD_Printf+0x6c>
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <LCD_Printf+0x8a>
    16f6:	19 2d       	mov	r17, r9
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	85 97       	sbiw	r24, 0x25	; 37
    16fc:	84 35       	cpi	r24, 0x54	; 84
    16fe:	91 05       	cpc	r25, r1
    1700:	08 f0       	brcs	.+2      	; 0x1704 <LCD_Printf+0x96>
    1702:	bc c0       	rjmp	.+376    	; 0x187c <LCD_Printf+0x20e>
    1704:	83 5e       	subi	r24, 0xE3	; 227
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	08 95       	ret
    170e:	86 01       	movw	r16, r12
    1710:	0e 5f       	subi	r16, 0xFE	; 254
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	d6 01       	movw	r26, r12
    1716:	8c 91       	ld	r24, X
    1718:	2a de       	rcall	.-940    	; 0x136e <LCD_DisplayChar>
    171a:	68 01       	movw	r12, r16
    171c:	af c0       	rjmp	.+350    	; 0x187c <LCD_Printf+0x20e>
    171e:	ee 24       	eor	r14, r14
    1720:	ff 24       	eor	r15, r15
    1722:	68 94       	set
    1724:	e1 f8       	bld	r14, 1
    1726:	ec 0c       	add	r14, r12
    1728:	fd 1c       	adc	r15, r13
    172a:	f6 01       	movw	r30, r12
    172c:	c0 80       	ld	r12, Z
    172e:	d1 80       	ldd	r13, Z+1	; 0x01
    1730:	dd 20       	and	r13, r13
    1732:	34 f4       	brge	.+12     	; 0x1740 <LCD_Printf+0xd2>
    1734:	d0 94       	com	r13
    1736:	c1 94       	neg	r12
    1738:	d1 08       	sbc	r13, r1
    173a:	d3 94       	inc	r13
    173c:	8d e2       	ldi	r24, 0x2D	; 45
    173e:	17 de       	rcall	.-978    	; 0x136e <LCD_DisplayChar>
    1740:	b6 01       	movw	r22, r12
    1742:	88 27       	eor	r24, r24
    1744:	77 fd       	sbrc	r23, 7
    1746:	80 95       	com	r24
    1748:	98 2f       	mov	r25, r24
    174a:	41 2f       	mov	r20, r17
    174c:	b6 de       	rcall	.-660    	; 0x14ba <LCD_DisplayDecimalNumber>
    174e:	67 01       	movw	r12, r14
    1750:	95 c0       	rjmp	.+298    	; 0x187c <LCD_Printf+0x20e>
    1752:	66 24       	eor	r6, r6
    1754:	77 24       	eor	r7, r7
    1756:	68 94       	set
    1758:	62 f8       	bld	r6, 2
    175a:	6c 0c       	add	r6, r12
    175c:	7d 1c       	adc	r7, r13
    175e:	d6 01       	movw	r26, r12
    1760:	cd 90       	ld	r12, X+
    1762:	dd 90       	ld	r13, X+
    1764:	ed 90       	ld	r14, X+
    1766:	fc 90       	ld	r15, X
    1768:	13 97       	sbiw	r26, 0x03	; 3
    176a:	ff 20       	and	r15, r15
    176c:	54 f4       	brge	.+20     	; 0x1782 <LCD_Printf+0x114>
    176e:	f0 94       	com	r15
    1770:	e0 94       	com	r14
    1772:	d0 94       	com	r13
    1774:	c0 94       	com	r12
    1776:	c1 1c       	adc	r12, r1
    1778:	d1 1c       	adc	r13, r1
    177a:	e1 1c       	adc	r14, r1
    177c:	f1 1c       	adc	r15, r1
    177e:	8d e2       	ldi	r24, 0x2D	; 45
    1780:	f6 dd       	rcall	.-1044   	; 0x136e <LCD_DisplayChar>
    1782:	c7 01       	movw	r24, r14
    1784:	b6 01       	movw	r22, r12
    1786:	41 2f       	mov	r20, r17
    1788:	98 de       	rcall	.-720    	; 0x14ba <LCD_DisplayDecimalNumber>
    178a:	63 01       	movw	r12, r6
    178c:	77 c0       	rjmp	.+238    	; 0x187c <LCD_Printf+0x20e>
    178e:	ee 24       	eor	r14, r14
    1790:	ff 24       	eor	r15, r15
    1792:	68 94       	set
    1794:	e1 f8       	bld	r14, 1
    1796:	ec 0c       	add	r14, r12
    1798:	fd 1c       	adc	r15, r13
    179a:	f6 01       	movw	r30, r12
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	bc 01       	movw	r22, r24
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	41 2f       	mov	r20, r17
    17a8:	88 de       	rcall	.-752    	; 0x14ba <LCD_DisplayDecimalNumber>
    17aa:	67 01       	movw	r12, r14
    17ac:	67 c0       	rjmp	.+206    	; 0x187c <LCD_Printf+0x20e>
    17ae:	ee 24       	eor	r14, r14
    17b0:	ff 24       	eor	r15, r15
    17b2:	68 94       	set
    17b4:	e2 f8       	bld	r14, 2
    17b6:	ec 0c       	add	r14, r12
    17b8:	fd 1c       	adc	r15, r13
    17ba:	d6 01       	movw	r26, r12
    17bc:	6d 91       	ld	r22, X+
    17be:	7d 91       	ld	r23, X+
    17c0:	8d 91       	ld	r24, X+
    17c2:	9c 91       	ld	r25, X
    17c4:	41 2f       	mov	r20, r17
    17c6:	79 de       	rcall	.-782    	; 0x14ba <LCD_DisplayDecimalNumber>
    17c8:	67 01       	movw	r12, r14
    17ca:	58 c0       	rjmp	.+176    	; 0x187c <LCD_Printf+0x20e>
    17cc:	ee 24       	eor	r14, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	68 94       	set
    17d2:	e1 f8       	bld	r14, 1
    17d4:	ec 0c       	add	r14, r12
    17d6:	fd 1c       	adc	r15, r13
    17d8:	f6 01       	movw	r30, r12
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	bc 01       	movw	r22, r24
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	41 2f       	mov	r20, r17
    17e6:	16 de       	rcall	.-980    	; 0x1414 <LCD_DisplayHexNumber>
    17e8:	67 01       	movw	r12, r14
    17ea:	48 c0       	rjmp	.+144    	; 0x187c <LCD_Printf+0x20e>
    17ec:	ee 24       	eor	r14, r14
    17ee:	ff 24       	eor	r15, r15
    17f0:	68 94       	set
    17f2:	e2 f8       	bld	r14, 2
    17f4:	ec 0c       	add	r14, r12
    17f6:	fd 1c       	adc	r15, r13
    17f8:	d6 01       	movw	r26, r12
    17fa:	6d 91       	ld	r22, X+
    17fc:	7d 91       	ld	r23, X+
    17fe:	8d 91       	ld	r24, X+
    1800:	9c 91       	ld	r25, X
    1802:	41 2f       	mov	r20, r17
    1804:	07 de       	rcall	.-1010   	; 0x1414 <LCD_DisplayHexNumber>
    1806:	67 01       	movw	r12, r14
    1808:	39 c0       	rjmp	.+114    	; 0x187c <LCD_Printf+0x20e>
    180a:	ee 24       	eor	r14, r14
    180c:	ff 24       	eor	r15, r15
    180e:	68 94       	set
    1810:	e1 f8       	bld	r14, 1
    1812:	ec 0c       	add	r14, r12
    1814:	fd 1c       	adc	r15, r13
    1816:	f6 01       	movw	r30, r12
    1818:	80 81       	ld	r24, Z
    181a:	91 81       	ldd	r25, Z+1	; 0x01
    181c:	1f 3f       	cpi	r17, 0xFF	; 255
    181e:	09 f4       	brne	.+2      	; 0x1822 <LCD_Printf+0x1b4>
    1820:	15 2d       	mov	r17, r5
    1822:	bc 01       	movw	r22, r24
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	41 2f       	mov	r20, r17
    182a:	ba dd       	rcall	.-1164   	; 0x13a0 <LCD_DisplayBinaryNumber>
    182c:	67 01       	movw	r12, r14
    182e:	26 c0       	rjmp	.+76     	; 0x187c <LCD_Printf+0x20e>
    1830:	ee 24       	eor	r14, r14
    1832:	ff 24       	eor	r15, r15
    1834:	68 94       	set
    1836:	e2 f8       	bld	r14, 2
    1838:	ec 0c       	add	r14, r12
    183a:	fd 1c       	adc	r15, r13
    183c:	d6 01       	movw	r26, r12
    183e:	6d 91       	ld	r22, X+
    1840:	7d 91       	ld	r23, X+
    1842:	8d 91       	ld	r24, X+
    1844:	9c 91       	ld	r25, X
    1846:	13 97       	sbiw	r26, 0x03	; 3
    1848:	1f 3f       	cpi	r17, 0xFF	; 255
    184a:	09 f4       	brne	.+2      	; 0x184e <LCD_Printf+0x1e0>
    184c:	15 2d       	mov	r17, r5
    184e:	41 2f       	mov	r20, r17
    1850:	a7 dd       	rcall	.-1202   	; 0x13a0 <LCD_DisplayBinaryNumber>
    1852:	67 01       	movw	r12, r14
    1854:	13 c0       	rjmp	.+38     	; 0x187c <LCD_Printf+0x20e>
    1856:	e4 e0       	ldi	r30, 0x04	; 4
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	ce 0e       	add	r12, r30
    185c:	df 1e       	adc	r13, r31
    185e:	0e c0       	rjmp	.+28     	; 0x187c <LCD_Printf+0x20e>
    1860:	f6 01       	movw	r30, r12
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	c8 0e       	add	r12, r24
    1868:	d9 1e       	adc	r13, r25
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	f1 de       	rcall	.-542    	; 0x1652 <LCD_DisplayString>
    1870:	05 c0       	rjmp	.+10     	; 0x187c <LCD_Printf+0x20e>
    1872:	85 e2       	ldi	r24, 0x25	; 37
    1874:	7c dd       	rcall	.-1288   	; 0x136e <LCD_DisplayChar>
    1876:	02 c0       	rjmp	.+4      	; 0x187c <LCD_Printf+0x20e>
    1878:	7a dd       	rcall	.-1292   	; 0x136e <LCD_DisplayChar>
    187a:	58 01       	movw	r10, r16
    187c:	85 01       	movw	r16, r10
    187e:	0f 5f       	subi	r16, 0xFF	; 255
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	d5 01       	movw	r26, r10
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	8c 91       	ld	r24, X
    1888:	11 97       	sbiw	r26, 0x01	; 1
    188a:	88 23       	and	r24, r24
    188c:	09 f0       	breq	.+2      	; 0x1890 <LCD_Printf+0x222>
    188e:	16 cf       	rjmp	.-468    	; 0x16bc <LCD_Printf+0x4e>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	bf 90       	pop	r11
    18a2:	af 90       	pop	r10
    18a4:	9f 90       	pop	r9
    18a6:	8f 90       	pop	r8
    18a8:	7f 90       	pop	r7
    18aa:	6f 90       	pop	r6
    18ac:	5f 90       	pop	r5
    18ae:	08 95       	ret

000018b0 <RTC_Init>:
    18b0:	33 dc       	rcall	.-1946   	; 0x1118 <I2C_Init>
    18b2:	38 dc       	rcall	.-1936   	; 0x1124 <I2C_Start>
    18b4:	80 ed       	ldi	r24, 0xD0	; 208
    18b6:	43 dc       	rcall	.-1914   	; 0x113e <I2C_Write>
    18b8:	87 e0       	ldi	r24, 0x07	; 7
    18ba:	41 dc       	rcall	.-1918   	; 0x113e <I2C_Write>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	3f dc       	rcall	.-1922   	; 0x113e <I2C_Write>
    18c0:	37 dc       	rcall	.-1938   	; 0x1130 <I2C_Stop>
    18c2:	08 95       	ret

000018c4 <RTC_SetTime>:
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	c8 2f       	mov	r28, r24
    18cc:	d6 2f       	mov	r29, r22
    18ce:	14 2f       	mov	r17, r20
    18d0:	29 dc       	rcall	.-1966   	; 0x1124 <I2C_Start>
    18d2:	80 ed       	ldi	r24, 0xD0	; 208
    18d4:	34 dc       	rcall	.-1944   	; 0x113e <I2C_Write>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	32 dc       	rcall	.-1948   	; 0x113e <I2C_Write>
    18da:	81 2f       	mov	r24, r17
    18dc:	30 dc       	rcall	.-1952   	; 0x113e <I2C_Write>
    18de:	8d 2f       	mov	r24, r29
    18e0:	2e dc       	rcall	.-1956   	; 0x113e <I2C_Write>
    18e2:	8c 2f       	mov	r24, r28
    18e4:	2c dc       	rcall	.-1960   	; 0x113e <I2C_Write>
    18e6:	24 dc       	rcall	.-1976   	; 0x1130 <I2C_Stop>
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	08 95       	ret

000018f0 <RTC_SetDate>:
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	18 2f       	mov	r17, r24
    18f8:	d6 2f       	mov	r29, r22
    18fa:	c4 2f       	mov	r28, r20
    18fc:	13 dc       	rcall	.-2010   	; 0x1124 <I2C_Start>
    18fe:	80 ed       	ldi	r24, 0xD0	; 208
    1900:	1e dc       	rcall	.-1988   	; 0x113e <I2C_Write>
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	1c dc       	rcall	.-1992   	; 0x113e <I2C_Write>
    1906:	81 2f       	mov	r24, r17
    1908:	1a dc       	rcall	.-1996   	; 0x113e <I2C_Write>
    190a:	8d 2f       	mov	r24, r29
    190c:	18 dc       	rcall	.-2000   	; 0x113e <I2C_Write>
    190e:	8c 2f       	mov	r24, r28
    1910:	16 dc       	rcall	.-2004   	; 0x113e <I2C_Write>
    1912:	0e dc       	rcall	.-2020   	; 0x1130 <I2C_Stop>
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	08 95       	ret

0000191c <RTC_GetTime>:
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	7c 01       	movw	r14, r24
    192a:	8b 01       	movw	r16, r22
    192c:	ea 01       	movw	r28, r20
    192e:	fa db       	rcall	.-2060   	; 0x1124 <I2C_Start>
    1930:	80 ed       	ldi	r24, 0xD0	; 208
    1932:	05 dc       	rcall	.-2038   	; 0x113e <I2C_Write>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	03 dc       	rcall	.-2042   	; 0x113e <I2C_Write>
    1938:	fb db       	rcall	.-2058   	; 0x1130 <I2C_Stop>
    193a:	f4 db       	rcall	.-2072   	; 0x1124 <I2C_Start>
    193c:	81 ed       	ldi	r24, 0xD1	; 209
    193e:	ff db       	rcall	.-2050   	; 0x113e <I2C_Write>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	04 dc       	rcall	.-2040   	; 0x114c <I2C_Read>
    1944:	88 83       	st	Y, r24
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	01 dc       	rcall	.-2046   	; 0x114c <I2C_Read>
    194a:	f8 01       	movw	r30, r16
    194c:	80 83       	st	Z, r24
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	fd db       	rcall	.-2054   	; 0x114c <I2C_Read>
    1952:	f7 01       	movw	r30, r14
    1954:	80 83       	st	Z, r24
    1956:	ec db       	rcall	.-2088   	; 0x1130 <I2C_Stop>
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	08 95       	ret

00001966 <RTC_GetDate>:
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	ec 01       	movw	r28, r24
    1974:	8b 01       	movw	r16, r22
    1976:	7a 01       	movw	r14, r20
    1978:	d5 db       	rcall	.-2134   	; 0x1124 <I2C_Start>
    197a:	80 ed       	ldi	r24, 0xD0	; 208
    197c:	e0 db       	rcall	.-2112   	; 0x113e <I2C_Write>
    197e:	84 e0       	ldi	r24, 0x04	; 4
    1980:	de db       	rcall	.-2116   	; 0x113e <I2C_Write>
    1982:	d6 db       	rcall	.-2132   	; 0x1130 <I2C_Stop>
    1984:	cf db       	rcall	.-2146   	; 0x1124 <I2C_Start>
    1986:	81 ed       	ldi	r24, 0xD1	; 209
    1988:	da db       	rcall	.-2124   	; 0x113e <I2C_Write>
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	df db       	rcall	.-2114   	; 0x114c <I2C_Read>
    198e:	88 83       	st	Y, r24
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	dc db       	rcall	.-2120   	; 0x114c <I2C_Read>
    1994:	f8 01       	movw	r30, r16
    1996:	80 83       	st	Z, r24
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	d8 db       	rcall	.-2128   	; 0x114c <I2C_Read>
    199c:	f7 01       	movw	r30, r14
    199e:	80 83       	st	Z, r24
    19a0:	c7 db       	rcall	.-2162   	; 0x1130 <I2C_Stop>
    19a2:	df 91       	pop	r29
    19a4:	cf 91       	pop	r28
    19a6:	1f 91       	pop	r17
    19a8:	0f 91       	pop	r16
    19aa:	ff 90       	pop	r15
    19ac:	ef 90       	pop	r14
    19ae:	08 95       	ret

000019b0 <__udivmodqi4>:
    19b0:	99 1b       	sub	r25, r25
    19b2:	79 e0       	ldi	r23, 0x09	; 9
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <__udivmodqi4_ep>

000019b6 <__udivmodqi4_loop>:
    19b6:	99 1f       	adc	r25, r25
    19b8:	96 17       	cp	r25, r22
    19ba:	08 f0       	brcs	.+2      	; 0x19be <__udivmodqi4_ep>
    19bc:	96 1b       	sub	r25, r22

000019be <__udivmodqi4_ep>:
    19be:	88 1f       	adc	r24, r24
    19c0:	7a 95       	dec	r23
    19c2:	c9 f7       	brne	.-14     	; 0x19b6 <__udivmodqi4_loop>
    19c4:	80 95       	com	r24
    19c6:	08 95       	ret

000019c8 <__udivmodsi4>:
    19c8:	a1 e2       	ldi	r26, 0x21	; 33
    19ca:	1a 2e       	mov	r1, r26
    19cc:	aa 1b       	sub	r26, r26
    19ce:	bb 1b       	sub	r27, r27
    19d0:	fd 01       	movw	r30, r26
    19d2:	0d c0       	rjmp	.+26     	; 0x19ee <__udivmodsi4_ep>

000019d4 <__udivmodsi4_loop>:
    19d4:	aa 1f       	adc	r26, r26
    19d6:	bb 1f       	adc	r27, r27
    19d8:	ee 1f       	adc	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	a2 17       	cp	r26, r18
    19de:	b3 07       	cpc	r27, r19
    19e0:	e4 07       	cpc	r30, r20
    19e2:	f5 07       	cpc	r31, r21
    19e4:	20 f0       	brcs	.+8      	; 0x19ee <__udivmodsi4_ep>
    19e6:	a2 1b       	sub	r26, r18
    19e8:	b3 0b       	sbc	r27, r19
    19ea:	e4 0b       	sbc	r30, r20
    19ec:	f5 0b       	sbc	r31, r21

000019ee <__udivmodsi4_ep>:
    19ee:	66 1f       	adc	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	1a 94       	dec	r1
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <__udivmodsi4_loop>
    19fa:	60 95       	com	r22
    19fc:	70 95       	com	r23
    19fe:	80 95       	com	r24
    1a00:	90 95       	com	r25
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	bd 01       	movw	r22, r26
    1a08:	cf 01       	movw	r24, r30
    1a0a:	08 95       	ret

00001a0c <_exit>:
    1a0c:	f8 94       	cli

00001a0e <__stop_program>:
    1a0e:	ff cf       	rjmp	.-2      	; 0x1a0e <__stop_program>

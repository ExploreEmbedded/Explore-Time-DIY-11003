
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000216  00800060  00001a00  00001a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800276  00800276  00001caa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00002400  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023bf  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  000048ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107d  00000000  00000000  000050e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00006164  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d9  00000000  00000000  00006834  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025f4  00000000  00000000  0000700d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00009601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	8a c0       	rjmp	.+276    	; 0x118 <__bad_interrupt>
       4:	89 c0       	rjmp	.+274    	; 0x118 <__bad_interrupt>
       6:	88 c0       	rjmp	.+272    	; 0x118 <__bad_interrupt>
       8:	87 c0       	rjmp	.+270    	; 0x118 <__bad_interrupt>
       a:	86 c0       	rjmp	.+268    	; 0x118 <__bad_interrupt>
       c:	85 c0       	rjmp	.+266    	; 0x118 <__bad_interrupt>
       e:	84 c0       	rjmp	.+264    	; 0x118 <__bad_interrupt>
      10:	83 c0       	rjmp	.+262    	; 0x118 <__bad_interrupt>
      12:	82 c0       	rjmp	.+260    	; 0x118 <__bad_interrupt>
      14:	81 c0       	rjmp	.+258    	; 0x118 <__bad_interrupt>
      16:	80 c0       	rjmp	.+256    	; 0x118 <__bad_interrupt>
      18:	7f c0       	rjmp	.+254    	; 0x118 <__bad_interrupt>
      1a:	7e c0       	rjmp	.+252    	; 0x118 <__bad_interrupt>
      1c:	7d c0       	rjmp	.+250    	; 0x118 <__bad_interrupt>
      1e:	7c c0       	rjmp	.+248    	; 0x118 <__bad_interrupt>
      20:	7b c0       	rjmp	.+246    	; 0x118 <__bad_interrupt>
      22:	7a c0       	rjmp	.+244    	; 0x118 <__bad_interrupt>
      24:	79 c0       	rjmp	.+242    	; 0x118 <__bad_interrupt>
      26:	9d c0       	rjmp	.+314    	; 0x162 <LCD_DisplayBigNum+0x16>
      28:	b4 c0       	rjmp	.+360    	; 0x192 <LCD_DisplayBigNum+0x46>
      2a:	cb c0       	rjmp	.+406    	; 0x1c2 <LCD_DisplayBigNum+0x76>
      2c:	e2 c0       	rjmp	.+452    	; 0x1f2 <LCD_DisplayBigNum+0xa6>
      2e:	f9 c0       	rjmp	.+498    	; 0x222 <LCD_DisplayBigNum+0xd6>
      30:	10 c1       	rjmp	.+544    	; 0x252 <LCD_DisplayBigNum+0x106>
      32:	27 c1       	rjmp	.+590    	; 0x282 <LCD_DisplayBigNum+0x136>
      34:	3e c1       	rjmp	.+636    	; 0x2b2 <LCD_DisplayBigNum+0x166>
      36:	55 c1       	rjmp	.+682    	; 0x2e2 <LCD_DisplayBigNum+0x196>
      38:	6c c1       	rjmp	.+728    	; 0x312 <LCD_DisplayBigNum+0x1c6>
      3a:	13 cc       	rjmp	.-2010   	; 0xfffff862 <__eeprom_end+0xff7ef862>
      3c:	17 cc       	rjmp	.-2002   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      3e:	16 cc       	rjmp	.-2004   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      40:	15 cc       	rjmp	.-2006   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      42:	14 cc       	rjmp	.-2008   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      44:	13 cc       	rjmp	.-2010   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      46:	12 cc       	rjmp	.-2012   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      48:	11 cc       	rjmp	.-2014   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      4a:	10 cc       	rjmp	.-2016   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      4c:	0f cc       	rjmp	.-2018   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      4e:	0e cc       	rjmp	.-2020   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      50:	0d cc       	rjmp	.-2022   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      52:	0c cc       	rjmp	.-2024   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      54:	0b cc       	rjmp	.-2026   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      56:	0a cc       	rjmp	.-2028   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      58:	09 cc       	rjmp	.-2030   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      5a:	08 cc       	rjmp	.-2032   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      5c:	07 cc       	rjmp	.-2034   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      5e:	06 cc       	rjmp	.-2036   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      60:	05 cc       	rjmp	.-2038   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      62:	04 cc       	rjmp	.-2040   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      64:	03 cc       	rjmp	.-2042   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      66:	02 cc       	rjmp	.-2044   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      68:	01 cc       	rjmp	.-2046   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      6a:	00 cc       	rjmp	.-2048   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      6c:	ff cb       	rjmp	.-2050   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      6e:	fe cb       	rjmp	.-2052   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      70:	fd cb       	rjmp	.-2054   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      72:	fc cb       	rjmp	.-2056   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      74:	d5 cb       	rjmp	.-2134   	; 0xfffff820 <__eeprom_end+0xff7ef820>
      76:	43 cb       	rjmp	.-2426   	; 0xfffff6fe <__eeprom_end+0xff7ef6fe>
      78:	64 cb       	rjmp	.-2360   	; 0xfffff742 <__eeprom_end+0xff7ef742>
      7a:	f8 cb       	rjmp	.-2064   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      7c:	e4 cb       	rjmp	.-2104   	; 0xfffff846 <__eeprom_end+0xff7ef846>
      7e:	f6 cb       	rjmp	.-2068   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      80:	f5 cb       	rjmp	.-2070   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      82:	f4 cb       	rjmp	.-2072   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      84:	f3 cb       	rjmp	.-2074   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      86:	f2 cb       	rjmp	.-2076   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      88:	f1 cb       	rjmp	.-2078   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      8a:	f0 cb       	rjmp	.-2080   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      8c:	ef cb       	rjmp	.-2082   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      8e:	ee cb       	rjmp	.-2084   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      90:	ed cb       	rjmp	.-2086   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      92:	ec cb       	rjmp	.-2088   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      94:	eb cb       	rjmp	.-2090   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      96:	dc cb       	rjmp	.-2120   	; 0xfffff850 <__eeprom_end+0xff7ef850>
      98:	e9 cb       	rjmp	.-2094   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      9a:	81 cb       	rjmp	.-2302   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
      9c:	e7 cb       	rjmp	.-2098   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      9e:	e6 cb       	rjmp	.-2100   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      a0:	9d cb       	rjmp	.-2246   	; 0xfffff7dc <__eeprom_end+0xff7ef7dc>
      a2:	e4 cb       	rjmp	.-2104   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      a4:	e3 cb       	rjmp	.-2106   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      a6:	e2 cb       	rjmp	.-2108   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      a8:	e1 cb       	rjmp	.-2110   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      aa:	e0 cb       	rjmp	.-2112   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      ac:	df cb       	rjmp	.-2114   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      ae:	de cb       	rjmp	.-2116   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      b0:	dd cb       	rjmp	.-2118   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      b2:	dc cb       	rjmp	.-2120   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      b4:	a2 cb       	rjmp	.-2236   	; 0xfffff7fa <__eeprom_end+0xff7ef7fa>
      b6:	23 cb       	rjmp	.-2490   	; 0xfffff6fe <__eeprom_end+0xff7ef6fe>
      b8:	2a cb       	rjmp	.-2476   	; 0xfffff70e <__eeprom_end+0xff7ef70e>
      ba:	d8 cb       	rjmp	.-2128   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      bc:	c4 cb       	rjmp	.-2168   	; 0xfffff846 <__eeprom_end+0xff7ef846>
      be:	d6 cb       	rjmp	.-2132   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      c0:	d5 cb       	rjmp	.-2134   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      c2:	d4 cb       	rjmp	.-2136   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      c4:	d3 cb       	rjmp	.-2138   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      c6:	d2 cb       	rjmp	.-2140   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      c8:	d1 cb       	rjmp	.-2142   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      ca:	d0 cb       	rjmp	.-2144   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      cc:	cf cb       	rjmp	.-2146   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      ce:	ce cb       	rjmp	.-2148   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      d0:	cd cb       	rjmp	.-2150   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      d2:	cc cb       	rjmp	.-2152   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      d4:	cb cb       	rjmp	.-2154   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      d6:	bc cb       	rjmp	.-2184   	; 0xfffff850 <__eeprom_end+0xff7ef850>
      d8:	c9 cb       	rjmp	.-2158   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      da:	51 cb       	rjmp	.-2398   	; 0xfffff77e <__eeprom_end+0xff7ef77e>
      dc:	c7 cb       	rjmp	.-2162   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      de:	c6 cb       	rjmp	.-2164   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
      e0:	6d cb       	rjmp	.-2342   	; 0xfffff7bc <__eeprom_end+0xff7ef7bc>

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf e5       	ldi	r28, 0x5F	; 95
      e8:	d4 e0       	ldi	r29, 0x04	; 4
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	12 e0       	ldi	r17, 0x02	; 2
      f0:	a0 e6       	ldi	r26, 0x60	; 96
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	e0 e0       	ldi	r30, 0x00	; 0
      f6:	fa e1       	ldi	r31, 0x1A	; 26
      f8:	02 c0       	rjmp	.+4      	; 0xfe <__do_copy_data+0x10>
      fa:	05 90       	lpm	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	a6 37       	cpi	r26, 0x76	; 118
     100:	b1 07       	cpc	r27, r17
     102:	d9 f7       	brne	.-10     	; 0xfa <__do_copy_data+0xc>

00000104 <__do_clear_bss>:
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	a6 e7       	ldi	r26, 0x76	; 118
     108:	b2 e0       	ldi	r27, 0x02	; 2
     10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
     10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
     10e:	af 37       	cpi	r26, 0x7F	; 127
     110:	b1 07       	cpc	r27, r17
     112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>
     114:	63 d7       	rcall	.+3782   	; 0xfdc <main>
     116:	72 cc       	rjmp	.-1820   	; 0xfffff9fc <__eeprom_end+0xff7ef9fc>

00000118 <__bad_interrupt>:
     118:	73 cf       	rjmp	.-282    	; 0x0 <__vectors>

0000011a <LCD_CreateCC>:

}

//Stores the segment pattern in LCD RAM
void LCD_CreateCC(uint8_t *pattern, uint8_t pos)
{
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	08 2f       	mov	r16, r24
     124:	19 2f       	mov	r17, r25
	uint8_t cnt =0;
	LCD_CmdWrite(0x40+(pos*8));
     126:	86 2f       	mov	r24, r22
     128:	88 0f       	add	r24, r24
     12a:	88 0f       	add	r24, r24
     12c:	88 0f       	add	r24, r24
     12e:	80 5c       	subi	r24, 0xC0	; 192
     130:	59 d8       	rcall	.-3918   	; 0xfffff1e4 <__eeprom_end+0xff7ef1e4>
     132:	c0 2f       	mov	r28, r16
     134:	d1 2f       	mov	r29, r17
     136:	18 e0       	ldi	r17, 0x08	; 8
		for(cnt=0; cnt<8; cnt++)
		{
			lcd_DataWrite(*(pattern+cnt));
     138:	89 91       	ld	r24, Y+
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	fa d8       	rcall	.-3596   	; 0xfffff332 <__eeprom_end+0xff7ef332>
     13e:	11 50       	subi	r17, 0x01	; 1
//Stores the segment pattern in LCD RAM
void LCD_CreateCC(uint8_t *pattern, uint8_t pos)
{
	uint8_t cnt =0;
	LCD_CmdWrite(0x40+(pos*8));
		for(cnt=0; cnt<8; cnt++)
     140:	d9 f7       	brne	.-10     	; 0x138 <LCD_CreateCC+0x1e>
		{
			lcd_DataWrite(*(pattern+cnt));
		}
}
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <LCD_DisplayBigNum>:

void LCD_DisplayBigNum(uint8_t num, uint8_t pos)
{
     14c:	cf 93       	push	r28
     14e:	c6 2f       	mov	r28, r22
	switch(num)
     150:	e8 2f       	mov	r30, r24
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	ea 30       	cpi	r30, 0x0A	; 10
     156:	f1 05       	cpc	r31, r1
     158:	08 f0       	brcs	.+2      	; 0x15c <LCD_DisplayBigNum+0x10>
     15a:	f2 c0       	rjmp	.+484    	; 0x340 <LCD_DisplayBigNum+0x1f4>
     15c:	ed 5e       	subi	r30, 0xED	; 237
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	09 94       	ijmp
	{	
		case 0:
		LCD_SetCursor(1,pos);
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	55 d8       	rcall	.-3926   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(0);
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	e3 d8       	rcall	.-3642   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(1);
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	e0 d8       	rcall	.-3648   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(2);;
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	dd d8       	rcall	.-3654   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	6c 2f       	mov	r22, r28
     17c:	49 d8       	rcall	.-3950   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(3);
     17e:	83 e0       	ldi	r24, 0x03	; 3
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	d7 d8       	rcall	.-3666   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(4);
     184:	84 e0       	ldi	r24, 0x04	; 4
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	d4 d8       	rcall	.-3672   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(5);
     18a:	85 e0       	ldi	r24, 0x05	; 5
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	d1 d8       	rcall	.-3678   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     190:	d7 c0       	rjmp	.+430    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 1:
		LCD_SetCursor(1,pos);
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	3d d8       	rcall	.-3974   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(' ');
     196:	80 e2       	ldi	r24, 0x20	; 32
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	cb d8       	rcall	.-3690   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(' ');
     19c:	80 e2       	ldi	r24, 0x20	; 32
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	c8 d8       	rcall	.-3696   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(255);
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	c5 d8       	rcall	.-3702   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	6c 2f       	mov	r22, r28
     1ac:	31 d8       	rcall	.-3998   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(' ');
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	bf d8       	rcall	.-3714   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(' ');
     1b4:	80 e2       	ldi	r24, 0x20	; 32
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	bc d8       	rcall	.-3720   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(255);
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	b9 d8       	rcall	.-3726   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     1c0:	bf c0       	rjmp	.+382    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 2:
		LCD_SetCursor(1,pos);
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	25 d8       	rcall	.-4022   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(6);
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	b3 d8       	rcall	.-3738   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(6);
     1cc:	86 e0       	ldi	r24, 0x06	; 6
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	b0 d8       	rcall	.-3744   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(2);;
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	ad d8       	rcall	.-3750   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	6c 2f       	mov	r22, r28
     1dc:	19 d8       	rcall	.-4046   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(3);
     1de:	83 e0       	ldi	r24, 0x03	; 3
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	a7 d8       	rcall	.-3762   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(7);
     1e4:	87 e0       	ldi	r24, 0x07	; 7
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	a4 d8       	rcall	.-3768   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(7);
     1ea:	87 e0       	ldi	r24, 0x07	; 7
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	a1 d8       	rcall	.-3774   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     1f0:	a7 c0       	rjmp	.+334    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 3:
		LCD_SetCursor(1,pos);
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0d d8       	rcall	.-4070   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(6);
     1f6:	86 e0       	ldi	r24, 0x06	; 6
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	9b d8       	rcall	.-3786   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(6);
     1fc:	86 e0       	ldi	r24, 0x06	; 6
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	98 d8       	rcall	.-3792   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(2);;
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	95 d8       	rcall	.-3798   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     208:	82 e0       	ldi	r24, 0x02	; 2
     20a:	6c 2f       	mov	r22, r28
     20c:	01 d8       	rcall	.-4094   	; 0xfffff210 <__eeprom_end+0xff7ef210>
		lcd_DataWrite(7);
     20e:	87 e0       	ldi	r24, 0x07	; 7
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	8f d8       	rcall	.-3810   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(7);
     214:	87 e0       	ldi	r24, 0x07	; 7
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	8c d8       	rcall	.-3816   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(5);
     21a:	85 e0       	ldi	r24, 0x05	; 5
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	89 d8       	rcall	.-3822   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     220:	8f c0       	rjmp	.+286    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 4:
		LCD_SetCursor(1,pos);
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	f5 d7       	rcall	.+4074   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(3);
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	83 d8       	rcall	.-3834   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(4);
     22c:	84 e0       	ldi	r24, 0x04	; 4
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	80 d8       	rcall	.-3840   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(2);;
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	7d d8       	rcall	.-3846   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	6c 2f       	mov	r22, r28
     23c:	e9 d7       	rcall	.+4050   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(' ');
     23e:	80 e2       	ldi	r24, 0x20	; 32
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	77 d8       	rcall	.-3858   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(' ');
     244:	80 e2       	ldi	r24, 0x20	; 32
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	74 d8       	rcall	.-3864   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(255);
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	71 d8       	rcall	.-3870   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     250:	77 c0       	rjmp	.+238    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 5:
		LCD_SetCursor(1,pos);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	dd d7       	rcall	.+4026   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(255);
     256:	8f ef       	ldi	r24, 0xFF	; 255
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b d8       	rcall	.-3882   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(6);
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	68 d8       	rcall	.-3888   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(6);;
     262:	86 e0       	ldi	r24, 0x06	; 6
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	65 d8       	rcall	.-3894   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	6c 2f       	mov	r22, r28
     26c:	d1 d7       	rcall	.+4002   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(7);
     26e:	87 e0       	ldi	r24, 0x07	; 7
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	5f d8       	rcall	.-3906   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(7);
     274:	87 e0       	ldi	r24, 0x07	; 7
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	5c d8       	rcall	.-3912   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(5);
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	59 d8       	rcall	.-3918   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     280:	5f c0       	rjmp	.+190    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 6:
		LCD_SetCursor(1,pos);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	c5 d7       	rcall	.+3978   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(8);
     286:	88 e0       	ldi	r24, 0x08	; 8
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	53 d8       	rcall	.-3930   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(6);
     28c:	86 e0       	ldi	r24, 0x06	; 6
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	50 d8       	rcall	.-3936   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(6);;
     292:	86 e0       	ldi	r24, 0x06	; 6
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	4d d8       	rcall	.-3942   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	6c 2f       	mov	r22, r28
     29c:	b9 d7       	rcall	.+3954   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(3);
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	47 d8       	rcall	.-3954   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(7);
     2a4:	87 e0       	ldi	r24, 0x07	; 7
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	44 d8       	rcall	.-3960   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(5);
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	41 d8       	rcall	.-3966   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     2b0:	47 c0       	rjmp	.+142    	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 7:
		LCD_SetCursor(1,pos);
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	ad d7       	rcall	.+3930   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(1);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	3b d8       	rcall	.-3978   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(1);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	38 d8       	rcall	.-3984   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(2);;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	35 d8       	rcall	.-3990   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		LCD_SetCursor(2,pos);
     2c8:	82 e0       	ldi	r24, 0x02	; 2
     2ca:	6c 2f       	mov	r22, r28
     2cc:	a1 d7       	rcall	.+3906   	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(' ');
     2ce:	80 e2       	ldi	r24, 0x20	; 32
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	2f d8       	rcall	.-4002   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(8);
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	2c d8       	rcall	.-4008   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		lcd_DataWrite(' ');
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	29 d8       	rcall	.-4014   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		break;
     2e0:	2f c0       	rjmp	.+94     	; 0x340 <LCD_DisplayBigNum+0x1f4>
		
		case 8:
		  LCD_SetCursor(1,pos); 
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	95 d7       	rcall	.+3882   	; 0x1210 <LCD_SetCursor>
		  lcd_DataWrite(0);  
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	23 d8       	rcall	.-4026   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  lcd_DataWrite(6); 
     2ec:	86 e0       	ldi	r24, 0x06	; 6
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	20 d8       	rcall	.-4032   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  lcd_DataWrite(2);;
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	1d d8       	rcall	.-4038   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  LCD_SetCursor(2,pos);
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	6c 2f       	mov	r22, r28
     2fc:	89 d7       	rcall	.+3858   	; 0x1210 <LCD_SetCursor>
		  lcd_DataWrite(3);  
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	17 d8       	rcall	.-4050   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  lcd_DataWrite(7);  
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	14 d8       	rcall	.-4056   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  lcd_DataWrite(5);
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	11 d8       	rcall	.-4062   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  break; 	  
     310:	17 c0       	rjmp	.+46     	; 0x340 <LCD_DisplayBigNum+0x1f4>
		  case 9:
		  LCD_SetCursor(1,pos);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	7d d7       	rcall	.+3834   	; 0x1210 <LCD_SetCursor>
		  lcd_DataWrite(8);
     316:	88 e0       	ldi	r24, 0x08	; 8
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0b d8       	rcall	.-4074   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  lcd_DataWrite(6);
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	08 d8       	rcall	.-4080   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  lcd_DataWrite(2);
     322:	82 e0       	ldi	r24, 0x02	; 2
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	05 d8       	rcall	.-4086   	; 0xfffff332 <__eeprom_end+0xff7ef332>
		  LCD_SetCursor(2,pos);
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	6c 2f       	mov	r22, r28
     32c:	71 d7       	rcall	.+3810   	; 0x1210 <LCD_SetCursor>
		  lcd_DataWrite(' ');
     32e:	80 e2       	ldi	r24, 0x20	; 32
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	ff d7       	rcall	.+4094   	; 0x1332 <lcd_DataWrite>
		  lcd_DataWrite(' ');
     334:	80 e2       	ldi	r24, 0x20	; 32
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	fc d7       	rcall	.+4088   	; 0x1332 <lcd_DataWrite>
		  lcd_DataWrite(255);	
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	f9 d7       	rcall	.+4082   	; 0x1332 <lcd_DataWrite>
		  break;
		default:break; 		
	}	
}
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <LCD_DisplayMenu>:
		LCD_Printf("    %2d/%2d/%2d",digit0,digit1,digit2);
	}
}

uint8_t LCD_DisplayMenu()
{ 
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
	int8_t keycount=0;
	LCD_Clear();
     358:	95 d7       	rcall	.+3882   	; 0x1284 <LCD_Clear>
	LCD_GoToLine(1);
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	84 d7       	rcall	.+3848   	; 0x1266 <LCD_GoToLine>
	LCD_DisplayString("    Settings    ");
     35e:	80 e6       	ldi	r24, 0x60	; 96
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	6f d9       	rcall	.-3362   	; 0xfffff642 <__eeprom_end+0xff7ef642>
	}
}

uint8_t LCD_DisplayMenu()
{ 
	int8_t keycount=0;
     364:	c0 e0       	ldi	r28, 0x00	; 0
			_delay_ms(100);
		}
	
		if((keycount>=menusize)||(keycount <= -menusize))
		{
			keycount=0;
     366:	d0 e0       	ldi	r29, 0x00	; 0
			//option shows the last option on the menu
			keycount += menusize;   
		}			
		
		LCD_GoToLine(2);
		LCD_DisplayString("                "); //clear second line
     368:	0f 2e       	mov	r0, r31
     36a:	f1 e7       	ldi	r31, 0x71	; 113
     36c:	cf 2e       	mov	r12, r31
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	df 2e       	mov	r13, r31
     372:	f0 2d       	mov	r31, r0
		//set cursor at the center of of line 2 depending on string size. 
		LCD_SetCursor(2,(14-strlen(settings[keycount]))/2); 
     374:	0f 2e       	mov	r0, r31
     376:	fe e0       	ldi	r31, 0x0E	; 14
     378:	ef 2e       	mov	r14, r31
     37a:	ff 24       	eor	r15, r15
     37c:	f0 2d       	mov	r31, r0
		LCD_Printf("<%s>", settings[keycount]);
     37e:	0f 2e       	mov	r0, r31
     380:	f2 e8       	ldi	r31, 0x82	; 130
     382:	af 2e       	mov	r10, r31
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	bf 2e       	mov	r11, r31
     388:	f0 2d       	mov	r31, r0
	LCD_Clear();
	LCD_GoToLine(1);
	LCD_DisplayString("    Settings    ");
	do
	{       
		if (util_IsBitCleared(Button, cancel))
     38a:	82 9b       	sbis	0x10, 2	; 16
     38c:	63 c0       	rjmp	.+198    	; 0x454 <LCD_DisplayMenu+0x110>
		{
		   return (-1); 
		}
		
		if(util_IsBitCleared(Button, up))
     38e:	85 99       	sbic	0x10, 5	; 16
     390:	0a c0       	rjmp	.+20     	; 0x3a6 <LCD_DisplayMenu+0x62>
		{
			keycount++;
     392:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	90 e7       	ldi	r25, 0x70	; 112
     398:	a2 e0       	ldi	r26, 0x02	; 2
     39a:	81 50       	subi	r24, 0x01	; 1
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	a0 40       	sbci	r26, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <LCD_DisplayMenu+0x56>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LCD_DisplayMenu+0x60>
     3a4:	00 00       	nop
			_delay_ms(100);
		}
		
		if(util_IsBitCleared(Button, down))
     3a6:	84 99       	sbic	0x10, 4	; 16
     3a8:	0a c0       	rjmp	.+20     	; 0x3be <LCD_DisplayMenu+0x7a>
		{
			keycount--;
     3aa:	c1 50       	subi	r28, 0x01	; 1
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	90 e7       	ldi	r25, 0x70	; 112
     3b0:	a2 e0       	ldi	r26, 0x02	; 2
     3b2:	81 50       	subi	r24, 0x01	; 1
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	a0 40       	sbci	r26, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <LCD_DisplayMenu+0x6e>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <LCD_DisplayMenu+0x78>
     3bc:	00 00       	nop
			_delay_ms(100);
		}
	
		if((keycount>=menusize)||(keycount <= -menusize))
     3be:	8c 2f       	mov	r24, r28
     3c0:	8c 5f       	subi	r24, 0xFC	; 252
     3c2:	89 30       	cpi	r24, 0x09	; 9
     3c4:	20 f4       	brcc	.+8      	; 0x3ce <LCD_DisplayMenu+0x8a>
		{
			keycount=0;
		}
		
		if(keycount<0)
     3c6:	cc 23       	and	r28, r28
     3c8:	1c f4       	brge	.+6      	; 0x3d0 <LCD_DisplayMenu+0x8c>
		{
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			keycount += menusize;   
     3ca:	cb 5f       	subi	r28, 0xFB	; 251
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <LCD_DisplayMenu+0x8c>
			_delay_ms(100);
		}
	
		if((keycount>=menusize)||(keycount <= -menusize))
		{
			keycount=0;
     3ce:	cd 2f       	mov	r28, r29
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			keycount += menusize;   
		}			
		
		LCD_GoToLine(2);
     3d0:	82 e0       	ldi	r24, 0x02	; 2
     3d2:	49 d7       	rcall	.+3730   	; 0x1266 <LCD_GoToLine>
		LCD_DisplayString("                "); //clear second line
     3d4:	c6 01       	movw	r24, r12
     3d6:	35 d9       	rcall	.-3478   	; 0xfffff642 <__eeprom_end+0xff7ef642>
		//set cursor at the center of of line 2 depending on string size. 
		LCD_SetCursor(2,(14-strlen(settings[keycount]))/2); 
     3d8:	0c 2f       	mov	r16, r28
     3da:	11 27       	eor	r17, r17
     3dc:	07 fd       	sbrc	r16, 7
     3de:	10 95       	com	r17
     3e0:	02 95       	swap	r16
     3e2:	12 95       	swap	r17
     3e4:	10 7f       	andi	r17, 0xF0	; 240
     3e6:	10 27       	eor	r17, r16
     3e8:	00 7f       	andi	r16, 0xF0	; 240
     3ea:	10 27       	eor	r17, r16
     3ec:	0f 51       	subi	r16, 0x1F	; 31
     3ee:	1e 4f       	sbci	r17, 0xFE	; 254
     3f0:	a0 2f       	mov	r26, r16
     3f2:	b1 2f       	mov	r27, r17
     3f4:	fd 01       	movw	r30, r26
     3f6:	01 90       	ld	r0, Z+
     3f8:	00 20       	and	r0, r0
     3fa:	e9 f7       	brne	.-6      	; 0x3f6 <LCD_DisplayMenu+0xb2>
     3fc:	31 97       	sbiw	r30, 0x01	; 1
     3fe:	ea 1b       	sub	r30, r26
     400:	fb 0b       	sbc	r31, r27
     402:	b7 01       	movw	r22, r14
     404:	6e 1b       	sub	r22, r30
     406:	7f 0b       	sbc	r23, r31
     408:	76 95       	lsr	r23
     40a:	67 95       	ror	r22
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	00 d7       	rcall	.+3584   	; 0x1210 <LCD_SetCursor>
		LCD_Printf("<%s>", settings[keycount]);
     410:	00 d0       	rcall	.+0      	; 0x412 <LCD_DisplayMenu+0xce>
     412:	00 d0       	rcall	.+0      	; 0x414 <LCD_DisplayMenu+0xd0>
     414:	ad b7       	in	r26, 0x3d	; 61
     416:	be b7       	in	r27, 0x3e	; 62
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	bc 92       	st	X, r11
     41c:	ae 92       	st	-X, r10
     41e:	11 97       	sbiw	r26, 0x01	; 1
     420:	14 96       	adiw	r26, 0x04	; 4
     422:	1c 93       	st	X, r17
     424:	0e 93       	st	-X, r16
     426:	13 97       	sbiw	r26, 0x03	; 3
     428:	1a d9       	rcall	.-3532   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	90 e7       	ldi	r25, 0x70	; 112
     42e:	a2 e0       	ldi	r26, 0x02	; 2
     430:	81 50       	subi	r24, 0x01	; 1
     432:	90 40       	sbci	r25, 0x00	; 0
     434:	a0 40       	sbci	r26, 0x00	; 0
     436:	e1 f7       	brne	.-8      	; 0x430 <LCD_DisplayMenu+0xec>
     438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_DisplayMenu+0xf6>
     43a:	00 00       	nop
		_delay_ms(100);  //make menu visible or else will overwrite at fast speed
					 
      }while(util_IsBitSet(Button,select));
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	83 99       	sbic	0x10, 3	; 16
     446:	a1 cf       	rjmp	.-190    	; 0x38a <LCD_DisplayMenu+0x46>
	  
	 do 
	{
		if (util_IsBitCleared(Button, cancel))
     448:	82 9b       	sbis	0x10, 2	; 16
     44a:	06 c0       	rjmp	.+12     	; 0x458 <LCD_DisplayMenu+0x114>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     44c:	83 99       	sbic	0x10, 3	; 16
     44e:	fc cf       	rjmp	.-8      	; 0x448 <LCD_DisplayMenu+0x104>
	
	return (keycount); 
     450:	8c 2f       	mov	r24, r28
     452:	03 c0       	rjmp	.+6      	; 0x45a <LCD_DisplayMenu+0x116>
	LCD_DisplayString("    Settings    ");
	do
	{       
		if (util_IsBitCleared(Button, cancel))
		{
		   return (-1); 
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	01 c0       	rjmp	.+2      	; 0x45a <LCD_DisplayMenu+0x116>
	  
	 do 
	{
		if (util_IsBitCleared(Button, cancel))
		{
		   return (-1); ; 
     458:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}while(util_IsBitSet(Button, select));
	
	return (keycount); 
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	af 90       	pop	r10
     46e:	08 95       	ret

00000470 <checkAlarm>:
	_delay_ms(2000);
   
}

void checkAlarm()
{
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	00 d0       	rcall	.+0      	; 0x47a <checkAlarm+0xa>
     47a:	0f 92       	push	r0
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
	uint8_t b_hour, b_min, b_sec;

	RTC_GetTime(&b_hour,&b_min,&b_sec);
     480:	ce 01       	movw	r24, r28
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	be 01       	movw	r22, r28
     486:	6e 5f       	subi	r22, 0xFE	; 254
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	ae 01       	movw	r20, r28
     48c:	4d 5f       	subi	r20, 0xFD	; 253
     48e:	5f 4f       	sbci	r21, 0xFF	; 255
     490:	3d da       	rcall	.-2950   	; 0xfffff90c <__eeprom_end+0xff7ef90c>
	
	if ( (alarm_hour == b_hour) & ( alarm_min == b_min) & ( alarm_sec == b_sec) ) 
     492:	21 e0       	ldi	r18, 0x01	; 1
     494:	90 91 77 02 	lds	r25, 0x0277
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	98 13       	cpse	r25, r24
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	30 91 79 02 	lds	r19, 0x0279
     4a4:	9a 81       	ldd	r25, Y+2	; 0x02
     4a6:	39 13       	cpse	r19, r25
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	28 23       	and	r18, r24
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	50 91 76 02 	lds	r21, 0x0276
     4b6:	4b 81       	ldd	r20, Y+3	; 0x03
     4b8:	54 17       	cp	r21, r20
     4ba:	11 f0       	breq	.+4      	; 0x4c0 <checkAlarm+0x50>
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	82 23       	and	r24, r18
     4c2:	93 23       	and	r25, r19
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	89 f0       	breq	.+34     	; 0x4ea <checkAlarm+0x7a>
	{
		LCD_Clear();
     4c8:	dd d6       	rcall	.+3514   	; 0x1284 <LCD_Clear>
		do
		{		
			LCD_GoToLine(1);
			LCD_Printf("Press Cancel to Stop Alarm");
     4ca:	07 e8       	ldi	r16, 0x87	; 135
     4cc:	10 e0       	ldi	r17, 0x00	; 0
	if ( (alarm_hour == b_hour) & ( alarm_min == b_min) & ( alarm_sec == b_sec) ) 
	{
		LCD_Clear();
		do
		{		
			LCD_GoToLine(1);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	ca d6       	rcall	.+3476   	; 0x1266 <LCD_GoToLine>
			LCD_Printf("Press Cancel to Stop Alarm");
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <checkAlarm+0x64>
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	12 83       	std	Z+2, r17	; 0x02
     4da:	01 83       	std	Z+1, r16	; 0x01
     4dc:	c0 d8       	rcall	.-3712   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
		}while(util_IsBitSet(Button, cancel));
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	82 99       	sbic	0x10, 2	; 16
     4e4:	f4 cf       	rjmp	.-24     	; 0x4ce <checkAlarm+0x5e>
		
		util_BitClear(buzzer_port,buzzer_pin);
     4e6:	c3 98       	cbi	0x18, 3	; 24
		LCD_Clear();
     4e8:	cd d6       	rcall	.+3482   	; 0x1284 <LCD_Clear>
	}				
}
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <setDisplayStyle>:


void setDisplayStyle()
{	
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
	LCD_Clear();
     502:	c0 d6       	rcall	.+3456   	; 0x1284 <LCD_Clear>
	LCD_GoToLine(1);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	af d6       	rcall	.+3422   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("  Display-Style ");
     508:	00 d0       	rcall	.+0      	; 0x50a <setDisplayStyle+0x10>
     50a:	82 ea       	ldi	r24, 0xA2	; 162
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	ad b7       	in	r26, 0x3d	; 61
     510:	be b7       	in	r27, 0x3e	; 62
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	9c 93       	st	X, r25
     516:	8e 93       	st	-X, r24
     518:	11 97       	sbiw	r26, 0x01	; 1
     51a:	a1 d8       	rcall	.-3774   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
		{
			LCD_Printf("  <Time + Date>  ");
		}
		else
		{
			LCD_Printf("   <Only Time>  ");
     520:	c5 ec       	ldi	r28, 0xC5	; 197
     522:	d0 e0       	ldi	r29, 0x00	; 0
			Display_Style += 2;   
		}	

		if(Display_Style == 1)
		{
			LCD_Printf("  <Time + Date>  ");
     524:	03 eb       	ldi	r16, 0xB3	; 179
     526:	10 e0       	ldi	r17, 0x00	; 0
	LCD_GoToLine(1);
	LCD_Printf("  Display-Style ");
	
	do 
	{
		LCD_GoToLine(2);
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	9d d6       	rcall	.+3386   	; 0x1266 <LCD_GoToLine>
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	90 e7       	ldi	r25, 0x70	; 112
     530:	a2 e0       	ldi	r26, 0x02	; 2
     532:	81 50       	subi	r24, 0x01	; 1
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	a0 40       	sbci	r26, 0x00	; 0
     538:	e1 f7       	brne	.-8      	; 0x532 <setDisplayStyle+0x38>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <setDisplayStyle+0x42>
     53c:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     53e:	82 9b       	sbis	0x10, 2	; 16
     540:	59 c0       	rjmp	.+178    	; 0x5f4 <setDisplayStyle+0xfa>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     542:	85 99       	sbic	0x10, 5	; 16
     544:	0e c0       	rjmp	.+28     	; 0x562 <setDisplayStyle+0x68>
		{
			Display_Style++;
     546:	80 91 78 02 	lds	r24, 0x0278
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 93 78 02 	sts	0x0278, r24
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	91 ee       	ldi	r25, 0xE1	; 225
     554:	a4 e0       	ldi	r26, 0x04	; 4
     556:	81 50       	subi	r24, 0x01	; 1
     558:	90 40       	sbci	r25, 0x00	; 0
     55a:	a0 40       	sbci	r26, 0x00	; 0
     55c:	e1 f7       	brne	.-8      	; 0x556 <setDisplayStyle+0x5c>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <setDisplayStyle+0x66>
     560:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     562:	84 99       	sbic	0x10, 4	; 16
     564:	0e c0       	rjmp	.+28     	; 0x582 <setDisplayStyle+0x88>
		{
			Display_Style--;
     566:	80 91 78 02 	lds	r24, 0x0278
     56a:	81 50       	subi	r24, 0x01	; 1
     56c:	80 93 78 02 	sts	0x0278, r24
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	91 ee       	ldi	r25, 0xE1	; 225
     574:	a4 e0       	ldi	r26, 0x04	; 4
     576:	81 50       	subi	r24, 0x01	; 1
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	a0 40       	sbci	r26, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <setDisplayStyle+0x7c>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <setDisplayStyle+0x86>
     580:	00 00       	nop
			_delay_ms(200);
		}
			
		if((Display_Style >= 2)||(Display_Style <= -2))
     582:	80 91 78 02 	lds	r24, 0x0278
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	18 f0       	brcs	.+6      	; 0x590 <setDisplayStyle+0x96>
		{
			Display_Style = 0;
     58a:	10 92 78 02 	sts	0x0278, r1
     58e:	0d c0       	rjmp	.+26     	; 0x5aa <setDisplayStyle+0xb0>
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			Display_Style += 2;   
		}	

		if(Display_Style == 1)
     590:	81 30       	cpi	r24, 0x01	; 1
     592:	59 f4       	brne	.+22     	; 0x5aa <setDisplayStyle+0xb0>
		{
			LCD_Printf("  <Time + Date>  ");
     594:	00 d0       	rcall	.+0      	; 0x596 <setDisplayStyle+0x9c>
     596:	ad b7       	in	r26, 0x3d	; 61
     598:	be b7       	in	r27, 0x3e	; 62
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	1c 93       	st	X, r17
     59e:	0e 93       	st	-X, r16
     5a0:	11 97       	sbiw	r26, 0x01	; 1
     5a2:	5d d8       	rcall	.-3910   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <setDisplayStyle+0xc0>
		}
		else
		{
			LCD_Printf("   <Only Time>  ");
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <setDisplayStyle+0xb2>
     5ac:	ed b7       	in	r30, 0x3d	; 61
     5ae:	fe b7       	in	r31, 0x3e	; 62
     5b0:	d2 83       	std	Z+2, r29	; 0x02
     5b2:	c1 83       	std	Z+1, r28	; 0x01
     5b4:	54 d8       	rcall	.-3928   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
		}		
	} while (util_IsBitSet(Button, select));
     5ba:	83 99       	sbic	0x10, 3	; 16
     5bc:	b5 cf       	rjmp	.-150    	; 0x528 <setDisplayStyle+0x2e>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     5be:	82 9b       	sbis	0x10, 2	; 16
     5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <setDisplayStyle+0xfa>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));	
     5c2:	83 99       	sbic	0x10, 3	; 16
     5c4:	fc cf       	rjmp	.-8      	; 0x5be <setDisplayStyle+0xc4>
	
	LCD_GoToLine(1);
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	4e d6       	rcall	.+3228   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("  Display-Style \n    Updated     ");
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <setDisplayStyle+0xd2>
     5cc:	86 ed       	ldi	r24, 0xD6	; 214
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	ad b7       	in	r26, 0x3d	; 61
     5d2:	be b7       	in	r27, 0x3e	; 62
     5d4:	12 96       	adiw	r26, 0x02	; 2
     5d6:	9c 93       	st	X, r25
     5d8:	8e 93       	st	-X, r24
     5da:	11 97       	sbiw	r26, 0x01	; 1
     5dc:	40 d8       	rcall	.-3968   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	93 ed       	ldi	r25, 0xD3	; 211
     5e2:	a0 e3       	ldi	r26, 0x30	; 48
     5e4:	81 50       	subi	r24, 0x01	; 1
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	a0 40       	sbci	r26, 0x00	; 0
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <setDisplayStyle+0xea>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <setDisplayStyle+0xf4>
     5ee:	00 00       	nop
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
	_delay_ms(2000);
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	08 95       	ret

000005fe <setTimeFormat>:


void setTimeFormat()
{
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
	LCD_Clear();
     606:	3e d6       	rcall	.+3196   	; 0x1284 <LCD_Clear>
	LCD_GoToLine(1);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	2d d6       	rcall	.+3162   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("  Time Format   ");
     60c:	00 d0       	rcall	.+0      	; 0x60e <setTimeFormat+0x10>
     60e:	88 ef       	ldi	r24, 0xF8	; 248
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	ad b7       	in	r26, 0x3d	; 61
     614:	be b7       	in	r27, 0x3e	; 62
     616:	12 96       	adiw	r26, 0x02	; 2
     618:	9c 93       	st	X, r25
     61a:	8e 93       	st	-X, r24
     61c:	11 97       	sbiw	r26, 0x01	; 1
     61e:	1f d8       	rcall	.-4034   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
		{
			LCD_Printf("   <12 Hours>   ");
		}
		else
		{
			LCD_Printf("   <24 Hours>   ");
     624:	ca e1       	ldi	r28, 0x1A	; 26
     626:	d1 e0       	ldi	r29, 0x01	; 1
			Time_Format += 2;   
		}		

		if( Time_Format == 1 )
		{
			LCD_Printf("   <12 Hours>   ");
     628:	09 e0       	ldi	r16, 0x09	; 9
     62a:	11 e0       	ldi	r17, 0x01	; 1
	LCD_Clear();
	LCD_GoToLine(1);
	LCD_Printf("  Time Format   ");
	do 
	{
		LCD_GoToLine(2);
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	1b d6       	rcall	.+3126   	; 0x1266 <LCD_GoToLine>
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	90 e7       	ldi	r25, 0x70	; 112
     634:	a2 e0       	ldi	r26, 0x02	; 2
     636:	81 50       	subi	r24, 0x01	; 1
     638:	90 40       	sbci	r25, 0x00	; 0
     63a:	a0 40       	sbci	r26, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <setTimeFormat+0x38>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <setTimeFormat+0x42>
     640:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     642:	82 9b       	sbis	0x10, 2	; 16
     644:	59 c0       	rjmp	.+178    	; 0x6f8 <setTimeFormat+0xfa>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     646:	85 99       	sbic	0x10, 5	; 16
     648:	0e c0       	rjmp	.+28     	; 0x666 <setTimeFormat+0x68>
		{
			Time_Format++;		
     64a:	80 91 e0 01 	lds	r24, 0x01E0
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	80 93 e0 01 	sts	0x01E0, r24
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	91 ee       	ldi	r25, 0xE1	; 225
     658:	a4 e0       	ldi	r26, 0x04	; 4
     65a:	81 50       	subi	r24, 0x01	; 1
     65c:	90 40       	sbci	r25, 0x00	; 0
     65e:	a0 40       	sbci	r26, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <setTimeFormat+0x5c>
     662:	00 c0       	rjmp	.+0      	; 0x664 <setTimeFormat+0x66>
     664:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     666:	84 99       	sbic	0x10, 4	; 16
     668:	0e c0       	rjmp	.+28     	; 0x686 <setTimeFormat+0x88>
		{
			Time_Format--;
     66a:	80 91 e0 01 	lds	r24, 0x01E0
     66e:	81 50       	subi	r24, 0x01	; 1
     670:	80 93 e0 01 	sts	0x01E0, r24
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	91 ee       	ldi	r25, 0xE1	; 225
     678:	a4 e0       	ldi	r26, 0x04	; 4
     67a:	81 50       	subi	r24, 0x01	; 1
     67c:	90 40       	sbci	r25, 0x00	; 0
     67e:	a0 40       	sbci	r26, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <setTimeFormat+0x7c>
     682:	00 c0       	rjmp	.+0      	; 0x684 <setTimeFormat+0x86>
     684:	00 00       	nop
			_delay_ms(200);
		}
			
		if((Time_Format >= 2)||(Time_Format <= -2))
     686:	80 91 e0 01 	lds	r24, 0x01E0
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	18 f0       	brcs	.+6      	; 0x694 <setTimeFormat+0x96>
		{
			Time_Format = 0;
     68e:	10 92 e0 01 	sts	0x01E0, r1
     692:	0d c0       	rjmp	.+26     	; 0x6ae <setTimeFormat+0xb0>
			//make menu index circular. i.e decrement from first 
			//option shows the last option on the menu
			Time_Format += 2;   
		}		

		if( Time_Format == 1 )
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	59 f4       	brne	.+22     	; 0x6ae <setTimeFormat+0xb0>
		{
			LCD_Printf("   <12 Hours>   ");
     698:	00 d0       	rcall	.+0      	; 0x69a <setTimeFormat+0x9c>
     69a:	ad b7       	in	r26, 0x3d	; 61
     69c:	be b7       	in	r27, 0x3e	; 62
     69e:	12 96       	adiw	r26, 0x02	; 2
     6a0:	1c 93       	st	X, r17
     6a2:	0e 93       	st	-X, r16
     6a4:	11 97       	sbiw	r26, 0x01	; 1
     6a6:	db d7       	rcall	.+4022   	; 0x165e <LCD_Printf>
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <setTimeFormat+0xc0>
		}
		else
		{
			LCD_Printf("   <24 Hours>   ");
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <setTimeFormat+0xb2>
     6b0:	ed b7       	in	r30, 0x3d	; 61
     6b2:	fe b7       	in	r31, 0x3e	; 62
     6b4:	d2 83       	std	Z+2, r29	; 0x02
     6b6:	c1 83       	std	Z+1, r28	; 0x01
     6b8:	d2 d7       	rcall	.+4004   	; 0x165e <LCD_Printf>
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
		}		
	} while (util_IsBitSet(Button, select));
     6be:	83 99       	sbic	0x10, 3	; 16
     6c0:	b5 cf       	rjmp	.-150    	; 0x62c <setTimeFormat+0x2e>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     6c2:	82 9b       	sbis	0x10, 2	; 16
     6c4:	19 c0       	rjmp	.+50     	; 0x6f8 <setTimeFormat+0xfa>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     6c6:	83 99       	sbic	0x10, 3	; 16
     6c8:	fc cf       	rjmp	.-8      	; 0x6c2 <setTimeFormat+0xc4>
	
	LCD_GoToLine(1);
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	cc d5       	rcall	.+2968   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("  Time Format   \n    Updated     ");
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <setTimeFormat+0xd2>
     6d0:	8b e2       	ldi	r24, 0x2B	; 43
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	ad b7       	in	r26, 0x3d	; 61
     6d6:	be b7       	in	r27, 0x3e	; 62
     6d8:	12 96       	adiw	r26, 0x02	; 2
     6da:	9c 93       	st	X, r25
     6dc:	8e 93       	st	-X, r24
     6de:	11 97       	sbiw	r26, 0x01	; 1
     6e0:	be d7       	rcall	.+3964   	; 0x165e <LCD_Printf>
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	93 ed       	ldi	r25, 0xD3	; 211
     6e6:	a0 e3       	ldi	r26, 0x30	; 48
     6e8:	81 50       	subi	r24, 0x01	; 1
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	a0 40       	sbci	r26, 0x00	; 0
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <setTimeFormat+0xea>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <setTimeFormat+0xf4>
     6f2:	00 00       	nop
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
	_delay_ms(2000);
	
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	08 95       	ret

00000702 <dec2bcd>:

// Convert Decimal to Binary Coded Decimal (BCD)
uint8_t dec2bcd(uint8_t num)
{
	return ((num/10 * 16) + (num % 10));
     702:	6a e0       	ldi	r22, 0x0A	; 10
     704:	4d d9       	rcall	.-3430   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
     706:	82 95       	swap	r24
     708:	80 7f       	andi	r24, 0xF0	; 240
}
     70a:	89 0f       	add	r24, r25
     70c:	08 95       	ret

0000070e <bcd2dec>:
// Convert Binary Coded Decimal (BCD) to Decimal
uint8_t bcd2dec(uint8_t num)
{
	return ((num/16 * 10) + (num % 16));
     70e:	98 2f       	mov	r25, r24
     710:	92 95       	swap	r25
     712:	9f 70       	andi	r25, 0x0F	; 15
     714:	99 0f       	add	r25, r25
     716:	29 2f       	mov	r18, r25
     718:	22 0f       	add	r18, r18
     71a:	22 0f       	add	r18, r18
     71c:	92 0f       	add	r25, r18
     71e:	8f 70       	andi	r24, 0x0F	; 15
     720:	89 0f       	add	r24, r25
     722:	08 95       	ret

00000724 <setAlarm>:
   _delay_ms(2000);
	  
}

void setAlarm()
{
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
 
	uint8_t d_hour, d_min, d_sec;
	
	d_hour = bcd2dec(alarm_hour);
     730:	80 91 77 02 	lds	r24, 0x0277
     734:	ec df       	rcall	.-40     	; 0x70e <bcd2dec>
     736:	c8 2f       	mov	r28, r24
	d_min = bcd2dec(alarm_min);
     738:	80 91 79 02 	lds	r24, 0x0279
     73c:	e8 df       	rcall	.-48     	; 0x70e <bcd2dec>
     73e:	d8 2f       	mov	r29, r24
	d_sec = bcd2dec(alarm_sec);
     740:	80 91 76 02 	lds	r24, 0x0276
     744:	e4 df       	rcall	.-56     	; 0x70e <bcd2dec>
     746:	f8 2e       	mov	r15, r24
	LCD_Clear();
     748:	9d d5       	rcall	.+2874   	; 0x1284 <LCD_Clear>
	LCD_GoToLine(1);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	8c d5       	rcall	.+2840   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("Hour  Min  Sec");
     74e:	00 d0       	rcall	.+0      	; 0x750 <setAlarm+0x2c>
     750:	8d e4       	ldi	r24, 0x4D	; 77
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	ad b7       	in	r26, 0x3d	; 61
     756:	be b7       	in	r27, 0x3e	; 62
     758:	12 96       	adiw	r26, 0x02	; 2
     75a:	9c 93       	st	X, r25
     75c:	8e 93       	st	-X, r24
     75e:	11 97       	sbiw	r26, 0x01	; 1
     760:	7e d7       	rcall	.+3836   	; 0x165e <LCD_Printf>
	LCD_GoToLine(2);
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	7e d5       	rcall	.+2812   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);
     76a:	ed b7       	in	r30, 0x3d	; 61
     76c:	fe b7       	in	r31, 0x3e	; 62
     76e:	38 97       	sbiw	r30, 0x08	; 8
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	fe bf       	out	0x3e, r31	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	ed bf       	out	0x3d, r30	; 61
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	8c e5       	ldi	r24, 0x5C	; 92
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	ad b7       	in	r26, 0x3d	; 61
     782:	be b7       	in	r27, 0x3e	; 62
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	11 97       	sbiw	r26, 0x01	; 1
     78c:	c2 83       	std	Z+2, r28	; 0x02
     78e:	13 82       	std	Z+3, r1	; 0x03
     790:	d4 83       	std	Z+4, r29	; 0x04
     792:	15 82       	std	Z+5, r1	; 0x05
     794:	f6 82       	std	Z+6, r15	; 0x06
     796:	17 82       	std	Z+7, r1	; 0x07
     798:	62 d7       	rcall	.+3780   	; 0x165e <LCD_Printf>
     79a:	ed b7       	in	r30, 0x3d	; 61
     79c:	fe b7       	in	r31, 0x3e	; 62
     79e:	38 96       	adiw	r30, 0x08	; 8
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	fe bf       	out	0x3e, r31	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	ed bf       	out	0x3d, r30	; 61
			_delay_ms(200);
		}
		
		if(d_hour>=24)
		{
			d_hour=0;
     7aa:	ee 24       	eor	r14, r14
		}
		
		LCD_Printf("%2d",d_hour);
     7ac:	0f e6       	ldi	r16, 0x6F	; 111
     7ae:	11 e0       	ldi	r17, 0x01	; 1
	LCD_GoToLine(2);
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);

	do 
	{	
		LCD_SetCursor(2,1);
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	2d d5       	rcall	.+2650   	; 0x1210 <LCD_SetCursor>
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	90 e7       	ldi	r25, 0x70	; 112
     7ba:	a2 e0       	ldi	r26, 0x02	; 2
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	90 40       	sbci	r25, 0x00	; 0
     7c0:	a0 40       	sbci	r26, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <setAlarm+0x98>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <setAlarm+0xa2>
     7c6:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     7c8:	82 9b       	sbis	0x10, 2	; 16
     7ca:	d5 c0       	rjmp	.+426    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     7cc:	85 99       	sbic	0x10, 5	; 16
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <setAlarm+0xc0>
		{
			d_hour++;
     7d0:	cf 5f       	subi	r28, 0xFF	; 255
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	91 ee       	ldi	r25, 0xE1	; 225
     7d6:	a4 e0       	ldi	r26, 0x04	; 4
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	90 40       	sbci	r25, 0x00	; 0
     7dc:	a0 40       	sbci	r26, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <setAlarm+0xb4>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <setAlarm+0xbe>
     7e2:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     7e4:	84 99       	sbic	0x10, 4	; 16
     7e6:	0a c0       	rjmp	.+20     	; 0x7fc <setAlarm+0xd8>
		{
			d_hour--;
     7e8:	c1 50       	subi	r28, 0x01	; 1
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	91 ee       	ldi	r25, 0xE1	; 225
     7ee:	a4 e0       	ldi	r26, 0x04	; 4
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	a0 40       	sbci	r26, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <setAlarm+0xcc>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <setAlarm+0xd6>
     7fa:	00 00       	nop
			_delay_ms(200);
		}
		
		if(d_hour>=24)
     7fc:	c8 31       	cpi	r28, 0x18	; 24
     7fe:	08 f0       	brcs	.+2      	; 0x802 <setAlarm+0xde>
		{
			d_hour=0;
     800:	ce 2d       	mov	r28, r14
		}
		
		LCD_Printf("%2d",d_hour);
     802:	00 d0       	rcall	.+0      	; 0x804 <setAlarm+0xe0>
     804:	00 d0       	rcall	.+0      	; 0x806 <setAlarm+0xe2>
     806:	ed b7       	in	r30, 0x3d	; 61
     808:	fe b7       	in	r31, 0x3e	; 62
     80a:	31 96       	adiw	r30, 0x01	; 1
     80c:	ad b7       	in	r26, 0x3d	; 61
     80e:	be b7       	in	r27, 0x3e	; 62
     810:	12 96       	adiw	r26, 0x02	; 2
     812:	1c 93       	st	X, r17
     814:	0e 93       	st	-X, r16
     816:	11 97       	sbiw	r26, 0x01	; 1
     818:	c2 83       	std	Z+2, r28	; 0x02
     81a:	13 82       	std	Z+3, r1	; 0x03
     81c:	20 d7       	rcall	.+3648   	; 0x165e <LCD_Printf>
			
	} while (util_IsBitSet(Button, select));
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	83 99       	sbic	0x10, 3	; 16
     828:	c3 cf       	rjmp	.-122    	; 0x7b0 <setAlarm+0x8c>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     82a:	82 9b       	sbis	0x10, 2	; 16
     82c:	a4 c0       	rjmp	.+328    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     82e:	83 99       	sbic	0x10, 3	; 16
     830:	fc cf       	rjmp	.-8      	; 0x82a <setAlarm+0x106>
			_delay_ms(200);
		}
			
		if(d_min>=60)
		{
			d_min=0;
     832:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_min);
     834:	0f e6       	ldi	r16, 0x6F	; 111
     836:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
	
	//update min  	
	do 
	{
		LCD_SetCursor(2,7);
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	67 e0       	ldi	r22, 0x07	; 7
     83c:	e9 d4       	rcall	.+2514   	; 0x1210 <LCD_SetCursor>
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	90 e7       	ldi	r25, 0x70	; 112
     842:	a2 e0       	ldi	r26, 0x02	; 2
     844:	81 50       	subi	r24, 0x01	; 1
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	a0 40       	sbci	r26, 0x00	; 0
     84a:	e1 f7       	brne	.-8      	; 0x844 <setAlarm+0x120>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <setAlarm+0x12a>
     84e:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     850:	82 9b       	sbis	0x10, 2	; 16
     852:	91 c0       	rjmp	.+290    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     854:	85 99       	sbic	0x10, 5	; 16
     856:	0a c0       	rjmp	.+20     	; 0x86c <setAlarm+0x148>
		{
			d_min++;
     858:	df 5f       	subi	r29, 0xFF	; 255
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	91 ee       	ldi	r25, 0xE1	; 225
     85e:	a4 e0       	ldi	r26, 0x04	; 4
     860:	81 50       	subi	r24, 0x01	; 1
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	a0 40       	sbci	r26, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <setAlarm+0x13c>
     868:	00 c0       	rjmp	.+0      	; 0x86a <setAlarm+0x146>
     86a:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     86c:	84 99       	sbic	0x10, 4	; 16
     86e:	0a c0       	rjmp	.+20     	; 0x884 <setAlarm+0x160>
		{
			d_min--;
     870:	d1 50       	subi	r29, 0x01	; 1
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	91 ee       	ldi	r25, 0xE1	; 225
     876:	a4 e0       	ldi	r26, 0x04	; 4
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	a0 40       	sbci	r26, 0x00	; 0
     87e:	e1 f7       	brne	.-8      	; 0x878 <setAlarm+0x154>
     880:	00 c0       	rjmp	.+0      	; 0x882 <setAlarm+0x15e>
     882:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_min>=60)
     884:	dc 33       	cpi	r29, 0x3C	; 60
     886:	08 f0       	brcs	.+2      	; 0x88a <setAlarm+0x166>
		{
			d_min=0;
     888:	de 2d       	mov	r29, r14
		}
			
		LCD_Printf("%2d",d_min);
     88a:	00 d0       	rcall	.+0      	; 0x88c <setAlarm+0x168>
     88c:	00 d0       	rcall	.+0      	; 0x88e <setAlarm+0x16a>
     88e:	ed b7       	in	r30, 0x3d	; 61
     890:	fe b7       	in	r31, 0x3e	; 62
     892:	31 96       	adiw	r30, 0x01	; 1
     894:	ad b7       	in	r26, 0x3d	; 61
     896:	be b7       	in	r27, 0x3e	; 62
     898:	12 96       	adiw	r26, 0x02	; 2
     89a:	1c 93       	st	X, r17
     89c:	0e 93       	st	-X, r16
     89e:	11 97       	sbiw	r26, 0x01	; 1
     8a0:	d2 83       	std	Z+2, r29	; 0x02
     8a2:	13 82       	std	Z+3, r1	; 0x03
     8a4:	dc d6       	rcall	.+3512   	; 0x165e <LCD_Printf>
						
	} while (util_IsBitSet(Button, select));
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	83 99       	sbic	0x10, 3	; 16
     8b0:	c3 cf       	rjmp	.-122    	; 0x838 <setAlarm+0x114>
		
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     8b2:	82 9b       	sbis	0x10, 2	; 16
     8b4:	60 c0       	rjmp	.+192    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     8b6:	83 99       	sbic	0x10, 3	; 16
     8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <setAlarm+0x18e>
			_delay_ms(200);
		}
			
		if(d_sec>=60)
		{
			d_sec=0;
     8ba:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_sec);
     8bc:	0f e6       	ldi	r16, 0x6F	; 111
     8be:	11 e0       	ldi	r17, 0x01	; 1
		}
	}while(util_IsBitSet(Button, select));
					
	do 
	{
		LCD_SetCursor(2,12);
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	6c e0       	ldi	r22, 0x0C	; 12
     8c4:	a5 d4       	rcall	.+2378   	; 0x1210 <LCD_SetCursor>
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	90 e7       	ldi	r25, 0x70	; 112
     8ca:	a2 e0       	ldi	r26, 0x02	; 2
     8cc:	81 50       	subi	r24, 0x01	; 1
     8ce:	90 40       	sbci	r25, 0x00	; 0
     8d0:	a0 40       	sbci	r26, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <setAlarm+0x1a8>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <setAlarm+0x1b2>
     8d6:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     8d8:	82 9b       	sbis	0x10, 2	; 16
     8da:	4d c0       	rjmp	.+154    	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     8dc:	85 99       	sbic	0x10, 5	; 16
     8de:	0a c0       	rjmp	.+20     	; 0x8f4 <setAlarm+0x1d0>
		{
			d_sec++;
     8e0:	f3 94       	inc	r15
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	91 ee       	ldi	r25, 0xE1	; 225
     8e6:	a4 e0       	ldi	r26, 0x04	; 4
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	90 40       	sbci	r25, 0x00	; 0
     8ec:	a0 40       	sbci	r26, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <setAlarm+0x1c4>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <setAlarm+0x1ce>
     8f2:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     8f4:	84 99       	sbic	0x10, 4	; 16
     8f6:	0a c0       	rjmp	.+20     	; 0x90c <setAlarm+0x1e8>
		{
			d_sec--;
     8f8:	fa 94       	dec	r15
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	91 ee       	ldi	r25, 0xE1	; 225
     8fe:	a4 e0       	ldi	r26, 0x04	; 4
     900:	81 50       	subi	r24, 0x01	; 1
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	a0 40       	sbci	r26, 0x00	; 0
     906:	e1 f7       	brne	.-8      	; 0x900 <setAlarm+0x1dc>
     908:	00 c0       	rjmp	.+0      	; 0x90a <setAlarm+0x1e6>
     90a:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_sec>=60)
     90c:	9b e3       	ldi	r25, 0x3B	; 59
     90e:	9f 15       	cp	r25, r15
     910:	08 f4       	brcc	.+2      	; 0x914 <setAlarm+0x1f0>
		{
			d_sec=0;
     912:	fe 2c       	mov	r15, r14
		}
			
		LCD_Printf("%2d",d_sec);
     914:	00 d0       	rcall	.+0      	; 0x916 <setAlarm+0x1f2>
     916:	00 d0       	rcall	.+0      	; 0x918 <setAlarm+0x1f4>
     918:	ed b7       	in	r30, 0x3d	; 61
     91a:	fe b7       	in	r31, 0x3e	; 62
     91c:	31 96       	adiw	r30, 0x01	; 1
     91e:	ad b7       	in	r26, 0x3d	; 61
     920:	be b7       	in	r27, 0x3e	; 62
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	1c 93       	st	X, r17
     926:	0e 93       	st	-X, r16
     928:	11 97       	sbiw	r26, 0x01	; 1
     92a:	f2 82       	std	Z+2, r15	; 0x02
     92c:	13 82       	std	Z+3, r1	; 0x03
     92e:	97 d6       	rcall	.+3374   	; 0x165e <LCD_Printf>
						
	} while (util_IsBitSet(Button, select));
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	83 99       	sbic	0x10, 3	; 16
     93a:	c2 cf       	rjmp	.-124    	; 0x8c0 <setAlarm+0x19c>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     93c:	82 9b       	sbis	0x10, 2	; 16
     93e:	1b c0       	rjmp	.+54     	; 0x976 <setAlarm+0x252>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));	
     940:	83 99       	sbic	0x10, 3	; 16
     942:	fc cf       	rjmp	.-8      	; 0x93c <setAlarm+0x218>
		
	alarm_hour = dec2bcd(d_hour);
     944:	8c 2f       	mov	r24, r28
     946:	dd de       	rcall	.-582    	; 0x702 <dec2bcd>
     948:	80 93 77 02 	sts	0x0277, r24
	alarm_min = dec2bcd(d_min);
     94c:	8d 2f       	mov	r24, r29
     94e:	d9 de       	rcall	.-590    	; 0x702 <dec2bcd>
     950:	80 93 79 02 	sts	0x0279, r24
	alarm_sec = dec2bcd(d_sec);
     954:	8f 2d       	mov	r24, r15
     956:	d5 de       	rcall	.-598    	; 0x702 <dec2bcd>
     958:	80 93 76 02 	sts	0x0276, r24
	LCD_Clear();
     95c:	93 d4       	rcall	.+2342   	; 0x1284 <LCD_Clear>
	LCD_DisplayString("Alarm Set");
     95e:	83 e7       	ldi	r24, 0x73	; 115
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	6f d6       	rcall	.+3294   	; 0x1642 <LCD_DisplayString>
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	93 ed       	ldi	r25, 0xD3	; 211
     968:	a0 e3       	ldi	r26, 0x30	; 48
     96a:	81 50       	subi	r24, 0x01	; 1
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	a0 40       	sbci	r26, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <setAlarm+0x246>
     972:	00 c0       	rjmp	.+0      	; 0x974 <setAlarm+0x250>
     974:	00 00       	nop
	_delay_ms(2000);
   
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	08 95       	ret

00000984 <setDate>:
	_delay_ms(2000);
	  
}

void setDate(uint8_t day, uint8_t month, uint8_t year)
{  
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	d6 2f       	mov	r29, r22
     992:	04 2f       	mov	r16, r20
	uint8_t d_day, d_month, d_year;
	
	d_day = bcd2dec(day);
     994:	bc de       	rcall	.-648    	; 0x70e <bcd2dec>
     996:	c8 2f       	mov	r28, r24
	d_month = bcd2dec(month);
     998:	8d 2f       	mov	r24, r29
     99a:	b9 de       	rcall	.-654    	; 0x70e <bcd2dec>
     99c:	d8 2f       	mov	r29, r24
	d_year= bcd2dec(year);
     99e:	80 2f       	mov	r24, r16
     9a0:	b6 de       	rcall	.-660    	; 0x70e <bcd2dec>
     9a2:	f8 2e       	mov	r15, r24
	LCD_Clear();
     9a4:	6f d4       	rcall	.+2270   	; 0x1284 <LCD_Clear>
	LCD_GoToLine(1);
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	5e d4       	rcall	.+2236   	; 0x1266 <LCD_GoToLine>
	LCD_Printf(" DD    MM   YY");
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <setDate+0x28>
     9ac:	8d e7       	ldi	r24, 0x7D	; 125
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	ad b7       	in	r26, 0x3d	; 61
     9b2:	be b7       	in	r27, 0x3e	; 62
     9b4:	12 96       	adiw	r26, 0x02	; 2
     9b6:	9c 93       	st	X, r25
     9b8:	8e 93       	st	-X, r24
     9ba:	11 97       	sbiw	r26, 0x01	; 1
     9bc:	50 d6       	rcall	.+3232   	; 0x165e <LCD_Printf>
	LCD_GoToLine(2);
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	50 d4       	rcall	.+2208   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_day, d_month, d_year);
     9c6:	ed b7       	in	r30, 0x3d	; 61
     9c8:	fe b7       	in	r31, 0x3e	; 62
     9ca:	38 97       	sbiw	r30, 0x08	; 8
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	fe bf       	out	0x3e, r31	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	ed bf       	out	0x3d, r30	; 61
     9d6:	31 96       	adiw	r30, 0x01	; 1
     9d8:	8c e5       	ldi	r24, 0x5C	; 92
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	ad b7       	in	r26, 0x3d	; 61
     9de:	be b7       	in	r27, 0x3e	; 62
     9e0:	12 96       	adiw	r26, 0x02	; 2
     9e2:	9c 93       	st	X, r25
     9e4:	8e 93       	st	-X, r24
     9e6:	11 97       	sbiw	r26, 0x01	; 1
     9e8:	c2 83       	std	Z+2, r28	; 0x02
     9ea:	13 82       	std	Z+3, r1	; 0x03
     9ec:	d4 83       	std	Z+4, r29	; 0x04
     9ee:	15 82       	std	Z+5, r1	; 0x05
     9f0:	f6 82       	std	Z+6, r15	; 0x06
     9f2:	17 82       	std	Z+7, r1	; 0x07
     9f4:	34 d6       	rcall	.+3176   	; 0x165e <LCD_Printf>
     9f6:	ed b7       	in	r30, 0x3d	; 61
     9f8:	fe b7       	in	r31, 0x3e	; 62
     9fa:	38 96       	adiw	r30, 0x08	; 8
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	fe bf       	out	0x3e, r31	; 62
     a02:	0f be       	out	0x3f, r0	; 63
     a04:	ed bf       	out	0x3d, r30	; 61
			_delay_ms(200);
		}
		
		if(d_day>31)
		{
			d_day=0;
     a06:	ee 24       	eor	r14, r14
		}
		
		LCD_Printf("%2d",d_day);
     a08:	0f e6       	ldi	r16, 0x6F	; 111
     a0a:	11 e0       	ldi	r17, 0x01	; 1
	LCD_GoToLine(2);
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_day, d_month, d_year);

	do 
	{	
		LCD_SetCursor(2,1);
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	ff d3       	rcall	.+2046   	; 0x1210 <LCD_SetCursor>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	90 e7       	ldi	r25, 0x70	; 112
     a16:	a2 e0       	ldi	r26, 0x02	; 2
     a18:	81 50       	subi	r24, 0x01	; 1
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	a0 40       	sbci	r26, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <setDate+0x94>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <setDate+0x9e>
     a22:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     a24:	82 9b       	sbis	0x10, 2	; 16
     a26:	d5 c0       	rjmp	.+426    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     a28:	85 99       	sbic	0x10, 5	; 16
     a2a:	0a c0       	rjmp	.+20     	; 0xa40 <setDate+0xbc>
		{
			d_day++;
     a2c:	cf 5f       	subi	r28, 0xFF	; 255
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	91 ee       	ldi	r25, 0xE1	; 225
     a32:	a4 e0       	ldi	r26, 0x04	; 4
     a34:	81 50       	subi	r24, 0x01	; 1
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	a0 40       	sbci	r26, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <setDate+0xb0>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <setDate+0xba>
     a3e:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     a40:	84 99       	sbic	0x10, 4	; 16
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <setDate+0xd4>
		{
			d_day--;
     a44:	c1 50       	subi	r28, 0x01	; 1
     a46:	8f ef       	ldi	r24, 0xFF	; 255
     a48:	91 ee       	ldi	r25, 0xE1	; 225
     a4a:	a4 e0       	ldi	r26, 0x04	; 4
     a4c:	81 50       	subi	r24, 0x01	; 1
     a4e:	90 40       	sbci	r25, 0x00	; 0
     a50:	a0 40       	sbci	r26, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <setDate+0xc8>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <setDate+0xd2>
     a56:	00 00       	nop
			_delay_ms(200);
		}
		
		if(d_day>31)
     a58:	c0 32       	cpi	r28, 0x20	; 32
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <setDate+0xda>
		{
			d_day=0;
     a5c:	ce 2d       	mov	r28, r14
		}
		
		LCD_Printf("%2d",d_day);
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <setDate+0xdc>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <setDate+0xde>
     a62:	ed b7       	in	r30, 0x3d	; 61
     a64:	fe b7       	in	r31, 0x3e	; 62
     a66:	31 96       	adiw	r30, 0x01	; 1
     a68:	ad b7       	in	r26, 0x3d	; 61
     a6a:	be b7       	in	r27, 0x3e	; 62
     a6c:	12 96       	adiw	r26, 0x02	; 2
     a6e:	1c 93       	st	X, r17
     a70:	0e 93       	st	-X, r16
     a72:	11 97       	sbiw	r26, 0x01	; 1
     a74:	c2 83       	std	Z+2, r28	; 0x02
     a76:	13 82       	std	Z+3, r1	; 0x03
     a78:	f2 d5       	rcall	.+3044   	; 0x165e <LCD_Printf>
			
	} while (util_IsBitSet(Button, select));
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	83 99       	sbic	0x10, 3	; 16
     a84:	c3 cf       	rjmp	.-122    	; 0xa0c <setDate+0x88>
		  
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     a86:	82 9b       	sbis	0x10, 2	; 16
     a88:	a4 c0       	rjmp	.+328    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     a8a:	83 99       	sbic	0x10, 3	; 16
     a8c:	fc cf       	rjmp	.-8      	; 0xa86 <setDate+0x102>
			_delay_ms(200);
		}
			
		if(d_month>12)
		{
			d_month=0;
     a8e:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_month);			
     a90:	0f e6       	ldi	r16, 0x6F	; 111
     a92:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
	  
	//update month
	do 
	{
		LCD_SetCursor(2,7);
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	67 e0       	ldi	r22, 0x07	; 7
     a98:	bb d3       	rcall	.+1910   	; 0x1210 <LCD_SetCursor>
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	90 e7       	ldi	r25, 0x70	; 112
     a9e:	a2 e0       	ldi	r26, 0x02	; 2
     aa0:	81 50       	subi	r24, 0x01	; 1
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	a0 40       	sbci	r26, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <setDate+0x11c>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <setDate+0x126>
     aaa:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     aac:	82 9b       	sbis	0x10, 2	; 16
     aae:	91 c0       	rjmp	.+290    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     ab0:	85 99       	sbic	0x10, 5	; 16
     ab2:	0a c0       	rjmp	.+20     	; 0xac8 <setDate+0x144>
		{
			d_month++;
     ab4:	df 5f       	subi	r29, 0xFF	; 255
     ab6:	8f ef       	ldi	r24, 0xFF	; 255
     ab8:	91 ee       	ldi	r25, 0xE1	; 225
     aba:	a4 e0       	ldi	r26, 0x04	; 4
     abc:	81 50       	subi	r24, 0x01	; 1
     abe:	90 40       	sbci	r25, 0x00	; 0
     ac0:	a0 40       	sbci	r26, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <setDate+0x138>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <setDate+0x142>
     ac6:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     ac8:	84 99       	sbic	0x10, 4	; 16
     aca:	0a c0       	rjmp	.+20     	; 0xae0 <setDate+0x15c>
		{
			d_month--;
     acc:	d1 50       	subi	r29, 0x01	; 1
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	91 ee       	ldi	r25, 0xE1	; 225
     ad2:	a4 e0       	ldi	r26, 0x04	; 4
     ad4:	81 50       	subi	r24, 0x01	; 1
     ad6:	90 40       	sbci	r25, 0x00	; 0
     ad8:	a0 40       	sbci	r26, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <setDate+0x150>
     adc:	00 c0       	rjmp	.+0      	; 0xade <setDate+0x15a>
     ade:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_month>12)
     ae0:	dd 30       	cpi	r29, 0x0D	; 13
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <setDate+0x162>
		{
			d_month=0;
     ae4:	de 2d       	mov	r29, r14
		}
			
		LCD_Printf("%2d",d_month);			
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <setDate+0x164>
     ae8:	00 d0       	rcall	.+0      	; 0xaea <setDate+0x166>
     aea:	ed b7       	in	r30, 0x3d	; 61
     aec:	fe b7       	in	r31, 0x3e	; 62
     aee:	31 96       	adiw	r30, 0x01	; 1
     af0:	ad b7       	in	r26, 0x3d	; 61
     af2:	be b7       	in	r27, 0x3e	; 62
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	1c 93       	st	X, r17
     af8:	0e 93       	st	-X, r16
     afa:	11 97       	sbiw	r26, 0x01	; 1
     afc:	d2 83       	std	Z+2, r29	; 0x02
     afe:	13 82       	std	Z+3, r1	; 0x03
     b00:	ae d5       	rcall	.+2908   	; 0x165e <LCD_Printf>
	} while (util_IsBitSet(Button, select));
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	83 99       	sbic	0x10, 3	; 16
     b0c:	c3 cf       	rjmp	.-122    	; 0xa94 <setDate+0x110>
		
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     b0e:	82 9b       	sbis	0x10, 2	; 16
     b10:	60 c0       	rjmp	.+192    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     b12:	83 99       	sbic	0x10, 3	; 16
     b14:	fc cf       	rjmp	.-8      	; 0xb0e <setDate+0x18a>
			_delay_ms(200);
		}
			
		if(d_year>=99)
		{
			d_year=0;
     b16:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_year);
     b18:	0f e6       	ldi	r16, 0x6F	; 111
     b1a:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
		
	//set year	
	do 
	{
		LCD_SetCursor(2,12);
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	6c e0       	ldi	r22, 0x0C	; 12
     b20:	77 d3       	rcall	.+1774   	; 0x1210 <LCD_SetCursor>
     b22:	8f ef       	ldi	r24, 0xFF	; 255
     b24:	90 e7       	ldi	r25, 0x70	; 112
     b26:	a2 e0       	ldi	r26, 0x02	; 2
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	90 40       	sbci	r25, 0x00	; 0
     b2c:	a0 40       	sbci	r26, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <setDate+0x1a4>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <setDate+0x1ae>
     b32:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     b34:	82 9b       	sbis	0x10, 2	; 16
     b36:	4d c0       	rjmp	.+154    	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}

		if(util_IsBitCleared(Button, up))
     b38:	85 99       	sbic	0x10, 5	; 16
     b3a:	0a c0       	rjmp	.+20     	; 0xb50 <setDate+0x1cc>
		{
			d_year++;
     b3c:	f3 94       	inc	r15
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	91 ee       	ldi	r25, 0xE1	; 225
     b42:	a4 e0       	ldi	r26, 0x04	; 4
     b44:	81 50       	subi	r24, 0x01	; 1
     b46:	90 40       	sbci	r25, 0x00	; 0
     b48:	a0 40       	sbci	r26, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <setDate+0x1c0>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <setDate+0x1ca>
     b4e:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     b50:	84 99       	sbic	0x10, 4	; 16
     b52:	0a c0       	rjmp	.+20     	; 0xb68 <setDate+0x1e4>
		{
			d_year--;
     b54:	fa 94       	dec	r15
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	91 ee       	ldi	r25, 0xE1	; 225
     b5a:	a4 e0       	ldi	r26, 0x04	; 4
     b5c:	81 50       	subi	r24, 0x01	; 1
     b5e:	90 40       	sbci	r25, 0x00	; 0
     b60:	a0 40       	sbci	r26, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <setDate+0x1d8>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <setDate+0x1e2>
     b66:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_year>=99)
     b68:	92 e6       	ldi	r25, 0x62	; 98
     b6a:	9f 15       	cp	r25, r15
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <setDate+0x1ec>
		{
			d_year=0;
     b6e:	fe 2c       	mov	r15, r14
		}
			
		LCD_Printf("%2d",d_year);
     b70:	00 d0       	rcall	.+0      	; 0xb72 <setDate+0x1ee>
     b72:	00 d0       	rcall	.+0      	; 0xb74 <setDate+0x1f0>
     b74:	ed b7       	in	r30, 0x3d	; 61
     b76:	fe b7       	in	r31, 0x3e	; 62
     b78:	31 96       	adiw	r30, 0x01	; 1
     b7a:	ad b7       	in	r26, 0x3d	; 61
     b7c:	be b7       	in	r27, 0x3e	; 62
     b7e:	12 96       	adiw	r26, 0x02	; 2
     b80:	1c 93       	st	X, r17
     b82:	0e 93       	st	-X, r16
     b84:	11 97       	sbiw	r26, 0x01	; 1
     b86:	f2 82       	std	Z+2, r15	; 0x02
     b88:	13 82       	std	Z+3, r1	; 0x03
     b8a:	69 d5       	rcall	.+2770   	; 0x165e <LCD_Printf>
					
	} while (util_IsBitSet(Button, select));
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	83 99       	sbic	0x10, 3	; 16
     b96:	c2 cf       	rjmp	.-124    	; 0xb1c <setDate+0x198>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     b98:	82 9b       	sbis	0x10, 2	; 16
     b9a:	1b c0       	rjmp	.+54     	; 0xbd2 <setDate+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     b9c:	83 99       	sbic	0x10, 3	; 16
     b9e:	fc cf       	rjmp	.-8      	; 0xb98 <setDate+0x214>
	
   day = dec2bcd(d_day);
     ba0:	8c 2f       	mov	r24, r28
     ba2:	af dd       	rcall	.-1186   	; 0x702 <dec2bcd>
     ba4:	08 2f       	mov	r16, r24
   month = dec2bcd(d_month);
     ba6:	8d 2f       	mov	r24, r29
     ba8:	ac dd       	rcall	.-1192   	; 0x702 <dec2bcd>
     baa:	c8 2f       	mov	r28, r24
   year = dec2bcd(d_year);
     bac:	8f 2d       	mov	r24, r15
     bae:	a9 dd       	rcall	.-1198   	; 0x702 <dec2bcd>
     bb0:	48 2f       	mov	r20, r24
   RTC_SetDate(day, month, year); 
     bb2:	80 2f       	mov	r24, r16
     bb4:	6c 2f       	mov	r22, r28
     bb6:	94 d6       	rcall	.+3368   	; 0x18e0 <RTC_SetDate>
   LCD_Clear();
     bb8:	65 d3       	rcall	.+1738   	; 0x1284 <LCD_Clear>
   LCD_DisplayString("Date Updated");
     bba:	8c e8       	ldi	r24, 0x8C	; 140
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	41 d5       	rcall	.+2690   	; 0x1642 <LCD_DisplayString>
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	93 ed       	ldi	r25, 0xD3	; 211
     bc4:	a0 e3       	ldi	r26, 0x30	; 48
     bc6:	81 50       	subi	r24, 0x01	; 1
     bc8:	90 40       	sbci	r25, 0x00	; 0
     bca:	a0 40       	sbci	r26, 0x00	; 0
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <setDate+0x242>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <setDate+0x24c>
     bd0:	00 00       	nop
   _delay_ms(2000);
	  
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <setTime>:
	
	return (keycount); 
}

void setTime(uint8_t hour, uint8_t min, uint8_t sec)
{  
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	d6 2f       	mov	r29, r22
     bee:	04 2f       	mov	r16, r20
	uint8_t d_hour, d_min, d_sec;
	
	d_hour = bcd2dec(hour);
     bf0:	8e dd       	rcall	.-1252   	; 0x70e <bcd2dec>
     bf2:	c8 2f       	mov	r28, r24
	d_min = bcd2dec(min);
     bf4:	8d 2f       	mov	r24, r29
     bf6:	8b dd       	rcall	.-1258   	; 0x70e <bcd2dec>
     bf8:	d8 2f       	mov	r29, r24
	d_sec = bcd2dec(sec);
     bfa:	80 2f       	mov	r24, r16
     bfc:	88 dd       	rcall	.-1264   	; 0x70e <bcd2dec>
     bfe:	f8 2e       	mov	r15, r24
	LCD_Clear();
     c00:	41 d3       	rcall	.+1666   	; 0x1284 <LCD_Clear>
	LCD_GoToLine(1);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	30 d3       	rcall	.+1632   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("Hour  Min  Sec");
     c06:	00 d0       	rcall	.+0      	; 0xc08 <setTime+0x28>
     c08:	8d e4       	ldi	r24, 0x4D	; 77
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	ad b7       	in	r26, 0x3d	; 61
     c0e:	be b7       	in	r27, 0x3e	; 62
     c10:	12 96       	adiw	r26, 0x02	; 2
     c12:	9c 93       	st	X, r25
     c14:	8e 93       	st	-X, r24
     c16:	11 97       	sbiw	r26, 0x01	; 1
     c18:	22 d5       	rcall	.+2628   	; 0x165e <LCD_Printf>
	LCD_GoToLine(2);
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	22 d3       	rcall	.+1604   	; 0x1266 <LCD_GoToLine>
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);
     c22:	ed b7       	in	r30, 0x3d	; 61
     c24:	fe b7       	in	r31, 0x3e	; 62
     c26:	38 97       	sbiw	r30, 0x08	; 8
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	fe bf       	out	0x3e, r31	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	ed bf       	out	0x3d, r30	; 61
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	8c e5       	ldi	r24, 0x5C	; 92
     c36:	91 e0       	ldi	r25, 0x01	; 1
     c38:	ad b7       	in	r26, 0x3d	; 61
     c3a:	be b7       	in	r27, 0x3e	; 62
     c3c:	12 96       	adiw	r26, 0x02	; 2
     c3e:	9c 93       	st	X, r25
     c40:	8e 93       	st	-X, r24
     c42:	11 97       	sbiw	r26, 0x01	; 1
     c44:	c2 83       	std	Z+2, r28	; 0x02
     c46:	13 82       	std	Z+3, r1	; 0x03
     c48:	d4 83       	std	Z+4, r29	; 0x04
     c4a:	15 82       	std	Z+5, r1	; 0x05
     c4c:	f6 82       	std	Z+6, r15	; 0x06
     c4e:	17 82       	std	Z+7, r1	; 0x07
     c50:	06 d5       	rcall	.+2572   	; 0x165e <LCD_Printf>
     c52:	ed b7       	in	r30, 0x3d	; 61
     c54:	fe b7       	in	r31, 0x3e	; 62
     c56:	38 96       	adiw	r30, 0x08	; 8
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	fe bf       	out	0x3e, r31	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	ed bf       	out	0x3d, r30	; 61
			}
		}
		
		if(d_hour>=24)
		{
			d_hour=0;
     c62:	ee 24       	eor	r14, r14
		}
		
		LCD_Printf("%2d",d_hour);
     c64:	0f e6       	ldi	r16, 0x6F	; 111
     c66:	11 e0       	ldi	r17, 0x01	; 1
	LCD_GoToLine(2);
	LCD_Printf("<%2d>  <%2d> <%2d>" , d_hour, d_min, d_sec);

	do 
	{	
		LCD_SetCursor(2,1);
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	d1 d2       	rcall	.+1442   	; 0x1210 <LCD_SetCursor>
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	90 e7       	ldi	r25, 0x70	; 112
     c72:	a2 e0       	ldi	r26, 0x02	; 2
     c74:	81 50       	subi	r24, 0x01	; 1
     c76:	90 40       	sbci	r25, 0x00	; 0
     c78:	a0 40       	sbci	r26, 0x00	; 0
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <setTime+0x94>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <setTime+0x9e>
     c7e:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     c80:	82 9b       	sbis	0x10, 2	; 16
     c82:	d5 c0       	rjmp	.+426    	; 0xe2e <setTime+0x24e>
			{
				return (-1);  
			}
		}

		if(util_IsBitCleared(Button, up))
     c84:	85 99       	sbic	0x10, 5	; 16
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <setTime+0xbc>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, up))
			{
				d_hour++;
     c88:	cf 5f       	subi	r28, 0xFF	; 255
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	91 ee       	ldi	r25, 0xE1	; 225
     c8e:	a4 e0       	ldi	r26, 0x04	; 4
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	90 40       	sbci	r25, 0x00	; 0
     c94:	a0 40       	sbci	r26, 0x00	; 0
     c96:	e1 f7       	brne	.-8      	; 0xc90 <setTime+0xb0>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <setTime+0xba>
     c9a:	00 00       	nop
				_delay_ms(200);
			}
		}
		if(util_IsBitCleared(Button, down))
     c9c:	84 99       	sbic	0x10, 4	; 16
     c9e:	0a c0       	rjmp	.+20     	; 0xcb4 <setTime+0xd4>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, down))
			{
				d_hour--;
     ca0:	c1 50       	subi	r28, 0x01	; 1
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	91 ee       	ldi	r25, 0xE1	; 225
     ca6:	a4 e0       	ldi	r26, 0x04	; 4
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	a0 40       	sbci	r26, 0x00	; 0
     cae:	e1 f7       	brne	.-8      	; 0xca8 <setTime+0xc8>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <setTime+0xd2>
     cb2:	00 00       	nop
				_delay_ms(200);
			}
		}
		
		if(d_hour>=24)
     cb4:	c8 31       	cpi	r28, 0x18	; 24
     cb6:	08 f0       	brcs	.+2      	; 0xcba <setTime+0xda>
		{
			d_hour=0;
     cb8:	ce 2d       	mov	r28, r14
		}
		
		LCD_Printf("%2d",d_hour);
     cba:	00 d0       	rcall	.+0      	; 0xcbc <setTime+0xdc>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <setTime+0xde>
     cbe:	ed b7       	in	r30, 0x3d	; 61
     cc0:	fe b7       	in	r31, 0x3e	; 62
     cc2:	31 96       	adiw	r30, 0x01	; 1
     cc4:	ad b7       	in	r26, 0x3d	; 61
     cc6:	be b7       	in	r27, 0x3e	; 62
     cc8:	12 96       	adiw	r26, 0x02	; 2
     cca:	1c 93       	st	X, r17
     ccc:	0e 93       	st	-X, r16
     cce:	11 97       	sbiw	r26, 0x01	; 1
     cd0:	c2 83       	std	Z+2, r28	; 0x02
     cd2:	13 82       	std	Z+3, r1	; 0x03
     cd4:	c4 d4       	rcall	.+2440   	; 0x165e <LCD_Printf>
			
	} while (util_IsBitSet(Button, select));
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	83 99       	sbic	0x10, 3	; 16
     ce0:	c3 cf       	rjmp	.-122    	; 0xc68 <setTime+0x88>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     ce2:	82 9b       	sbis	0x10, 2	; 16
     ce4:	a4 c0       	rjmp	.+328    	; 0xe2e <setTime+0x24e>
//			if (util_IsBitSet(Button, cancel))
			{
				return (-1); 
			}
		}
	}while(util_IsBitSet(Button, select));
     ce6:	83 99       	sbic	0x10, 3	; 16
     ce8:	fc cf       	rjmp	.-8      	; 0xce2 <setTime+0x102>
			}
		}
			
		if(d_min>=60)
		{
			d_min=0;
     cea:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_min);
     cec:	0f e6       	ldi	r16, 0x6F	; 111
     cee:	11 e0       	ldi	r17, 0x01	; 1
	}while(util_IsBitSet(Button, select));
		  
		//update min  
	do 
	{
		LCD_SetCursor(2,7);
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	67 e0       	ldi	r22, 0x07	; 7
     cf4:	8d d2       	rcall	.+1306   	; 0x1210 <LCD_SetCursor>
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	90 e7       	ldi	r25, 0x70	; 112
     cfa:	a2 e0       	ldi	r26, 0x02	; 2
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	90 40       	sbci	r25, 0x00	; 0
     d00:	a0 40       	sbci	r26, 0x00	; 0
     d02:	e1 f7       	brne	.-8      	; 0xcfc <setTime+0x11c>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <setTime+0x126>
     d06:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     d08:	82 9b       	sbis	0x10, 2	; 16
     d0a:	91 c0       	rjmp	.+290    	; 0xe2e <setTime+0x24e>
			{
				return (-1);  
			}
		}

		if(util_IsBitCleared(Button, up))
     d0c:	85 99       	sbic	0x10, 5	; 16
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <setTime+0x144>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, up))
			{
				d_min++;
     d10:	df 5f       	subi	r29, 0xFF	; 255
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	91 ee       	ldi	r25, 0xE1	; 225
     d16:	a4 e0       	ldi	r26, 0x04	; 4
     d18:	81 50       	subi	r24, 0x01	; 1
     d1a:	90 40       	sbci	r25, 0x00	; 0
     d1c:	a0 40       	sbci	r26, 0x00	; 0
     d1e:	e1 f7       	brne	.-8      	; 0xd18 <setTime+0x138>
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <setTime+0x142>
     d22:	00 00       	nop
				_delay_ms(200);
			}
		}
		if(util_IsBitCleared(Button, down))
     d24:	84 99       	sbic	0x10, 4	; 16
     d26:	0a c0       	rjmp	.+20     	; 0xd3c <setTime+0x15c>
		{
//			_delay_ms(1);
//			if (util_IsBitSet(Button, down))
			{
				d_min--;
     d28:	d1 50       	subi	r29, 0x01	; 1
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	91 ee       	ldi	r25, 0xE1	; 225
     d2e:	a4 e0       	ldi	r26, 0x04	; 4
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	a0 40       	sbci	r26, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <setTime+0x150>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <setTime+0x15a>
     d3a:	00 00       	nop
				_delay_ms(200);
			}
		}
			
		if(d_min>=60)
     d3c:	dc 33       	cpi	r29, 0x3C	; 60
     d3e:	08 f0       	brcs	.+2      	; 0xd42 <setTime+0x162>
		{
			d_min=0;
     d40:	de 2d       	mov	r29, r14
		}
			
		LCD_Printf("%2d",d_min);
     d42:	00 d0       	rcall	.+0      	; 0xd44 <setTime+0x164>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <setTime+0x166>
     d46:	ed b7       	in	r30, 0x3d	; 61
     d48:	fe b7       	in	r31, 0x3e	; 62
     d4a:	31 96       	adiw	r30, 0x01	; 1
     d4c:	ad b7       	in	r26, 0x3d	; 61
     d4e:	be b7       	in	r27, 0x3e	; 62
     d50:	12 96       	adiw	r26, 0x02	; 2
     d52:	1c 93       	st	X, r17
     d54:	0e 93       	st	-X, r16
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	d2 83       	std	Z+2, r29	; 0x02
     d5a:	13 82       	std	Z+3, r1	; 0x03
     d5c:	80 d4       	rcall	.+2304   	; 0x165e <LCD_Printf>
			
			
	} while (util_IsBitSet(Button, select));
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	83 99       	sbic	0x10, 3	; 16
     d68:	c3 cf       	rjmp	.-122    	; 0xcf0 <setTime+0x110>
		
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     d6a:	82 9b       	sbis	0x10, 2	; 16
     d6c:	60 c0       	rjmp	.+192    	; 0xe2e <setTime+0x24e>
//			if (util_IsBitSet(Button, cancel))
			{
				return (-1); 
			}
		}
	}while(util_IsBitSet(Button, select));
     d6e:	83 99       	sbic	0x10, 3	; 16
     d70:	fc cf       	rjmp	.-8      	; 0xd6a <setTime+0x18a>
			_delay_ms(200);
		}
			
		if(d_sec>=60)
		{
			d_sec=0;
     d72:	ee 24       	eor	r14, r14
		}
			
		LCD_Printf("%2d",d_sec);
     d74:	0f e6       	ldi	r16, 0x6F	; 111
     d76:	11 e0       	ldi	r17, 0x01	; 1
		}
	}while(util_IsBitSet(Button, select));
				
	do 
	{
		LCD_SetCursor(2,12);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	6c e0       	ldi	r22, 0x0C	; 12
     d7c:	49 d2       	rcall	.+1170   	; 0x1210 <LCD_SetCursor>
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	90 e7       	ldi	r25, 0x70	; 112
     d82:	a2 e0       	ldi	r26, 0x02	; 2
     d84:	81 50       	subi	r24, 0x01	; 1
     d86:	90 40       	sbci	r25, 0x00	; 0
     d88:	a0 40       	sbci	r26, 0x00	; 0
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <setTime+0x1a4>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <setTime+0x1ae>
     d8e:	00 00       	nop
		_delay_ms(100);
		
		if (util_IsBitCleared(Button, cancel))
     d90:	82 9b       	sbis	0x10, 2	; 16
     d92:	4d c0       	rjmp	.+154    	; 0xe2e <setTime+0x24e>
		{
		   return (-1); ; 
		}
		
		if(util_IsBitCleared(Button, up))
     d94:	85 99       	sbic	0x10, 5	; 16
     d96:	0a c0       	rjmp	.+20     	; 0xdac <setTime+0x1cc>
		{
			d_sec++;
     d98:	f3 94       	inc	r15
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	91 ee       	ldi	r25, 0xE1	; 225
     d9e:	a4 e0       	ldi	r26, 0x04	; 4
     da0:	81 50       	subi	r24, 0x01	; 1
     da2:	90 40       	sbci	r25, 0x00	; 0
     da4:	a0 40       	sbci	r26, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <setTime+0x1c0>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <setTime+0x1ca>
     daa:	00 00       	nop
			_delay_ms(200);
		}
		if(util_IsBitCleared(Button, down))
     dac:	84 99       	sbic	0x10, 4	; 16
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <setTime+0x1e4>
		{
			d_sec--;
     db0:	fa 94       	dec	r15
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	91 ee       	ldi	r25, 0xE1	; 225
     db6:	a4 e0       	ldi	r26, 0x04	; 4
     db8:	81 50       	subi	r24, 0x01	; 1
     dba:	90 40       	sbci	r25, 0x00	; 0
     dbc:	a0 40       	sbci	r26, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <setTime+0x1d8>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <setTime+0x1e2>
     dc2:	00 00       	nop
			_delay_ms(200);
		}
			
		if(d_sec>=60)
     dc4:	9b e3       	ldi	r25, 0x3B	; 59
     dc6:	9f 15       	cp	r25, r15
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <setTime+0x1ec>
		{
			d_sec=0;
     dca:	fe 2c       	mov	r15, r14
		}
			
		LCD_Printf("%2d",d_sec);
     dcc:	00 d0       	rcall	.+0      	; 0xdce <setTime+0x1ee>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <setTime+0x1f0>
     dd0:	ed b7       	in	r30, 0x3d	; 61
     dd2:	fe b7       	in	r31, 0x3e	; 62
     dd4:	31 96       	adiw	r30, 0x01	; 1
     dd6:	ad b7       	in	r26, 0x3d	; 61
     dd8:	be b7       	in	r27, 0x3e	; 62
     dda:	12 96       	adiw	r26, 0x02	; 2
     ddc:	1c 93       	st	X, r17
     dde:	0e 93       	st	-X, r16
     de0:	11 97       	sbiw	r26, 0x01	; 1
     de2:	f2 82       	std	Z+2, r15	; 0x02
     de4:	13 82       	std	Z+3, r1	; 0x03
     de6:	3b d4       	rcall	.+2166   	; 0x165e <LCD_Printf>
						
	} while (util_IsBitSet(Button, select));
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	83 99       	sbic	0x10, 3	; 16
     df2:	c2 cf       	rjmp	.-124    	; 0xd78 <setTime+0x198>
	
	do 
	{
		if (util_IsBitCleared(Button, cancel))
     df4:	82 9b       	sbis	0x10, 2	; 16
     df6:	1b c0       	rjmp	.+54     	; 0xe2e <setTime+0x24e>
		{
		   return (-1); ; 
		}
	}while(util_IsBitSet(Button, select));
     df8:	83 99       	sbic	0x10, 3	; 16
     dfa:	fc cf       	rjmp	.-8      	; 0xdf4 <setTime+0x214>
		
	hour = dec2bcd(d_hour);
     dfc:	8c 2f       	mov	r24, r28
     dfe:	81 dc       	rcall	.-1790   	; 0x702 <dec2bcd>
     e00:	08 2f       	mov	r16, r24
	min = dec2bcd(d_min);
     e02:	8d 2f       	mov	r24, r29
     e04:	7e dc       	rcall	.-1796   	; 0x702 <dec2bcd>
     e06:	c8 2f       	mov	r28, r24
	sec = dec2bcd(d_sec);
     e08:	8f 2d       	mov	r24, r15
     e0a:	7b dc       	rcall	.-1802   	; 0x702 <dec2bcd>
     e0c:	48 2f       	mov	r20, r24
	RTC_SetTime(hour, min, sec); 
     e0e:	80 2f       	mov	r24, r16
     e10:	6c 2f       	mov	r22, r28
     e12:	50 d5       	rcall	.+2720   	; 0x18b4 <RTC_SetTime>
	LCD_Clear();
     e14:	37 d2       	rcall	.+1134   	; 0x1284 <LCD_Clear>
	LCD_DisplayString("Time Updated");
     e16:	89 e9       	ldi	r24, 0x99	; 153
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	13 d4       	rcall	.+2086   	; 0x1642 <LCD_DisplayString>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	93 ed       	ldi	r25, 0xD3	; 211
     e20:	a0 e3       	ldi	r26, 0x30	; 48
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	a0 40       	sbci	r26, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <setTime+0x242>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <setTime+0x24c>
     e2c:	00 00       	nop
	_delay_ms(2000);
	  
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	08 95       	ret

00000e3c <LCD_DisplayDate>:
		LCD_Printf("%2x",sec);	
	}	
}

void LCD_DisplayDate(uint8_t day, uint8_t month, uint8_t year)
{
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	d8 2f       	mov	r29, r24
     e44:	c6 2f       	mov	r28, r22
     e46:	14 2f       	mov	r17, r20
	unsigned char digit0=0, digit1=0, digit2=0;
		
	if ( Display_Style == 1)
     e48:	80 91 78 02 	lds	r24, 0x0278
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	71 f5       	brne	.+92     	; 0xeac <LCD_DisplayDate+0x70>
	{
		LCD_GoToLine(2);
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	09 d2       	rcall	.+1042   	; 0x1266 <LCD_GoToLine>
		digit0 = bcd2dec(day);
     e54:	8d 2f       	mov	r24, r29
     e56:	5b dc       	rcall	.-1866   	; 0x70e <bcd2dec>
     e58:	d8 2f       	mov	r29, r24
		digit1 = bcd2dec(month);
     e5a:	8c 2f       	mov	r24, r28
     e5c:	58 dc       	rcall	.-1872   	; 0x70e <bcd2dec>
     e5e:	c8 2f       	mov	r28, r24
		digit2 = bcd2dec(year);
     e60:	81 2f       	mov	r24, r17
     e62:	55 dc       	rcall	.-1878   	; 0x70e <bcd2dec>
		LCD_Printf("    %2d/%2d/%2d",digit0,digit1,digit2);
     e64:	2d b7       	in	r18, 0x3d	; 61
     e66:	3e b7       	in	r19, 0x3e	; 62
     e68:	28 50       	subi	r18, 0x08	; 8
     e6a:	30 40       	sbci	r19, 0x00	; 0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	3e bf       	out	0x3e, r19	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	2d bf       	out	0x3d, r18	; 61
     e76:	ed b7       	in	r30, 0x3d	; 61
     e78:	fe b7       	in	r31, 0x3e	; 62
     e7a:	31 96       	adiw	r30, 0x01	; 1
     e7c:	26 ea       	ldi	r18, 0xA6	; 166
     e7e:	31 e0       	ldi	r19, 0x01	; 1
     e80:	ad b7       	in	r26, 0x3d	; 61
     e82:	be b7       	in	r27, 0x3e	; 62
     e84:	12 96       	adiw	r26, 0x02	; 2
     e86:	3c 93       	st	X, r19
     e88:	2e 93       	st	-X, r18
     e8a:	11 97       	sbiw	r26, 0x01	; 1
     e8c:	d2 83       	std	Z+2, r29	; 0x02
     e8e:	13 82       	std	Z+3, r1	; 0x03
     e90:	c4 83       	std	Z+4, r28	; 0x04
     e92:	15 82       	std	Z+5, r1	; 0x05
     e94:	86 83       	std	Z+6, r24	; 0x06
     e96:	17 82       	std	Z+7, r1	; 0x07
     e98:	e2 d3       	rcall	.+1988   	; 0x165e <LCD_Printf>
     e9a:	2d b7       	in	r18, 0x3d	; 61
     e9c:	3e b7       	in	r19, 0x3e	; 62
     e9e:	28 5f       	subi	r18, 0xF8	; 248
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	3e bf       	out	0x3e, r19	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	2d bf       	out	0x3d, r18	; 61
	}
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	08 95       	ret

00000eb4 <LCD_DisplayTime>:
		default:break; 		
	}	
}

void LCD_DisplayTime(unsigned char hr,unsigned char min, unsigned char sec)
{
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	16 2f       	mov	r17, r22
     ebe:	d4 2f       	mov	r29, r20
	uint8_t d_hour, d_min, d_sec;
	uint8_t digit0=0, digit1=0, digit2=0;
	
	d_hour = bcd2dec(hr);
     ec0:	26 dc       	rcall	.-1972   	; 0x70e <bcd2dec>
     ec2:	c8 2f       	mov	r28, r24
	d_min = bcd2dec(min);
     ec4:	81 2f       	mov	r24, r17
     ec6:	23 dc       	rcall	.-1978   	; 0x70e <bcd2dec>
     ec8:	08 2f       	mov	r16, r24
	d_sec = bcd2dec(sec);
     eca:	8d 2f       	mov	r24, r29
     ecc:	20 dc       	rcall	.-1984   	; 0x70e <bcd2dec>
     ece:	18 2f       	mov	r17, r24
	
	if ( Time_Format == 1 )		// 12 hour format
     ed0:	80 91 e0 01 	lds	r24, 0x01E0
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	f9 f4       	brne	.+62     	; 0xf16 <LCD_DisplayTime+0x62>
	{
		LCD_SetCursor(1,14);
     ed8:	6e e0       	ldi	r22, 0x0E	; 14
     eda:	9a d1       	rcall	.+820    	; 0x1210 <LCD_SetCursor>
		
		if (d_hour >12)
     edc:	cd 30       	cpi	r28, 0x0D	; 13
     ede:	70 f0       	brcs	.+28     	; 0xefc <LCD_DisplayTime+0x48>
		{
			d_hour -= 12;
     ee0:	cc 50       	subi	r28, 0x0C	; 12
			LCD_Printf("PM");	
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <LCD_DisplayTime+0x30>
     ee4:	86 eb       	ldi	r24, 0xB6	; 182
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	ad b7       	in	r26, 0x3d	; 61
     eea:	be b7       	in	r27, 0x3e	; 62
     eec:	12 96       	adiw	r26, 0x02	; 2
     eee:	9c 93       	st	X, r25
     ef0:	8e 93       	st	-X, r24
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	b4 d3       	rcall	.+1896   	; 0x165e <LCD_Printf>
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0d c0       	rjmp	.+26     	; 0xf16 <LCD_DisplayTime+0x62>
		}
		else
		{
			if ( d_hour == 0)	// time is 12 AM
     efc:	cc 23       	and	r28, r28
     efe:	09 f4       	brne	.+2      	; 0xf02 <LCD_DisplayTime+0x4e>
			{
				d_hour = 12;
     f00:	cc e0       	ldi	r28, 0x0C	; 12
			}
			LCD_Printf("AM");
     f02:	00 d0       	rcall	.+0      	; 0xf04 <LCD_DisplayTime+0x50>
     f04:	89 eb       	ldi	r24, 0xB9	; 185
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	ed b7       	in	r30, 0x3d	; 61
     f0a:	fe b7       	in	r31, 0x3e	; 62
     f0c:	92 83       	std	Z+2, r25	; 0x02
     f0e:	81 83       	std	Z+1, r24	; 0x01
     f10:	a6 d3       	rcall	.+1868   	; 0x165e <LCD_Printf>
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
		}		
	}	
		
	if ( Display_Style == 1)	// both date and time are displayed in this style
     f16:	80 91 78 02 	lds	r24, 0x0278
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	21 f5       	brne	.+72     	; 0xf66 <LCD_DisplayTime+0xb2>
	{		
		LCD_GoToLine(1);
     f1e:	a3 d1       	rcall	.+838    	; 0x1266 <LCD_GoToLine>
		LCD_Printf("    %2d:%2d:%2d",d_hour,d_min,d_sec);		
     f20:	8d b7       	in	r24, 0x3d	; 61
     f22:	9e b7       	in	r25, 0x3e	; 62
     f24:	08 97       	sbiw	r24, 0x08	; 8
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	9e bf       	out	0x3e, r25	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	8d bf       	out	0x3d, r24	; 61
     f30:	ed b7       	in	r30, 0x3d	; 61
     f32:	fe b7       	in	r31, 0x3e	; 62
     f34:	31 96       	adiw	r30, 0x01	; 1
     f36:	8c eb       	ldi	r24, 0xBC	; 188
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	ad b7       	in	r26, 0x3d	; 61
     f3c:	be b7       	in	r27, 0x3e	; 62
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	9c 93       	st	X, r25
     f42:	8e 93       	st	-X, r24
     f44:	11 97       	sbiw	r26, 0x01	; 1
     f46:	c2 83       	std	Z+2, r28	; 0x02
     f48:	13 82       	std	Z+3, r1	; 0x03
     f4a:	04 83       	std	Z+4, r16	; 0x04
     f4c:	15 82       	std	Z+5, r1	; 0x05
     f4e:	16 83       	std	Z+6, r17	; 0x06
     f50:	17 82       	std	Z+7, r1	; 0x07
     f52:	85 d3       	rcall	.+1802   	; 0x165e <LCD_Printf>
     f54:	ed b7       	in	r30, 0x3d	; 61
     f56:	fe b7       	in	r31, 0x3e	; 62
     f58:	38 96       	adiw	r30, 0x08	; 8
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	fe bf       	out	0x3e, r31	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	ed bf       	out	0x3d, r30	; 61
     f64:	36 c0       	rjmp	.+108    	; 0xfd2 <LCD_DisplayTime+0x11e>
	}	
	else		// only date is displayed, so display big numbers
	{
		digit1 = d_hour/10;
     f66:	1a e0       	ldi	r17, 0x0A	; 10
     f68:	8c 2f       	mov	r24, r28
     f6a:	61 2f       	mov	r22, r17
     f6c:	19 d5       	rcall	.+2610   	; 0x19a0 <__udivmodqi4>
     f6e:	c9 2f       	mov	r28, r25
		digit0= d_hour%10;
		LCD_DisplayBigNum(digit1,0);  //display hour
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	ec d8       	rcall	.-3624   	; 0x14c <LCD_DisplayBigNum>
		LCD_DisplayBigNum(digit0,3);
     f74:	8c 2f       	mov	r24, r28
     f76:	63 e0       	ldi	r22, 0x03	; 3
     f78:	e9 d8       	rcall	.-3630   	; 0x14c <LCD_DisplayBigNum>
		
		// set colon
		LCD_SetCursor(1,6);
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	48 d1       	rcall	.+656    	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(0xA5);
     f80:	85 ea       	ldi	r24, 0xA5	; 165
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	d6 d1       	rcall	.+940    	; 0x1332 <lcd_DataWrite>
		LCD_SetCursor(2,6);
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	66 e0       	ldi	r22, 0x06	; 6
     f8a:	42 d1       	rcall	.+644    	; 0x1210 <LCD_SetCursor>
		lcd_DataWrite(0xA5);
     f8c:	85 ea       	ldi	r24, 0xA5	; 165
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	d0 d1       	rcall	.+928    	; 0x1332 <lcd_DataWrite>
		  
		//display min  
		digit1 = d_min/10;
     f92:	80 2f       	mov	r24, r16
     f94:	61 2f       	mov	r22, r17
     f96:	04 d5       	rcall	.+2568   	; 0x19a0 <__udivmodqi4>
     f98:	c9 2f       	mov	r28, r25
		digit0= d_min%10;
		LCD_DisplayBigNum(digit1,7);  
     f9a:	67 e0       	ldi	r22, 0x07	; 7
     f9c:	d7 d8       	rcall	.-3666   	; 0x14c <LCD_DisplayBigNum>
		LCD_DisplayBigNum(digit0,10);
     f9e:	8c 2f       	mov	r24, r28
     fa0:	6a e0       	ldi	r22, 0x0A	; 10
     fa2:	d4 d8       	rcall	.-3672   	; 0x14c <LCD_DisplayBigNum>
		
		//display sec
		LCD_SetCursor(2,14);
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	6e e0       	ldi	r22, 0x0E	; 14
     fa8:	33 d1       	rcall	.+614    	; 0x1210 <LCD_SetCursor>
		LCD_Printf("%2x",sec);	
     faa:	00 d0       	rcall	.+0      	; 0xfac <LCD_DisplayTime+0xf8>
     fac:	00 d0       	rcall	.+0      	; 0xfae <LCD_DisplayTime+0xfa>
     fae:	ed b7       	in	r30, 0x3d	; 61
     fb0:	fe b7       	in	r31, 0x3e	; 62
     fb2:	31 96       	adiw	r30, 0x01	; 1
     fb4:	8c ec       	ldi	r24, 0xCC	; 204
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	ad b7       	in	r26, 0x3d	; 61
     fba:	be b7       	in	r27, 0x3e	; 62
     fbc:	12 96       	adiw	r26, 0x02	; 2
     fbe:	9c 93       	st	X, r25
     fc0:	8e 93       	st	-X, r24
     fc2:	11 97       	sbiw	r26, 0x01	; 1
     fc4:	d2 83       	std	Z+2, r29	; 0x02
     fc6:	13 82       	std	Z+3, r1	; 0x03
     fc8:	4a d3       	rcall	.+1684   	; 0x165e <LCD_Printf>
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
	}	
}
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <main>:
unsigned char alarm_sec;
unsigned char alarm_min;
unsigned char alarm_hour; 

void main()
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <main+0x6>
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <main+0x8>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <main+0xa>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
    #define up 5
    #define down 4
	#define select 3
	#define cancel 2
	
	DDRD = 0XF0; //Switches as input, lcd dataline as output
     fea:	80 ef       	ldi	r24, 0xF0	; 240
     fec:	81 bb       	out	0x11, r24	; 17
	PORTD = 0XFF; //Internal pull up enabled for switches
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	82 bb       	out	0x12, r24	; 18
	DDRB  |= (1<<buzzer_pin); // buzzer as output
     ff2:	bb 9a       	sbi	0x17, 3	; 23

	LCD_Init(4,2,16);
     ff4:	84 e0       	ldi	r24, 0x04	; 4
     ff6:	62 e0       	ldi	r22, 0x02	; 2
     ff8:	40 e1       	ldi	r20, 0x10	; 16
     ffa:	49 d1       	rcall	.+658    	; 0x128e <LCD_Init>
	LCD_Printf(" Explore Time !");
     ffc:	00 d0       	rcall	.+0      	; 0xffe <main+0x22>
     ffe:	80 ed       	ldi	r24, 0xD0	; 208
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	ad b7       	in	r26, 0x3d	; 61
    1004:	be b7       	in	r27, 0x3e	; 62
    1006:	12 96       	adiw	r26, 0x02	; 2
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
    100c:	11 97       	sbiw	r26, 0x01	; 1
    100e:	27 d3       	rcall	.+1614   	; 0x165e <LCD_Printf>
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	93 ed       	ldi	r25, 0xD3	; 211
    1014:	a0 e3       	ldi	r26, 0x30	; 48
    1016:	81 50       	subi	r24, 0x01	; 1
    1018:	90 40       	sbci	r25, 0x00	; 0
    101a:	a0 40       	sbci	r26, 0x00	; 0
    101c:	e1 f7       	brne	.-8      	; 0x1016 <main+0x3a>
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <main+0x44>
    1020:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	2e d1       	rcall	.+604    	; 0x1284 <LCD_Clear>
	
    RTC_Init();
    1028:	3b d4       	rcall	.+2166   	; 0x18a0 <RTC_Init>
	
	//segments for creating large font stored in RAM.
	
	LCD_CreateCC(LT,0);
    102a:	89 e6       	ldi	r24, 0x69	; 105
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	74 d8       	rcall	.-3864   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(UB,1);
    1032:	81 e6       	ldi	r24, 0x61	; 97
    1034:	92 e0       	ldi	r25, 0x02	; 2
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	70 d8       	rcall	.-3872   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(RT,2);
    103a:	89 e5       	ldi	r24, 0x59	; 89
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	62 e0       	ldi	r22, 0x02	; 2
    1040:	6c d8       	rcall	.-3880   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LL,3);
    1042:	81 e5       	ldi	r24, 0x51	; 81
    1044:	92 e0       	ldi	r25, 0x02	; 2
    1046:	63 e0       	ldi	r22, 0x03	; 3
    1048:	68 d8       	rcall	.-3888   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LB,4);
    104a:	89 e4       	ldi	r24, 0x49	; 73
    104c:	92 e0       	ldi	r25, 0x02	; 2
    104e:	64 e0       	ldi	r22, 0x04	; 4
    1050:	64 d8       	rcall	.-3896   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LR,5);
    1052:	81 e4       	ldi	r24, 0x41	; 65
    1054:	92 e0       	ldi	r25, 0x02	; 2
    1056:	65 e0       	ldi	r22, 0x05	; 5
    1058:	60 d8       	rcall	.-3904   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(UMB,6);
    105a:	89 e3       	ldi	r24, 0x39	; 57
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	66 e0       	ldi	r22, 0x06	; 6
    1060:	5c d8       	rcall	.-3912   	; 0x11a <LCD_CreateCC>
	LCD_CreateCC(LMB,7);
    1062:	81 e3       	ldi	r24, 0x31	; 49
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	67 e0       	ldi	r22, 0x07	; 7
    1068:	58 d8       	rcall	.-3920   	; 0x11a <LCD_CreateCC>
//	RTC_SetTime(0x23,0x40,0x20);  //  11:40:20 pm
//	RTC_SetDate(0x14,0x11,0x12);  //  14th Nov 2012
	
	while(1)
	{		       
		if(util_IsBitCleared(Button,select))
    106a:	83 99       	sbic	0x10, 3	; 16
    106c:	23 c0       	rjmp	.+70     	; 0x10b4 <main+0xd8>
		 {   
			while(util_IsBitCleared(Button,select));
    106e:	83 9b       	sbis	0x10, 3	; 16
    1070:	fe cf       	rjmp	.-4      	; 0x106e <main+0x92>
			 
			do
			{
				option = LCD_DisplayMenu();
    1072:	68 d9       	rcall	.-3376   	; 0x344 <LCD_DisplayMenu>
				switch(option)
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	b1 f0       	breq	.+44     	; 0x10a4 <main+0xc8>
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	28 f4       	brcc	.+10     	; 0x1086 <main+0xaa>
    107c:	88 23       	and	r24, r24
    107e:	41 f0       	breq	.+16     	; 0x1090 <main+0xb4>
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	a9 f4       	brne	.+42     	; 0x10ae <main+0xd2>
    1084:	0a c0       	rjmp	.+20     	; 0x109a <main+0xbe>
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	79 f0       	breq	.+30     	; 0x10a8 <main+0xcc>
    108a:	84 30       	cpi	r24, 0x04	; 4
    108c:	81 f4       	brne	.+32     	; 0x10ae <main+0xd2>
    108e:	0e c0       	rjmp	.+28     	; 0x10ac <main+0xd0>
				{
				 case 0: setTime(hour,min,sec);break;
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	6a 81       	ldd	r22, Y+2	; 0x02
    1094:	49 81       	ldd	r20, Y+1	; 0x01
    1096:	a4 dd       	rcall	.-1208   	; 0xbe0 <setTime>
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <main+0xd2>
				 case 1: setDate(day,month,year);break;
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	6d 81       	ldd	r22, Y+5	; 0x05
    109e:	4e 81       	ldd	r20, Y+6	; 0x06
    10a0:	71 dc       	rcall	.-1822   	; 0x984 <setDate>
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <main+0xd2>
				 case 2: setAlarm(); break;
    10a4:	3f db       	rcall	.-2434   	; 0x724 <setAlarm>
    10a6:	03 c0       	rjmp	.+6      	; 0x10ae <main+0xd2>
				 case 3: setDisplayStyle(); break;
    10a8:	28 da       	rcall	.-2992   	; 0x4fa <setDisplayStyle>
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <main+0xd2>
				 case 4: setTimeFormat(); break;
    10ac:	a8 da       	rcall	.-2736   	; 0x5fe <setTimeFormat>
				 default: break;
				}
			} while(util_IsBitSet(Button,cancel));
    10ae:	82 99       	sbic	0x10, 2	; 16
    10b0:	e0 cf       	rjmp	.-64     	; 0x1072 <main+0x96>
			
			LCD_Clear(); 	 
    10b2:	e8 d0       	rcall	.+464    	; 0x1284 <LCD_Clear>
		 }
	
		RTC_GetTime(&hour,&min,&sec);      
    10b4:	ce 01       	movw	r24, r28
    10b6:	03 96       	adiw	r24, 0x03	; 3
    10b8:	be 01       	movw	r22, r28
    10ba:	6e 5f       	subi	r22, 0xFE	; 254
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	ae 01       	movw	r20, r28
    10c0:	4f 5f       	subi	r20, 0xFF	; 255
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255
    10c4:	23 d4       	rcall	.+2118   	; 0x190c <RTC_GetTime>
		RTC_GetDate(&day, &month, &year);
    10c6:	ce 01       	movw	r24, r28
    10c8:	04 96       	adiw	r24, 0x04	; 4
    10ca:	be 01       	movw	r22, r28
    10cc:	6b 5f       	subi	r22, 0xFB	; 251
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	ae 01       	movw	r20, r28
    10d2:	4a 5f       	subi	r20, 0xFA	; 250
    10d4:	5f 4f       	sbci	r21, 0xFF	; 255
    10d6:	3f d4       	rcall	.+2174   	; 0x1956 <RTC_GetDate>
		LCD_DisplayTime(hour, min, sec);
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	6a 81       	ldd	r22, Y+2	; 0x02
    10dc:	49 81       	ldd	r20, Y+1	; 0x01
    10de:	ea de       	rcall	.-556    	; 0xeb4 <LCD_DisplayTime>
		LCD_DisplayDate(day, month, year);
    10e0:	8c 81       	ldd	r24, Y+4	; 0x04
    10e2:	6d 81       	ldd	r22, Y+5	; 0x05
    10e4:	4e 81       	ldd	r20, Y+6	; 0x06
    10e6:	aa de       	rcall	.-684    	; 0xe3c <LCD_DisplayDate>
		
		checkAlarm();
    10e8:	c3 d9       	rcall	.-3194   	; 0x470 <checkAlarm>
				
	}
    10ea:	bf cf       	rjmp	.-130    	; 0x106a <main+0x8e>

000010ec <DELAY_sec>:
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	59 f0       	breq	.+22     	; 0x1106 <DELAY_sec+0x1a>
    10f0:	2f ef       	ldi	r18, 0xFF	; 255
    10f2:	39 e6       	ldi	r19, 0x69	; 105
    10f4:	48 e1       	ldi	r20, 0x18	; 24
    10f6:	21 50       	subi	r18, 0x01	; 1
    10f8:	30 40       	sbci	r19, 0x00	; 0
    10fa:	40 40       	sbci	r20, 0x00	; 0
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <DELAY_sec+0xa>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <DELAY_sec+0x14>
    1100:	00 00       	nop
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	a9 f7       	brne	.-22     	; 0x10f0 <DELAY_sec+0x4>
    1106:	08 95       	ret

00001108 <I2C_Init>:
    1108:	11 b8       	out	0x01, r1	; 1
    110a:	80 e5       	ldi	r24, 0x50	; 80
    110c:	80 b9       	out	0x00, r24	; 0
    110e:	84 e0       	ldi	r24, 0x04	; 4
    1110:	86 bf       	out	0x36, r24	; 54
    1112:	08 95       	ret

00001114 <I2C_Start>:
    1114:	84 ea       	ldi	r24, 0xA4	; 164
    1116:	86 bf       	out	0x36, r24	; 54
    1118:	06 b6       	in	r0, 0x36	; 54
    111a:	07 fe       	sbrs	r0, 7
    111c:	fd cf       	rjmp	.-6      	; 0x1118 <I2C_Start+0x4>
    111e:	08 95       	ret

00001120 <I2C_Stop>:
    1120:	84 e9       	ldi	r24, 0x94	; 148
    1122:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1124:	8a e1       	ldi	r24, 0x1A	; 26
    1126:	8a 95       	dec	r24
    1128:	f1 f7       	brne	.-4      	; 0x1126 <I2C_Stop+0x6>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <I2C_Stop+0xc>
    112c:	08 95       	ret

0000112e <I2C_Write>:
    112e:	83 b9       	out	0x03, r24	; 3
    1130:	84 e8       	ldi	r24, 0x84	; 132
    1132:	86 bf       	out	0x36, r24	; 54
    1134:	06 b6       	in	r0, 0x36	; 54
    1136:	07 fe       	sbrs	r0, 7
    1138:	fd cf       	rjmp	.-6      	; 0x1134 <I2C_Write+0x6>
    113a:	08 95       	ret

0000113c <I2C_Read>:
    113c:	82 95       	swap	r24
    113e:	88 0f       	add	r24, r24
    1140:	88 0f       	add	r24, r24
    1142:	80 7c       	andi	r24, 0xC0	; 192
    1144:	84 68       	ori	r24, 0x84	; 132
    1146:	86 bf       	out	0x36, r24	; 54
    1148:	06 b6       	in	r0, 0x36	; 54
    114a:	07 fe       	sbrs	r0, 7
    114c:	fd cf       	rjmp	.-6      	; 0x1148 <I2C_Read+0xc>
    114e:	83 b1       	in	r24, 0x03	; 3
    1150:	08 95       	ret

00001152 <lcd_SendNibble>:
    1152:	98 2f       	mov	r25, r24
    1154:	84 ff       	sbrs	r24, 4
    1156:	02 c0       	rjmp	.+4      	; 0x115c <lcd_SendNibble+0xa>
    1158:	c4 9a       	sbi	0x18, 4	; 24
    115a:	01 c0       	rjmp	.+2      	; 0x115e <lcd_SendNibble+0xc>
    115c:	c4 98       	cbi	0x18, 4	; 24
    115e:	95 ff       	sbrs	r25, 5
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <lcd_SendNibble+0x14>
    1162:	c5 9a       	sbi	0x18, 5	; 24
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <lcd_SendNibble+0x16>
    1166:	c5 98       	cbi	0x18, 5	; 24
    1168:	96 ff       	sbrs	r25, 6
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <lcd_SendNibble+0x1e>
    116c:	c6 9a       	sbi	0x18, 6	; 24
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <lcd_SendNibble+0x20>
    1170:	c6 98       	cbi	0x18, 6	; 24
    1172:	88 23       	and	r24, r24
    1174:	14 f4       	brge	.+4      	; 0x117a <lcd_SendNibble+0x28>
    1176:	c7 9a       	sbi	0x18, 7	; 24
    1178:	08 95       	ret
    117a:	c7 98       	cbi	0x18, 7	; 24
    117c:	08 95       	ret

0000117e <lcd_BusyCheck>:
    117e:	bf 98       	cbi	0x17, 7	; 23
    1180:	c0 98       	cbi	0x18, 0	; 24
    1182:	c1 9a       	sbi	0x18, 1	; 24
    1184:	ee e7       	ldi	r30, 0x7E	; 126
    1186:	f2 e0       	ldi	r31, 0x02	; 2
    1188:	c2 98       	cbi	0x18, 2	; 24
    118a:	8a e1       	ldi	r24, 0x1A	; 26
    118c:	8a 95       	dec	r24
    118e:	f1 f7       	brne	.-4      	; 0x118c <lcd_BusyCheck+0xe>
    1190:	00 c0       	rjmp	.+0      	; 0x1192 <lcd_BusyCheck+0x14>
    1192:	c2 9a       	sbi	0x18, 2	; 24
    1194:	9a e1       	ldi	r25, 0x1A	; 26
    1196:	9a 95       	dec	r25
    1198:	f1 f7       	brne	.-4      	; 0x1196 <lcd_BusyCheck+0x18>
    119a:	00 c0       	rjmp	.+0      	; 0x119c <lcd_BusyCheck+0x1e>
    119c:	86 b3       	in	r24, 0x16	; 22
    119e:	90 81       	ld	r25, Z
    11a0:	94 30       	cpi	r25, 0x04	; 4
    11a2:	51 f4       	brne	.+20     	; 0x11b8 <lcd_BusyCheck+0x3a>
    11a4:	c2 98       	cbi	0x18, 2	; 24
    11a6:	9a e1       	ldi	r25, 0x1A	; 26
    11a8:	9a 95       	dec	r25
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <lcd_BusyCheck+0x2a>
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <lcd_BusyCheck+0x30>
    11ae:	c2 9a       	sbi	0x18, 2	; 24
    11b0:	9a e1       	ldi	r25, 0x1A	; 26
    11b2:	9a 95       	dec	r25
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <lcd_BusyCheck+0x34>
    11b6:	00 c0       	rjmp	.+0      	; 0x11b8 <lcd_BusyCheck+0x3a>
    11b8:	88 23       	and	r24, r24
    11ba:	34 f3       	brlt	.-52     	; 0x1188 <lcd_BusyCheck+0xa>
    11bc:	bf 9a       	sbi	0x17, 7	; 23
    11be:	08 95       	ret

000011c0 <lcd_SendCmdSignals>:
    11c0:	c0 98       	cbi	0x18, 0	; 24
    11c2:	c1 98       	cbi	0x18, 1	; 24
    11c4:	c2 9a       	sbi	0x18, 2	; 24
    11c6:	8a e1       	ldi	r24, 0x1A	; 26
    11c8:	8a 95       	dec	r24
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <lcd_SendCmdSignals+0x8>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <lcd_SendCmdSignals+0xe>
    11ce:	c2 98       	cbi	0x18, 2	; 24
    11d0:	08 95       	ret

000011d2 <lcd_SendDataSignals>:
    11d2:	c0 9a       	sbi	0x18, 0	; 24
    11d4:	c1 98       	cbi	0x18, 1	; 24
    11d6:	c2 9a       	sbi	0x18, 2	; 24
    11d8:	8a e1       	ldi	r24, 0x1A	; 26
    11da:	8a 95       	dec	r24
    11dc:	f1 f7       	brne	.-4      	; 0x11da <lcd_SendDataSignals+0x8>
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <lcd_SendDataSignals+0xe>
    11e0:	c2 98       	cbi	0x18, 2	; 24
    11e2:	08 95       	ret

000011e4 <LCD_CmdWrite>:
    11e4:	cf 93       	push	r28
    11e6:	c8 2f       	mov	r28, r24
    11e8:	ca df       	rcall	.-108    	; 0x117e <lcd_BusyCheck>
    11ea:	80 91 7e 02 	lds	r24, 0x027E
    11ee:	88 30       	cpi	r24, 0x08	; 8
    11f0:	19 f4       	brne	.+6      	; 0x11f8 <LCD_CmdWrite+0x14>
    11f2:	c8 bb       	out	0x18, r28	; 24
    11f4:	e5 df       	rcall	.-54     	; 0x11c0 <lcd_SendCmdSignals>
    11f6:	0a c0       	rjmp	.+20     	; 0x120c <LCD_CmdWrite+0x28>
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	41 f4       	brne	.+16     	; 0x120c <LCD_CmdWrite+0x28>
    11fc:	8c 2f       	mov	r24, r28
    11fe:	a9 df       	rcall	.-174    	; 0x1152 <lcd_SendNibble>
    1200:	df df       	rcall	.-66     	; 0x11c0 <lcd_SendCmdSignals>
    1202:	8c 2f       	mov	r24, r28
    1204:	82 95       	swap	r24
    1206:	80 7f       	andi	r24, 0xF0	; 240
    1208:	a4 df       	rcall	.-184    	; 0x1152 <lcd_SendNibble>
    120a:	da df       	rcall	.-76     	; 0x11c0 <lcd_SendCmdSignals>
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <LCD_SetCursor>:
    1210:	90 91 7c 02 	lds	r25, 0x027C
    1214:	98 17       	cp	r25, r24
    1216:	78 f0       	brcs	.+30     	; 0x1236 <LCD_SetCursor+0x26>
    1218:	90 91 7d 02 	lds	r25, 0x027D
    121c:	69 17       	cp	r22, r25
    121e:	58 f4       	brcc	.+22     	; 0x1236 <LCD_SetCursor+0x26>
    1220:	60 93 7a 02 	sts	0x027A, r22
    1224:	80 93 7b 02 	sts	0x027B, r24
    1228:	e1 e7       	ldi	r30, 0x71	; 113
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	e8 0f       	add	r30, r24
    122e:	f1 1d       	adc	r31, r1
    1230:	80 81       	ld	r24, Z
    1232:	86 0f       	add	r24, r22
    1234:	d7 df       	rcall	.-82     	; 0x11e4 <LCD_CmdWrite>
    1236:	08 95       	ret

00001238 <LCD_GoToNextLine>:
    1238:	80 91 7b 02 	lds	r24, 0x027B
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	80 93 7b 02 	sts	0x027B, r24
    1242:	10 92 7a 02 	sts	0x027A, r1
    1246:	90 91 7c 02 	lds	r25, 0x027C
    124a:	98 17       	cp	r25, r24
    124c:	18 f4       	brcc	.+6      	; 0x1254 <LCD_GoToNextLine+0x1c>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 7b 02 	sts	0x027B, r24
    1254:	80 91 7b 02 	lds	r24, 0x027B
    1258:	e1 e7       	ldi	r30, 0x71	; 113
    125a:	f2 e0       	ldi	r31, 0x02	; 2
    125c:	e8 0f       	add	r30, r24
    125e:	f1 1d       	adc	r31, r1
    1260:	80 81       	ld	r24, Z
    1262:	c0 df       	rcall	.-128    	; 0x11e4 <LCD_CmdWrite>
    1264:	08 95       	ret

00001266 <LCD_GoToLine>:
    1266:	90 91 7c 02 	lds	r25, 0x027C
    126a:	98 17       	cp	r25, r24
    126c:	50 f0       	brcs	.+20     	; 0x1282 <LCD_GoToLine+0x1c>
    126e:	10 92 7a 02 	sts	0x027A, r1
    1272:	80 93 7b 02 	sts	0x027B, r24
    1276:	e1 e7       	ldi	r30, 0x71	; 113
    1278:	f2 e0       	ldi	r31, 0x02	; 2
    127a:	e8 0f       	add	r30, r24
    127c:	f1 1d       	adc	r31, r1
    127e:	80 81       	ld	r24, Z
    1280:	b1 df       	rcall	.-158    	; 0x11e4 <LCD_CmdWrite>
    1282:	08 95       	ret

00001284 <LCD_Clear>:
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	ae df       	rcall	.-164    	; 0x11e4 <LCD_CmdWrite>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	ed df       	rcall	.-38     	; 0x1266 <LCD_GoToLine>
    128c:	08 95       	ret

0000128e <LCD_Init>:
    128e:	9f ef       	ldi	r25, 0xFF	; 255
    1290:	97 bb       	out	0x17, r25	; 23
    1292:	97 bb       	out	0x17, r25	; 23
    1294:	80 93 7e 02 	sts	0x027E, r24
    1298:	40 93 7d 02 	sts	0x027D, r20
    129c:	60 93 7c 02 	sts	0x027C, r22
    12a0:	63 30       	cpi	r22, 0x03	; 3
    12a2:	40 f0       	brcs	.+16     	; 0x12b4 <LCD_Init+0x26>
    12a4:	4f 70       	andi	r20, 0x0F	; 15
    12a6:	84 2f       	mov	r24, r20
    12a8:	80 57       	subi	r24, 0x70	; 112
    12aa:	80 93 74 02 	sts	0x0274, r24
    12ae:	40 53       	subi	r20, 0x30	; 48
    12b0:	40 93 75 02 	sts	0x0275, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	90 e7       	ldi	r25, 0x70	; 112
    12b8:	a2 e0       	ldi	r26, 0x02	; 2
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	90 40       	sbci	r25, 0x00	; 0
    12be:	a0 40       	sbci	r26, 0x00	; 0
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <LCD_Init+0x2c>
    12c2:	00 c0       	rjmp	.+0      	; 0x12c4 <LCD_Init+0x36>
    12c4:	00 00       	nop
    12c6:	80 91 7e 02 	lds	r24, 0x027E
    12ca:	88 30       	cpi	r24, 0x08	; 8
    12cc:	19 f4       	brne	.+6      	; 0x12d4 <LCD_Init+0x46>
    12ce:	88 e3       	ldi	r24, 0x38	; 56
    12d0:	89 df       	rcall	.-238    	; 0x11e4 <LCD_CmdWrite>
    12d2:	2b c0       	rjmp	.+86     	; 0x132a <LCD_Init+0x9c>
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	49 f5       	brne	.+82     	; 0x132a <LCD_Init+0x9c>
    12d8:	80 e3       	ldi	r24, 0x30	; 48
    12da:	3b df       	rcall	.-394    	; 0x1152 <lcd_SendNibble>
    12dc:	71 df       	rcall	.-286    	; 0x11c0 <lcd_SendCmdSignals>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	90 e7       	ldi	r25, 0x70	; 112
    12e2:	a2 e0       	ldi	r26, 0x02	; 2
    12e4:	81 50       	subi	r24, 0x01	; 1
    12e6:	90 40       	sbci	r25, 0x00	; 0
    12e8:	a0 40       	sbci	r26, 0x00	; 0
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <LCD_Init+0x56>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <LCD_Init+0x60>
    12ee:	00 00       	nop
    12f0:	80 e3       	ldi	r24, 0x30	; 48
    12f2:	2f df       	rcall	.-418    	; 0x1152 <lcd_SendNibble>
    12f4:	65 df       	rcall	.-310    	; 0x11c0 <lcd_SendCmdSignals>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12f6:	af e8       	ldi	r26, 0x8F	; 143
    12f8:	b1 e0       	ldi	r27, 0x01	; 1
    12fa:	11 97       	sbiw	r26, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <LCD_Init+0x6c>
    12fe:	00 c0       	rjmp	.+0      	; 0x1300 <LCD_Init+0x72>
    1300:	00 00       	nop
    1302:	80 e3       	ldi	r24, 0x30	; 48
    1304:	26 df       	rcall	.-436    	; 0x1152 <lcd_SendNibble>
    1306:	5c df       	rcall	.-328    	; 0x11c0 <lcd_SendCmdSignals>
    1308:	8f e8       	ldi	r24, 0x8F	; 143
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <LCD_Init+0x7e>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <LCD_Init+0x84>
    1312:	00 00       	nop
    1314:	80 e2       	ldi	r24, 0x20	; 32
    1316:	1d df       	rcall	.-454    	; 0x1152 <lcd_SendNibble>
    1318:	53 df       	rcall	.-346    	; 0x11c0 <lcd_SendCmdSignals>
    131a:	af e8       	ldi	r26, 0x8F	; 143
    131c:	b1 e0       	ldi	r27, 0x01	; 1
    131e:	11 97       	sbiw	r26, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <LCD_Init+0x90>
    1322:	00 c0       	rjmp	.+0      	; 0x1324 <LCD_Init+0x96>
    1324:	00 00       	nop
    1326:	88 e2       	ldi	r24, 0x28	; 40
    1328:	5d df       	rcall	.-326    	; 0x11e4 <LCD_CmdWrite>
    132a:	8f e0       	ldi	r24, 0x0F	; 15
    132c:	5b df       	rcall	.-330    	; 0x11e4 <LCD_CmdWrite>
    132e:	aa df       	rcall	.-172    	; 0x1284 <LCD_Clear>
    1330:	08 95       	ret

00001332 <lcd_DataWrite>:
    1332:	cf 93       	push	r28
    1334:	c8 2f       	mov	r28, r24
    1336:	23 df       	rcall	.-442    	; 0x117e <lcd_BusyCheck>
    1338:	80 91 7e 02 	lds	r24, 0x027E
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	19 f4       	brne	.+6      	; 0x1346 <lcd_DataWrite+0x14>
    1340:	c8 bb       	out	0x18, r28	; 24
    1342:	47 df       	rcall	.-370    	; 0x11d2 <lcd_SendDataSignals>
    1344:	0a c0       	rjmp	.+20     	; 0x135a <lcd_DataWrite+0x28>
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	41 f4       	brne	.+16     	; 0x135a <lcd_DataWrite+0x28>
    134a:	8c 2f       	mov	r24, r28
    134c:	02 df       	rcall	.-508    	; 0x1152 <lcd_SendNibble>
    134e:	41 df       	rcall	.-382    	; 0x11d2 <lcd_SendDataSignals>
    1350:	8c 2f       	mov	r24, r28
    1352:	82 95       	swap	r24
    1354:	80 7f       	andi	r24, 0xF0	; 240
    1356:	fd de       	rcall	.-518    	; 0x1152 <lcd_SendNibble>
    1358:	3c df       	rcall	.-392    	; 0x11d2 <lcd_SendDataSignals>
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <LCD_DisplayChar>:
    135e:	cf 93       	push	r28
    1360:	c8 2f       	mov	r28, r24
    1362:	90 91 7d 02 	lds	r25, 0x027D
    1366:	80 91 7a 02 	lds	r24, 0x027A
    136a:	89 17       	cp	r24, r25
    136c:	18 f4       	brcc	.+6      	; 0x1374 <LCD_DisplayChar+0x16>
    136e:	ca 30       	cpi	r28, 0x0A	; 10
    1370:	21 f4       	brne	.+8      	; 0x137a <LCD_DisplayChar+0x1c>
    1372:	0b c0       	rjmp	.+22     	; 0x138a <LCD_DisplayChar+0x2c>
    1374:	61 df       	rcall	.-318    	; 0x1238 <LCD_GoToNextLine>
    1376:	ca 30       	cpi	r28, 0x0A	; 10
    1378:	49 f0       	breq	.+18     	; 0x138c <LCD_DisplayChar+0x2e>
    137a:	8c 2f       	mov	r24, r28
    137c:	da df       	rcall	.-76     	; 0x1332 <lcd_DataWrite>
    137e:	80 91 7a 02 	lds	r24, 0x027A
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	80 93 7a 02 	sts	0x027A, r24
    1388:	01 c0       	rjmp	.+2      	; 0x138c <LCD_DisplayChar+0x2e>
    138a:	56 df       	rcall	.-340    	; 0x1238 <LCD_GoToNextLine>
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <LCD_DisplayBinaryNumber>:
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	6b 01       	movw	r12, r22
    13a4:	7c 01       	movw	r14, r24
    13a6:	c4 2f       	mov	r28, r20
    13a8:	44 23       	and	r20, r20
    13aa:	11 f1       	breq	.+68     	; 0x13f0 <LCD_DisplayBinaryNumber+0x60>
    13ac:	01 e0       	ldi	r16, 0x01	; 1
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	d1 e0       	ldi	r29, 0x01	; 1
    13b2:	bb 24       	eor	r11, r11
    13b4:	4c 2f       	mov	r20, r28
    13b6:	50 e0       	ldi	r21, 0x00	; 0
    13b8:	41 50       	subi	r20, 0x01	; 1
    13ba:	50 40       	sbci	r21, 0x00	; 0
    13bc:	c8 01       	movw	r24, r16
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <LCD_DisplayBinaryNumber+0x34>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	4a 95       	dec	r20
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <LCD_DisplayBinaryNumber+0x30>
    13c8:	ac 01       	movw	r20, r24
    13ca:	66 27       	eor	r22, r22
    13cc:	57 fd       	sbrc	r21, 7
    13ce:	60 95       	com	r22
    13d0:	76 2f       	mov	r23, r22
    13d2:	4c 21       	and	r20, r12
    13d4:	5d 21       	and	r21, r13
    13d6:	6e 21       	and	r22, r14
    13d8:	7f 21       	and	r23, r15
    13da:	8d 2f       	mov	r24, r29
    13dc:	41 15       	cp	r20, r1
    13de:	51 05       	cpc	r21, r1
    13e0:	61 05       	cpc	r22, r1
    13e2:	71 05       	cpc	r23, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <LCD_DisplayBinaryNumber+0x58>
    13e6:	8b 2d       	mov	r24, r11
    13e8:	80 5d       	subi	r24, 0xD0	; 208
    13ea:	b9 df       	rcall	.-142    	; 0x135e <LCD_DisplayChar>
    13ec:	c1 50       	subi	r28, 0x01	; 1
    13ee:	11 f7       	brne	.-60     	; 0x13b4 <LCD_DisplayBinaryNumber+0x24>
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	08 95       	ret

00001404 <LCD_DisplayHexNumber>:
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	2a 97       	sbiw	r28, 0x0a	; 10
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	a1 05       	cpc	r26, r1
    1422:	b1 05       	cpc	r27, r1
    1424:	19 f0       	breq	.+6      	; 0x142c <LCD_DisplayHexNumber+0x28>
    1426:	44 23       	and	r20, r20
    1428:	69 f4       	brne	.+26     	; 0x1444 <LCD_DisplayHexNumber+0x40>
    142a:	35 c0       	rjmp	.+106    	; 0x1496 <LCD_DisplayHexNumber+0x92>
    142c:	44 23       	and	r20, r20
    142e:	99 f1       	breq	.+102    	; 0x1496 <LCD_DisplayHexNumber+0x92>
    1430:	fe 01       	movw	r30, r28
    1432:	31 96       	adiw	r30, 0x01	; 1
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	11 92       	st	Z+, r1
    1438:	1f 5f       	subi	r17, 0xFF	; 255
    143a:	14 17       	cp	r17, r20
    143c:	01 f1       	breq	.+64     	; 0x147e <LCD_DisplayHexNumber+0x7a>
    143e:	1a 30       	cpi	r17, 0x0A	; 10
    1440:	d1 f7       	brne	.-12     	; 0x1436 <LCD_DisplayHexNumber+0x32>
    1442:	1d c0       	rjmp	.+58     	; 0x147e <LCD_DisplayHexNumber+0x7a>
    1444:	fe 01       	movw	r30, r28
    1446:	31 96       	adiw	r30, 0x01	; 1
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	a1 05       	cpc	r26, r1
    144e:	b1 05       	cpc	r27, r1
    1450:	61 f0       	breq	.+24     	; 0x146a <LCD_DisplayHexNumber+0x66>
    1452:	28 2f       	mov	r18, r24
    1454:	2f 70       	andi	r18, 0x0F	; 15
    1456:	20 83       	st	Z, r18
    1458:	68 94       	set
    145a:	13 f8       	bld	r1, 3
    145c:	b6 95       	lsr	r27
    145e:	a7 95       	ror	r26
    1460:	97 95       	ror	r25
    1462:	87 95       	ror	r24
    1464:	16 94       	lsr	r1
    1466:	d1 f7       	brne	.-12     	; 0x145c <LCD_DisplayHexNumber+0x58>
    1468:	03 c0       	rjmp	.+6      	; 0x1470 <LCD_DisplayHexNumber+0x6c>
    146a:	4b 30       	cpi	r20, 0x0B	; 11
    146c:	30 f4       	brcc	.+12     	; 0x147a <LCD_DisplayHexNumber+0x76>
    146e:	10 82       	st	Z, r1
    1470:	1f 5f       	subi	r17, 0xFF	; 255
    1472:	31 96       	adiw	r30, 0x01	; 1
    1474:	14 17       	cp	r17, r20
    1476:	49 f7       	brne	.-46     	; 0x144a <LCD_DisplayHexNumber+0x46>
    1478:	02 c0       	rjmp	.+4      	; 0x147e <LCD_DisplayHexNumber+0x7a>
    147a:	11 23       	and	r17, r17
    147c:	61 f0       	breq	.+24     	; 0x1496 <LCD_DisplayHexNumber+0x92>
    147e:	fe 01       	movw	r30, r28
    1480:	e1 0f       	add	r30, r17
    1482:	f1 1d       	adc	r31, r1
    1484:	80 81       	ld	r24, Z
    1486:	8a 30       	cpi	r24, 0x0A	; 10
    1488:	10 f0       	brcs	.+4      	; 0x148e <LCD_DisplayHexNumber+0x8a>
    148a:	89 5c       	subi	r24, 0xC9	; 201
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <LCD_DisplayHexNumber+0x8c>
    148e:	80 5d       	subi	r24, 0xD0	; 208
    1490:	66 df       	rcall	.-308    	; 0x135e <LCD_DisplayChar>
    1492:	11 50       	subi	r17, 0x01	; 1
    1494:	a1 f7       	brne	.-24     	; 0x147e <LCD_DisplayHexNumber+0x7a>
    1496:	2a 96       	adiw	r28, 0x0a	; 10
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	08 95       	ret

000014aa <LCD_DisplayDecimalNumber>:
    14aa:	8f 92       	push	r8
    14ac:	9f 92       	push	r9
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	2a 97       	sbiw	r28, 0x0a	; 10
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	f8 94       	cli
    14c8:	de bf       	out	0x3e, r29	; 62
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	cd bf       	out	0x3d, r28	; 61
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	04 2f       	mov	r16, r20
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	a1 05       	cpc	r26, r1
    14d8:	b1 05       	cpc	r27, r1
    14da:	19 f0       	breq	.+6      	; 0x14e2 <LCD_DisplayDecimalNumber+0x38>
    14dc:	44 23       	and	r20, r20
    14de:	71 f4       	brne	.+28     	; 0x14fc <LCD_DisplayDecimalNumber+0x52>
    14e0:	41 c0       	rjmp	.+130    	; 0x1564 <LCD_DisplayDecimalNumber+0xba>
    14e2:	44 23       	and	r20, r20
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <LCD_DisplayDecimalNumber+0x3e>
    14e6:	3e c0       	rjmp	.+124    	; 0x1564 <LCD_DisplayDecimalNumber+0xba>
    14e8:	fe 01       	movw	r30, r28
    14ea:	31 96       	adiw	r30, 0x01	; 1
    14ec:	10 e0       	ldi	r17, 0x00	; 0
    14ee:	11 92       	st	Z+, r1
    14f0:	1f 5f       	subi	r17, 0xFF	; 255
    14f2:	10 17       	cp	r17, r16
    14f4:	79 f1       	breq	.+94     	; 0x1554 <LCD_DisplayDecimalNumber+0xaa>
    14f6:	1a 30       	cpi	r17, 0x0A	; 10
    14f8:	d1 f7       	brne	.-12     	; 0x14ee <LCD_DisplayDecimalNumber+0x44>
    14fa:	2c c0       	rjmp	.+88     	; 0x1554 <LCD_DisplayDecimalNumber+0xaa>
    14fc:	7e 01       	movw	r14, r28
    14fe:	08 94       	sec
    1500:	e1 1c       	adc	r14, r1
    1502:	f1 1c       	adc	r15, r1
    1504:	10 e0       	ldi	r17, 0x00	; 0
    1506:	0f 2e       	mov	r0, r31
    1508:	fa e0       	ldi	r31, 0x0A	; 10
    150a:	8f 2e       	mov	r8, r31
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	9f 2e       	mov	r9, r31
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	af 2e       	mov	r10, r31
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	bf 2e       	mov	r11, r31
    1518:	f0 2d       	mov	r31, r0
    151a:	00 97       	sbiw	r24, 0x00	; 0
    151c:	a1 05       	cpc	r26, r1
    151e:	b1 05       	cpc	r27, r1
    1520:	61 f0       	breq	.+24     	; 0x153a <LCD_DisplayDecimalNumber+0x90>
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	a5 01       	movw	r20, r10
    1528:	94 01       	movw	r18, r8
    152a:	46 d2       	rcall	.+1164   	; 0x19b8 <__udivmodsi4>
    152c:	f7 01       	movw	r30, r14
    152e:	60 83       	st	Z, r22
    1530:	82 2f       	mov	r24, r18
    1532:	93 2f       	mov	r25, r19
    1534:	a4 2f       	mov	r26, r20
    1536:	b5 2f       	mov	r27, r21
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <LCD_DisplayDecimalNumber+0x98>
    153a:	0b 30       	cpi	r16, 0x0B	; 11
    153c:	48 f4       	brcc	.+18     	; 0x1550 <LCD_DisplayDecimalNumber+0xa6>
    153e:	f7 01       	movw	r30, r14
    1540:	10 82       	st	Z, r1
    1542:	1f 5f       	subi	r17, 0xFF	; 255
    1544:	08 94       	sec
    1546:	e1 1c       	adc	r14, r1
    1548:	f1 1c       	adc	r15, r1
    154a:	10 17       	cp	r17, r16
    154c:	31 f7       	brne	.-52     	; 0x151a <LCD_DisplayDecimalNumber+0x70>
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <LCD_DisplayDecimalNumber+0xaa>
    1550:	11 23       	and	r17, r17
    1552:	41 f0       	breq	.+16     	; 0x1564 <LCD_DisplayDecimalNumber+0xba>
    1554:	fe 01       	movw	r30, r28
    1556:	e1 0f       	add	r30, r17
    1558:	f1 1d       	adc	r31, r1
    155a:	80 81       	ld	r24, Z
    155c:	80 5d       	subi	r24, 0xD0	; 208
    155e:	ff de       	rcall	.-514    	; 0x135e <LCD_DisplayChar>
    1560:	11 50       	subi	r17, 0x01	; 1
    1562:	c1 f7       	brne	.-16     	; 0x1554 <LCD_DisplayDecimalNumber+0xaa>
    1564:	2a 96       	adiw	r28, 0x0a	; 10
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	ff 90       	pop	r15
    157a:	ef 90       	pop	r14
    157c:	bf 90       	pop	r11
    157e:	af 90       	pop	r10
    1580:	9f 90       	pop	r9
    1582:	8f 90       	pop	r8
    1584:	08 95       	ret

00001586 <LCD_ScrollMessage>:
    1586:	af 92       	push	r10
    1588:	bf 92       	push	r11
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	b8 2e       	mov	r11, r24
    159c:	6b 01       	movw	r12, r22
    159e:	80 91 7c 02 	lds	r24, 0x027C
    15a2:	8b 15       	cp	r24, r11
    15a4:	10 f4       	brcc	.+4      	; 0x15aa <LCD_ScrollMessage+0x24>
    15a6:	bb 24       	eor	r11, r11
    15a8:	b3 94       	inc	r11
    15aa:	8c e0       	ldi	r24, 0x0C	; 12
    15ac:	1b de       	rcall	.-970    	; 0x11e4 <LCD_CmdWrite>
    15ae:	d6 01       	movw	r26, r12
    15b0:	8c 91       	ld	r24, X
    15b2:	88 23       	and	r24, r24
    15b4:	b9 f1       	breq	.+110    	; 0x1624 <LCD_ScrollMessage+0x9e>
    15b6:	d0 e0       	ldi	r29, 0x00	; 0
    15b8:	0d e7       	ldi	r16, 0x7D	; 125
    15ba:	12 e0       	ldi	r17, 0x02	; 2
    15bc:	aa 24       	eor	r10, r10
    15be:	8b 2d       	mov	r24, r11
    15c0:	52 de       	rcall	.-860    	; 0x1266 <LCD_GoToLine>
    15c2:	f8 01       	movw	r30, r16
    15c4:	80 81       	ld	r24, Z
    15c6:	88 23       	and	r24, r24
    15c8:	e9 f0       	breq	.+58     	; 0x1604 <LCD_ScrollMessage+0x7e>
    15ca:	ed 2e       	mov	r14, r29
    15cc:	ff 24       	eor	r15, r15
    15ce:	f6 01       	movw	r30, r12
    15d0:	ee 0d       	add	r30, r14
    15d2:	ff 1d       	adc	r31, r15
    15d4:	80 81       	ld	r24, Z
    15d6:	88 23       	and	r24, r24
    15d8:	91 f1       	breq	.+100    	; 0x163e <LCD_ScrollMessage+0xb8>
    15da:	ca 2d       	mov	r28, r10
    15dc:	7f 01       	movw	r14, r30
    15de:	bf de       	rcall	.-642    	; 0x135e <LCD_DisplayChar>
    15e0:	cf 5f       	subi	r28, 0xFF	; 255
    15e2:	d8 01       	movw	r26, r16
    15e4:	8c 91       	ld	r24, X
    15e6:	c8 17       	cp	r28, r24
    15e8:	68 f4       	brcc	.+26     	; 0x1604 <LCD_ScrollMessage+0x7e>
    15ea:	f7 01       	movw	r30, r14
    15ec:	ec 0f       	add	r30, r28
    15ee:	f1 1d       	adc	r31, r1
    15f0:	80 81       	ld	r24, Z
    15f2:	88 23       	and	r24, r24
    15f4:	a1 f7       	brne	.-24     	; 0x15de <LCD_ScrollMessage+0x58>
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	b2 de       	rcall	.-668    	; 0x135e <LCD_DisplayChar>
    15fa:	cf 5f       	subi	r28, 0xFF	; 255
    15fc:	f8 01       	movw	r30, r16
    15fe:	80 81       	ld	r24, Z
    1600:	c8 17       	cp	r28, r24
    1602:	c8 f3       	brcs	.-14     	; 0x15f6 <LCD_ScrollMessage+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1604:	8f e3       	ldi	r24, 0x3F	; 63
    1606:	9d e0       	ldi	r25, 0x0D	; 13
    1608:	a3 e0       	ldi	r26, 0x03	; 3
    160a:	81 50       	subi	r24, 0x01	; 1
    160c:	90 40       	sbci	r25, 0x00	; 0
    160e:	a0 40       	sbci	r26, 0x00	; 0
    1610:	e1 f7       	brne	.-8      	; 0x160a <LCD_ScrollMessage+0x84>
    1612:	00 c0       	rjmp	.+0      	; 0x1614 <LCD_ScrollMessage+0x8e>
    1614:	00 00       	nop
    1616:	df 5f       	subi	r29, 0xFF	; 255
    1618:	f6 01       	movw	r30, r12
    161a:	ed 0f       	add	r30, r29
    161c:	f1 1d       	adc	r31, r1
    161e:	80 81       	ld	r24, Z
    1620:	88 23       	and	r24, r24
    1622:	69 f6       	brne	.-102    	; 0x15be <LCD_ScrollMessage+0x38>
    1624:	8e e0       	ldi	r24, 0x0E	; 14
    1626:	de dd       	rcall	.-1092   	; 0x11e4 <LCD_CmdWrite>
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	bf 90       	pop	r11
    163a:	af 90       	pop	r10
    163c:	08 95       	ret
    163e:	ca 2d       	mov	r28, r10
    1640:	da cf       	rjmp	.-76     	; 0x15f6 <LCD_ScrollMessage+0x70>

00001642 <LCD_DisplayString>:
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	ec 01       	movw	r28, r24
    1648:	88 81       	ld	r24, Y
    164a:	88 23       	and	r24, r24
    164c:	29 f0       	breq	.+10     	; 0x1658 <LCD_DisplayString+0x16>
    164e:	21 96       	adiw	r28, 0x01	; 1
    1650:	86 de       	rcall	.-756    	; 0x135e <LCD_DisplayChar>
    1652:	89 91       	ld	r24, Y+
    1654:	88 23       	and	r24, r24
    1656:	e1 f7       	brne	.-8      	; 0x1650 <LCD_DisplayString+0xe>
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <LCD_Printf>:
    165e:	5f 92       	push	r5
    1660:	6f 92       	push	r6
    1662:	7f 92       	push	r7
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	0f 2e       	mov	r0, r31
    1682:	f2 e1       	ldi	r31, 0x12	; 18
    1684:	cf 2e       	mov	r12, r31
    1686:	dd 24       	eor	r13, r13
    1688:	f0 2d       	mov	r31, r0
    168a:	cc 0e       	add	r12, r28
    168c:	dd 1e       	adc	r13, r29
    168e:	d6 01       	movw	r26, r12
    1690:	ed 91       	ld	r30, X+
    1692:	fd 91       	ld	r31, X+
    1694:	6d 01       	movw	r12, r26
    1696:	80 81       	ld	r24, Z
    1698:	88 23       	and	r24, r24
    169a:	09 f4       	brne	.+2      	; 0x169e <LCD_Printf+0x40>
    169c:	f1 c0       	rjmp	.+482    	; 0x1880 <LCD_Printf+0x222>
    169e:	8f 01       	movw	r16, r30
    16a0:	55 24       	eor	r5, r5
    16a2:	68 94       	set
    16a4:	54 f8       	bld	r5, 4
    16a6:	99 24       	eor	r9, r9
    16a8:	9a 94       	dec	r9
    16aa:	88 24       	eor	r8, r8
    16ac:	85 32       	cpi	r24, 0x25	; 37
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <LCD_Printf+0x54>
    16b0:	db c0       	rjmp	.+438    	; 0x1868 <LCD_Printf+0x20a>
    16b2:	58 01       	movw	r10, r16
    16b4:	08 94       	sec
    16b6:	a1 1c       	adc	r10, r1
    16b8:	b1 1c       	adc	r11, r1
    16ba:	f8 01       	movw	r30, r16
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	98 2f       	mov	r25, r24
    16c0:	90 53       	subi	r25, 0x30	; 48
    16c2:	9a 30       	cpi	r25, 0x0A	; 10
    16c4:	80 f4       	brcc	.+32     	; 0x16e6 <LCD_Printf+0x88>
    16c6:	32 96       	adiw	r30, 0x02	; 2
    16c8:	18 2d       	mov	r17, r8
    16ca:	11 0f       	add	r17, r17
    16cc:	91 2f       	mov	r25, r17
    16ce:	99 0f       	add	r25, r25
    16d0:	99 0f       	add	r25, r25
    16d2:	19 0f       	add	r17, r25
    16d4:	80 53       	subi	r24, 0x30	; 48
    16d6:	18 0f       	add	r17, r24
    16d8:	5f 01       	movw	r10, r30
    16da:	81 91       	ld	r24, Z+
    16dc:	98 2f       	mov	r25, r24
    16de:	90 53       	subi	r25, 0x30	; 48
    16e0:	9a 30       	cpi	r25, 0x0A	; 10
    16e2:	98 f3       	brcs	.-26     	; 0x16ca <LCD_Printf+0x6c>
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <LCD_Printf+0x8a>
    16e6:	19 2d       	mov	r17, r9
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	85 97       	sbiw	r24, 0x25	; 37
    16ec:	84 35       	cpi	r24, 0x54	; 84
    16ee:	91 05       	cpc	r25, r1
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <LCD_Printf+0x96>
    16f2:	bc c0       	rjmp	.+376    	; 0x186c <LCD_Printf+0x20e>
    16f4:	83 5e       	subi	r24, 0xE3	; 227
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	8f 93       	push	r24
    16fa:	9f 93       	push	r25
    16fc:	08 95       	ret
    16fe:	86 01       	movw	r16, r12
    1700:	0e 5f       	subi	r16, 0xFE	; 254
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	d6 01       	movw	r26, r12
    1706:	8c 91       	ld	r24, X
    1708:	2a de       	rcall	.-940    	; 0x135e <LCD_DisplayChar>
    170a:	68 01       	movw	r12, r16
    170c:	af c0       	rjmp	.+350    	; 0x186c <LCD_Printf+0x20e>
    170e:	ee 24       	eor	r14, r14
    1710:	ff 24       	eor	r15, r15
    1712:	68 94       	set
    1714:	e1 f8       	bld	r14, 1
    1716:	ec 0c       	add	r14, r12
    1718:	fd 1c       	adc	r15, r13
    171a:	f6 01       	movw	r30, r12
    171c:	c0 80       	ld	r12, Z
    171e:	d1 80       	ldd	r13, Z+1	; 0x01
    1720:	dd 20       	and	r13, r13
    1722:	34 f4       	brge	.+12     	; 0x1730 <LCD_Printf+0xd2>
    1724:	d0 94       	com	r13
    1726:	c1 94       	neg	r12
    1728:	d1 08       	sbc	r13, r1
    172a:	d3 94       	inc	r13
    172c:	8d e2       	ldi	r24, 0x2D	; 45
    172e:	17 de       	rcall	.-978    	; 0x135e <LCD_DisplayChar>
    1730:	b6 01       	movw	r22, r12
    1732:	88 27       	eor	r24, r24
    1734:	77 fd       	sbrc	r23, 7
    1736:	80 95       	com	r24
    1738:	98 2f       	mov	r25, r24
    173a:	41 2f       	mov	r20, r17
    173c:	b6 de       	rcall	.-660    	; 0x14aa <LCD_DisplayDecimalNumber>
    173e:	67 01       	movw	r12, r14
    1740:	95 c0       	rjmp	.+298    	; 0x186c <LCD_Printf+0x20e>
    1742:	66 24       	eor	r6, r6
    1744:	77 24       	eor	r7, r7
    1746:	68 94       	set
    1748:	62 f8       	bld	r6, 2
    174a:	6c 0c       	add	r6, r12
    174c:	7d 1c       	adc	r7, r13
    174e:	d6 01       	movw	r26, r12
    1750:	cd 90       	ld	r12, X+
    1752:	dd 90       	ld	r13, X+
    1754:	ed 90       	ld	r14, X+
    1756:	fc 90       	ld	r15, X
    1758:	13 97       	sbiw	r26, 0x03	; 3
    175a:	ff 20       	and	r15, r15
    175c:	54 f4       	brge	.+20     	; 0x1772 <LCD_Printf+0x114>
    175e:	f0 94       	com	r15
    1760:	e0 94       	com	r14
    1762:	d0 94       	com	r13
    1764:	c0 94       	com	r12
    1766:	c1 1c       	adc	r12, r1
    1768:	d1 1c       	adc	r13, r1
    176a:	e1 1c       	adc	r14, r1
    176c:	f1 1c       	adc	r15, r1
    176e:	8d e2       	ldi	r24, 0x2D	; 45
    1770:	f6 dd       	rcall	.-1044   	; 0x135e <LCD_DisplayChar>
    1772:	c7 01       	movw	r24, r14
    1774:	b6 01       	movw	r22, r12
    1776:	41 2f       	mov	r20, r17
    1778:	98 de       	rcall	.-720    	; 0x14aa <LCD_DisplayDecimalNumber>
    177a:	63 01       	movw	r12, r6
    177c:	77 c0       	rjmp	.+238    	; 0x186c <LCD_Printf+0x20e>
    177e:	ee 24       	eor	r14, r14
    1780:	ff 24       	eor	r15, r15
    1782:	68 94       	set
    1784:	e1 f8       	bld	r14, 1
    1786:	ec 0c       	add	r14, r12
    1788:	fd 1c       	adc	r15, r13
    178a:	f6 01       	movw	r30, r12
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	bc 01       	movw	r22, r24
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	41 2f       	mov	r20, r17
    1798:	88 de       	rcall	.-752    	; 0x14aa <LCD_DisplayDecimalNumber>
    179a:	67 01       	movw	r12, r14
    179c:	67 c0       	rjmp	.+206    	; 0x186c <LCD_Printf+0x20e>
    179e:	ee 24       	eor	r14, r14
    17a0:	ff 24       	eor	r15, r15
    17a2:	68 94       	set
    17a4:	e2 f8       	bld	r14, 2
    17a6:	ec 0c       	add	r14, r12
    17a8:	fd 1c       	adc	r15, r13
    17aa:	d6 01       	movw	r26, r12
    17ac:	6d 91       	ld	r22, X+
    17ae:	7d 91       	ld	r23, X+
    17b0:	8d 91       	ld	r24, X+
    17b2:	9c 91       	ld	r25, X
    17b4:	41 2f       	mov	r20, r17
    17b6:	79 de       	rcall	.-782    	; 0x14aa <LCD_DisplayDecimalNumber>
    17b8:	67 01       	movw	r12, r14
    17ba:	58 c0       	rjmp	.+176    	; 0x186c <LCD_Printf+0x20e>
    17bc:	ee 24       	eor	r14, r14
    17be:	ff 24       	eor	r15, r15
    17c0:	68 94       	set
    17c2:	e1 f8       	bld	r14, 1
    17c4:	ec 0c       	add	r14, r12
    17c6:	fd 1c       	adc	r15, r13
    17c8:	f6 01       	movw	r30, r12
    17ca:	80 81       	ld	r24, Z
    17cc:	91 81       	ldd	r25, Z+1	; 0x01
    17ce:	bc 01       	movw	r22, r24
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	41 2f       	mov	r20, r17
    17d6:	16 de       	rcall	.-980    	; 0x1404 <LCD_DisplayHexNumber>
    17d8:	67 01       	movw	r12, r14
    17da:	48 c0       	rjmp	.+144    	; 0x186c <LCD_Printf+0x20e>
    17dc:	ee 24       	eor	r14, r14
    17de:	ff 24       	eor	r15, r15
    17e0:	68 94       	set
    17e2:	e2 f8       	bld	r14, 2
    17e4:	ec 0c       	add	r14, r12
    17e6:	fd 1c       	adc	r15, r13
    17e8:	d6 01       	movw	r26, r12
    17ea:	6d 91       	ld	r22, X+
    17ec:	7d 91       	ld	r23, X+
    17ee:	8d 91       	ld	r24, X+
    17f0:	9c 91       	ld	r25, X
    17f2:	41 2f       	mov	r20, r17
    17f4:	07 de       	rcall	.-1010   	; 0x1404 <LCD_DisplayHexNumber>
    17f6:	67 01       	movw	r12, r14
    17f8:	39 c0       	rjmp	.+114    	; 0x186c <LCD_Printf+0x20e>
    17fa:	ee 24       	eor	r14, r14
    17fc:	ff 24       	eor	r15, r15
    17fe:	68 94       	set
    1800:	e1 f8       	bld	r14, 1
    1802:	ec 0c       	add	r14, r12
    1804:	fd 1c       	adc	r15, r13
    1806:	f6 01       	movw	r30, r12
    1808:	80 81       	ld	r24, Z
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	1f 3f       	cpi	r17, 0xFF	; 255
    180e:	09 f4       	brne	.+2      	; 0x1812 <LCD_Printf+0x1b4>
    1810:	15 2d       	mov	r17, r5
    1812:	bc 01       	movw	r22, r24
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	41 2f       	mov	r20, r17
    181a:	ba dd       	rcall	.-1164   	; 0x1390 <LCD_DisplayBinaryNumber>
    181c:	67 01       	movw	r12, r14
    181e:	26 c0       	rjmp	.+76     	; 0x186c <LCD_Printf+0x20e>
    1820:	ee 24       	eor	r14, r14
    1822:	ff 24       	eor	r15, r15
    1824:	68 94       	set
    1826:	e2 f8       	bld	r14, 2
    1828:	ec 0c       	add	r14, r12
    182a:	fd 1c       	adc	r15, r13
    182c:	d6 01       	movw	r26, r12
    182e:	6d 91       	ld	r22, X+
    1830:	7d 91       	ld	r23, X+
    1832:	8d 91       	ld	r24, X+
    1834:	9c 91       	ld	r25, X
    1836:	13 97       	sbiw	r26, 0x03	; 3
    1838:	1f 3f       	cpi	r17, 0xFF	; 255
    183a:	09 f4       	brne	.+2      	; 0x183e <LCD_Printf+0x1e0>
    183c:	15 2d       	mov	r17, r5
    183e:	41 2f       	mov	r20, r17
    1840:	a7 dd       	rcall	.-1202   	; 0x1390 <LCD_DisplayBinaryNumber>
    1842:	67 01       	movw	r12, r14
    1844:	13 c0       	rjmp	.+38     	; 0x186c <LCD_Printf+0x20e>
    1846:	e4 e0       	ldi	r30, 0x04	; 4
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	ce 0e       	add	r12, r30
    184c:	df 1e       	adc	r13, r31
    184e:	0e c0       	rjmp	.+28     	; 0x186c <LCD_Printf+0x20e>
    1850:	f6 01       	movw	r30, r12
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	c8 0e       	add	r12, r24
    1858:	d9 1e       	adc	r13, r25
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	f1 de       	rcall	.-542    	; 0x1642 <LCD_DisplayString>
    1860:	05 c0       	rjmp	.+10     	; 0x186c <LCD_Printf+0x20e>
    1862:	85 e2       	ldi	r24, 0x25	; 37
    1864:	7c dd       	rcall	.-1288   	; 0x135e <LCD_DisplayChar>
    1866:	02 c0       	rjmp	.+4      	; 0x186c <LCD_Printf+0x20e>
    1868:	7a dd       	rcall	.-1292   	; 0x135e <LCD_DisplayChar>
    186a:	58 01       	movw	r10, r16
    186c:	85 01       	movw	r16, r10
    186e:	0f 5f       	subi	r16, 0xFF	; 255
    1870:	1f 4f       	sbci	r17, 0xFF	; 255
    1872:	d5 01       	movw	r26, r10
    1874:	11 96       	adiw	r26, 0x01	; 1
    1876:	8c 91       	ld	r24, X
    1878:	11 97       	sbiw	r26, 0x01	; 1
    187a:	88 23       	and	r24, r24
    187c:	09 f0       	breq	.+2      	; 0x1880 <LCD_Printf+0x222>
    187e:	16 cf       	rjmp	.-468    	; 0x16ac <LCD_Printf+0x4e>
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	0f 91       	pop	r16
    1888:	ff 90       	pop	r15
    188a:	ef 90       	pop	r14
    188c:	df 90       	pop	r13
    188e:	cf 90       	pop	r12
    1890:	bf 90       	pop	r11
    1892:	af 90       	pop	r10
    1894:	9f 90       	pop	r9
    1896:	8f 90       	pop	r8
    1898:	7f 90       	pop	r7
    189a:	6f 90       	pop	r6
    189c:	5f 90       	pop	r5
    189e:	08 95       	ret

000018a0 <RTC_Init>:
    18a0:	33 dc       	rcall	.-1946   	; 0x1108 <I2C_Init>
    18a2:	38 dc       	rcall	.-1936   	; 0x1114 <I2C_Start>
    18a4:	80 ed       	ldi	r24, 0xD0	; 208
    18a6:	43 dc       	rcall	.-1914   	; 0x112e <I2C_Write>
    18a8:	87 e0       	ldi	r24, 0x07	; 7
    18aa:	41 dc       	rcall	.-1918   	; 0x112e <I2C_Write>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	3f dc       	rcall	.-1922   	; 0x112e <I2C_Write>
    18b0:	37 dc       	rcall	.-1938   	; 0x1120 <I2C_Stop>
    18b2:	08 95       	ret

000018b4 <RTC_SetTime>:
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	c8 2f       	mov	r28, r24
    18bc:	d6 2f       	mov	r29, r22
    18be:	14 2f       	mov	r17, r20
    18c0:	29 dc       	rcall	.-1966   	; 0x1114 <I2C_Start>
    18c2:	80 ed       	ldi	r24, 0xD0	; 208
    18c4:	34 dc       	rcall	.-1944   	; 0x112e <I2C_Write>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	32 dc       	rcall	.-1948   	; 0x112e <I2C_Write>
    18ca:	81 2f       	mov	r24, r17
    18cc:	30 dc       	rcall	.-1952   	; 0x112e <I2C_Write>
    18ce:	8d 2f       	mov	r24, r29
    18d0:	2e dc       	rcall	.-1956   	; 0x112e <I2C_Write>
    18d2:	8c 2f       	mov	r24, r28
    18d4:	2c dc       	rcall	.-1960   	; 0x112e <I2C_Write>
    18d6:	24 dc       	rcall	.-1976   	; 0x1120 <I2C_Stop>
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17
    18de:	08 95       	ret

000018e0 <RTC_SetDate>:
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	18 2f       	mov	r17, r24
    18e8:	d6 2f       	mov	r29, r22
    18ea:	c4 2f       	mov	r28, r20
    18ec:	13 dc       	rcall	.-2010   	; 0x1114 <I2C_Start>
    18ee:	80 ed       	ldi	r24, 0xD0	; 208
    18f0:	1e dc       	rcall	.-1988   	; 0x112e <I2C_Write>
    18f2:	84 e0       	ldi	r24, 0x04	; 4
    18f4:	1c dc       	rcall	.-1992   	; 0x112e <I2C_Write>
    18f6:	81 2f       	mov	r24, r17
    18f8:	1a dc       	rcall	.-1996   	; 0x112e <I2C_Write>
    18fa:	8d 2f       	mov	r24, r29
    18fc:	18 dc       	rcall	.-2000   	; 0x112e <I2C_Write>
    18fe:	8c 2f       	mov	r24, r28
    1900:	16 dc       	rcall	.-2004   	; 0x112e <I2C_Write>
    1902:	0e dc       	rcall	.-2020   	; 0x1120 <I2C_Stop>
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	08 95       	ret

0000190c <RTC_GetTime>:
    190c:	ef 92       	push	r14
    190e:	ff 92       	push	r15
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	7c 01       	movw	r14, r24
    191a:	8b 01       	movw	r16, r22
    191c:	ea 01       	movw	r28, r20
    191e:	fa db       	rcall	.-2060   	; 0x1114 <I2C_Start>
    1920:	80 ed       	ldi	r24, 0xD0	; 208
    1922:	05 dc       	rcall	.-2038   	; 0x112e <I2C_Write>
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	03 dc       	rcall	.-2042   	; 0x112e <I2C_Write>
    1928:	fb db       	rcall	.-2058   	; 0x1120 <I2C_Stop>
    192a:	f4 db       	rcall	.-2072   	; 0x1114 <I2C_Start>
    192c:	81 ed       	ldi	r24, 0xD1	; 209
    192e:	ff db       	rcall	.-2050   	; 0x112e <I2C_Write>
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	04 dc       	rcall	.-2040   	; 0x113c <I2C_Read>
    1934:	88 83       	st	Y, r24
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	01 dc       	rcall	.-2046   	; 0x113c <I2C_Read>
    193a:	f8 01       	movw	r30, r16
    193c:	80 83       	st	Z, r24
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	fd db       	rcall	.-2054   	; 0x113c <I2C_Read>
    1942:	f7 01       	movw	r30, r14
    1944:	80 83       	st	Z, r24
    1946:	ec db       	rcall	.-2088   	; 0x1120 <I2C_Stop>
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	08 95       	ret

00001956 <RTC_GetDate>:
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	ec 01       	movw	r28, r24
    1964:	8b 01       	movw	r16, r22
    1966:	7a 01       	movw	r14, r20
    1968:	d5 db       	rcall	.-2134   	; 0x1114 <I2C_Start>
    196a:	80 ed       	ldi	r24, 0xD0	; 208
    196c:	e0 db       	rcall	.-2112   	; 0x112e <I2C_Write>
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	de db       	rcall	.-2116   	; 0x112e <I2C_Write>
    1972:	d6 db       	rcall	.-2132   	; 0x1120 <I2C_Stop>
    1974:	cf db       	rcall	.-2146   	; 0x1114 <I2C_Start>
    1976:	81 ed       	ldi	r24, 0xD1	; 209
    1978:	da db       	rcall	.-2124   	; 0x112e <I2C_Write>
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	df db       	rcall	.-2114   	; 0x113c <I2C_Read>
    197e:	88 83       	st	Y, r24
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	dc db       	rcall	.-2120   	; 0x113c <I2C_Read>
    1984:	f8 01       	movw	r30, r16
    1986:	80 83       	st	Z, r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	d8 db       	rcall	.-2128   	; 0x113c <I2C_Read>
    198c:	f7 01       	movw	r30, r14
    198e:	80 83       	st	Z, r24
    1990:	c7 db       	rcall	.-2162   	; 0x1120 <I2C_Stop>
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	1f 91       	pop	r17
    1998:	0f 91       	pop	r16
    199a:	ff 90       	pop	r15
    199c:	ef 90       	pop	r14
    199e:	08 95       	ret

000019a0 <__udivmodqi4>:
    19a0:	99 1b       	sub	r25, r25
    19a2:	79 e0       	ldi	r23, 0x09	; 9
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <__udivmodqi4_ep>

000019a6 <__udivmodqi4_loop>:
    19a6:	99 1f       	adc	r25, r25
    19a8:	96 17       	cp	r25, r22
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <__udivmodqi4_ep>
    19ac:	96 1b       	sub	r25, r22

000019ae <__udivmodqi4_ep>:
    19ae:	88 1f       	adc	r24, r24
    19b0:	7a 95       	dec	r23
    19b2:	c9 f7       	brne	.-14     	; 0x19a6 <__udivmodqi4_loop>
    19b4:	80 95       	com	r24
    19b6:	08 95       	ret

000019b8 <__udivmodsi4>:
    19b8:	a1 e2       	ldi	r26, 0x21	; 33
    19ba:	1a 2e       	mov	r1, r26
    19bc:	aa 1b       	sub	r26, r26
    19be:	bb 1b       	sub	r27, r27
    19c0:	fd 01       	movw	r30, r26
    19c2:	0d c0       	rjmp	.+26     	; 0x19de <__udivmodsi4_ep>

000019c4 <__udivmodsi4_loop>:
    19c4:	aa 1f       	adc	r26, r26
    19c6:	bb 1f       	adc	r27, r27
    19c8:	ee 1f       	adc	r30, r30
    19ca:	ff 1f       	adc	r31, r31
    19cc:	a2 17       	cp	r26, r18
    19ce:	b3 07       	cpc	r27, r19
    19d0:	e4 07       	cpc	r30, r20
    19d2:	f5 07       	cpc	r31, r21
    19d4:	20 f0       	brcs	.+8      	; 0x19de <__udivmodsi4_ep>
    19d6:	a2 1b       	sub	r26, r18
    19d8:	b3 0b       	sbc	r27, r19
    19da:	e4 0b       	sbc	r30, r20
    19dc:	f5 0b       	sbc	r31, r21

000019de <__udivmodsi4_ep>:
    19de:	66 1f       	adc	r22, r22
    19e0:	77 1f       	adc	r23, r23
    19e2:	88 1f       	adc	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	1a 94       	dec	r1
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <__udivmodsi4_loop>
    19ea:	60 95       	com	r22
    19ec:	70 95       	com	r23
    19ee:	80 95       	com	r24
    19f0:	90 95       	com	r25
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
    19f6:	bd 01       	movw	r22, r26
    19f8:	cf 01       	movw	r24, r30
    19fa:	08 95       	ret

000019fc <_exit>:
    19fc:	f8 94       	cli

000019fe <__stop_program>:
    19fe:	ff cf       	rjmp	.-2      	; 0x19fe <__stop_program>
